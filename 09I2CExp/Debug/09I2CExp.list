
09I2CExp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046ec  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004884  08004884  00014884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800489c  0800489c  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  0800489c  0800489c  0001489c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048a4  080048a4  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048a4  080048a4  000148a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048a8  080048a8  000148a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080048ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2000002c  080048d8  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  080048d8  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b881  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ca  00000000  00000000  0002b8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002d1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000940  00000000  00000000  0002db58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014f9a  00000000  00000000  0002e498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c0d0  00000000  00000000  00043432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000843ba  00000000  00000000  0004f502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d38bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002848  00000000  00000000  000d390c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000002c 	.word	0x2000002c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800486c 	.word	0x0800486c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000030 	.word	0x20000030
 80001d4:	0800486c 	.word	0x0800486c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e0:	f000 fc0a 	bl	8000cf8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e4:	f000 f84c 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e8:	f000 f90c 	bl	8000704 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ec:	f000 f8e0 	bl	80006b0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80004f0:	f000 f8b0 	bl	8000654 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 80004f4:	2064      	movs	r0, #100	; 0x64
 80004f6:	f000 fc71 	bl	8000ddc <HAL_Delay>
  IOExpenderInit();
 80004fa:	f000 fa05 	bl	8000908 <IOExpenderInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int_exp();
 80004fe:	f000 f977 	bl	80007f0 <int_exp>


  HAL_Delay(500);
 8000502:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000506:	f000 fc69 	bl	8000ddc <HAL_Delay>


  while (1)
  {
		EEPROMWriteExample();
 800050a:	f000 f98f 	bl	800082c <EEPROMWriteExample>
		EEPROMReadExample(eepromDataReadBack, 4);
 800050e:	2104      	movs	r1, #4
 8000510:	4814      	ldr	r0, [pc, #80]	; (8000564 <main+0x88>)
 8000512:	f000 f9d3 	bl	80008bc <EEPROMReadExample>
		IOExpenderReadPinA(&IOExpdrDataReadBack);
 8000516:	4814      	ldr	r0, [pc, #80]	; (8000568 <main+0x8c>)
 8000518:	f000 fa0c 	bl	8000934 <IOExpenderReadPinA>
		IOExpenderWritePinB(IOExpdrDataWrite);
 800051c:	4b13      	ldr	r3, [pc, #76]	; (800056c <main+0x90>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	4618      	mov	r0, r3
 8000522:	f000 fa2b 	bl	800097c <IOExpenderWritePinB>

		IOExpenderWriteexp(IOExpdrDataReadBack << 4);
 8000526:	4b10      	ldr	r3, [pc, #64]	; (8000568 <main+0x8c>)
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	011b      	lsls	r3, r3, #4
 800052c:	b2db      	uxtb	r3, r3
 800052e:	4618      	mov	r0, r3
 8000530:	f000 fa4e 	bl	80009d0 <IOExpenderWriteexp>
		EEPROMWritefromeeprom();
 8000534:	f000 f99e 	bl	8000874 <EEPROMWritefromeeprom>
		if(canwrite && eepromExampleReadFlag == 0){
 8000538:	4b0d      	ldr	r3, [pc, #52]	; (8000570 <main+0x94>)
 800053a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d0e3      	beq.n	800050a <main+0x2e>
 8000542:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <main+0x98>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b00      	cmp	r3, #0
 8000548:	d1df      	bne.n	800050a <main+0x2e>
			HAL_Delay(100);
 800054a:	2064      	movs	r0, #100	; 0x64
 800054c:	f000 fc46 	bl	8000ddc <HAL_Delay>
			eepromWritefromeepromFlag = 1;
 8000550:	4b09      	ldr	r3, [pc, #36]	; (8000578 <main+0x9c>)
 8000552:	2201      	movs	r2, #1
 8000554:	701a      	strb	r2, [r3, #0]
			IOExpdrexpWriteFlag = 1;
 8000556:	4b09      	ldr	r3, [pc, #36]	; (800057c <main+0xa0>)
 8000558:	2201      	movs	r2, #1
 800055a:	701a      	strb	r2, [r3, #0]
			canwrite = 0;
 800055c:	4b04      	ldr	r3, [pc, #16]	; (8000570 <main+0x94>)
 800055e:	2200      	movs	r2, #0
 8000560:	801a      	strh	r2, [r3, #0]
		EEPROMWriteExample();
 8000562:	e7d2      	b.n	800050a <main+0x2e>
 8000564:	200000e8 	.word	0x200000e8
 8000568:	200000ec 	.word	0x200000ec
 800056c:	20000000 	.word	0x20000000
 8000570:	200000ee 	.word	0x200000ee
 8000574:	200000e2 	.word	0x200000e2
 8000578:	200000e1 	.word	0x200000e1
 800057c:	200000ed 	.word	0x200000ed

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2230      	movs	r2, #48	; 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f004 f964 	bl	800485c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b28      	ldr	r3, [pc, #160]	; (800064c <SystemClock_Config+0xcc>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	4a27      	ldr	r2, [pc, #156]	; (800064c <SystemClock_Config+0xcc>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	; 0x40
 80005b4:	4b25      	ldr	r3, [pc, #148]	; (800064c <SystemClock_Config+0xcc>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b22      	ldr	r3, [pc, #136]	; (8000650 <SystemClock_Config+0xd0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a21      	ldr	r2, [pc, #132]	; (8000650 <SystemClock_Config+0xd0>)
 80005ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <SystemClock_Config+0xd0>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005dc:	2302      	movs	r3, #2
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e0:	2301      	movs	r3, #1
 80005e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e4:	2310      	movs	r3, #16
 80005e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e8:	2302      	movs	r3, #2
 80005ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ec:	2300      	movs	r3, #0
 80005ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005f0:	2310      	movs	r3, #16
 80005f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005fa:	2304      	movs	r3, #4
 80005fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005fe:	2304      	movs	r3, #4
 8000600:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	4618      	mov	r0, r3
 8000608:	f003 f9aa 	bl	8003960 <HAL_RCC_OscConfig>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000612:	f000 fa21 	bl	8000a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000616:	230f      	movs	r3, #15
 8000618:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061a:	2302      	movs	r3, #2
 800061c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000622:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000626:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2102      	movs	r1, #2
 8000632:	4618      	mov	r0, r3
 8000634:	f003 fc0c 	bl	8003e50 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800063e:	f000 fa0b 	bl	8000a58 <Error_Handler>
  }
}
 8000642:	bf00      	nop
 8000644:	3750      	adds	r7, #80	; 0x50
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <MX_I2C1_Init+0x50>)
 800065a:	4a13      	ldr	r2, [pc, #76]	; (80006a8 <MX_I2C1_Init+0x54>)
 800065c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800065e:	4b11      	ldr	r3, [pc, #68]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000660:	4a12      	ldr	r2, [pc, #72]	; (80006ac <MX_I2C1_Init+0x58>)
 8000662:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000664:	4b0f      	ldr	r3, [pc, #60]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800066a:	4b0e      	ldr	r3, [pc, #56]	; (80006a4 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000672:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000676:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000678:	4b0a      	ldr	r3, [pc, #40]	; (80006a4 <MX_I2C1_Init+0x50>)
 800067a:	2200      	movs	r2, #0
 800067c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800067e:	4b09      	ldr	r3, [pc, #36]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000686:	2200      	movs	r2, #0
 8000688:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800068a:	4b06      	ldr	r3, [pc, #24]	; (80006a4 <MX_I2C1_Init+0x50>)
 800068c:	2200      	movs	r2, #0
 800068e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000690:	4804      	ldr	r0, [pc, #16]	; (80006a4 <MX_I2C1_Init+0x50>)
 8000692:	f000 febf 	bl	8001414 <HAL_I2C_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800069c:	f000 f9dc 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006a0:	bf00      	nop
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000048 	.word	0x20000048
 80006a8:	40005400 	.word	0x40005400
 80006ac:	00061a80 	.word	0x00061a80

080006b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b4:	4b11      	ldr	r3, [pc, #68]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006b6:	4a12      	ldr	r2, [pc, #72]	; (8000700 <MX_USART2_UART_Init+0x50>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0c      	ldr	r3, [pc, #48]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0b      	ldr	r3, [pc, #44]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b09      	ldr	r3, [pc, #36]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b08      	ldr	r3, [pc, #32]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e6:	4805      	ldr	r0, [pc, #20]	; (80006fc <MX_USART2_UART_Init+0x4c>)
 80006e8:	f003 fdd2 	bl	8004290 <HAL_UART_Init>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80006f2:	f000 f9b1 	bl	8000a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	2000009c 	.word	0x2000009c
 8000700:	40004400 	.word	0x40004400

08000704 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b08a      	sub	sp, #40	; 0x28
 8000708:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070a:	f107 0314 	add.w	r3, r7, #20
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	605a      	str	r2, [r3, #4]
 8000714:	609a      	str	r2, [r3, #8]
 8000716:	60da      	str	r2, [r3, #12]
 8000718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]
 800071e:	4b31      	ldr	r3, [pc, #196]	; (80007e4 <MX_GPIO_Init+0xe0>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000722:	4a30      	ldr	r2, [pc, #192]	; (80007e4 <MX_GPIO_Init+0xe0>)
 8000724:	f043 0304 	orr.w	r3, r3, #4
 8000728:	6313      	str	r3, [r2, #48]	; 0x30
 800072a:	4b2e      	ldr	r3, [pc, #184]	; (80007e4 <MX_GPIO_Init+0xe0>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072e:	f003 0304 	and.w	r3, r3, #4
 8000732:	613b      	str	r3, [r7, #16]
 8000734:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	4b2a      	ldr	r3, [pc, #168]	; (80007e4 <MX_GPIO_Init+0xe0>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a29      	ldr	r2, [pc, #164]	; (80007e4 <MX_GPIO_Init+0xe0>)
 8000740:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <MX_GPIO_Init+0xe0>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
 8000756:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <MX_GPIO_Init+0xe0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a22      	ldr	r2, [pc, #136]	; (80007e4 <MX_GPIO_Init+0xe0>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <MX_GPIO_Init+0xe0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	607b      	str	r3, [r7, #4]
 8000772:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_GPIO_Init+0xe0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a1b      	ldr	r2, [pc, #108]	; (80007e4 <MX_GPIO_Init+0xe0>)
 8000778:	f043 0302 	orr.w	r3, r3, #2
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_GPIO_Init+0xe0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0302 	and.w	r3, r3, #2
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 800078a:	2200      	movs	r2, #0
 800078c:	2122      	movs	r1, #34	; 0x22
 800078e:	4816      	ldr	r0, [pc, #88]	; (80007e8 <MX_GPIO_Init+0xe4>)
 8000790:	f000 fe0e 	bl	80013b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000794:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800079a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800079e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	4810      	ldr	r0, [pc, #64]	; (80007ec <MX_GPIO_Init+0xe8>)
 80007ac:	f000 fc7c 	bl	80010a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 80007b0:	2322      	movs	r3, #34	; 0x22
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	4619      	mov	r1, r3
 80007c6:	4808      	ldr	r0, [pc, #32]	; (80007e8 <MX_GPIO_Init+0xe4>)
 80007c8:	f000 fc6e 	bl	80010a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007cc:	2200      	movs	r2, #0
 80007ce:	2100      	movs	r1, #0
 80007d0:	2028      	movs	r0, #40	; 0x28
 80007d2:	f000 fc02 	bl	8000fda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007d6:	2028      	movs	r0, #40	; 0x28
 80007d8:	f000 fc1b 	bl	8001012 <HAL_NVIC_EnableIRQ>

}
 80007dc:	bf00      	nop
 80007de:	3728      	adds	r7, #40	; 0x28
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40020000 	.word	0x40020000
 80007ec:	40020800 	.word	0x40020800

080007f0 <int_exp>:

/* USER CODE BEGIN 4 */
void int_exp(){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	eepromExampleReadFlag= 1;
 80007f4:	4b0a      	ldr	r3, [pc, #40]	; (8000820 <int_exp+0x30>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	701a      	strb	r2, [r3, #0]
	IOExpdrexpWriteFlag = 1;
 80007fa:	4b0a      	ldr	r3, [pc, #40]	; (8000824 <int_exp+0x34>)
 80007fc:	2201      	movs	r2, #1
 80007fe:	701a      	strb	r2, [r3, #0]
	EEPROMReadExample(eepromDataReadBack, 4);
 8000800:	2104      	movs	r1, #4
 8000802:	4809      	ldr	r0, [pc, #36]	; (8000828 <int_exp+0x38>)
 8000804:	f000 f85a 	bl	80008bc <EEPROMReadExample>
	HAL_Delay(50);
 8000808:	2032      	movs	r0, #50	; 0x32
 800080a:	f000 fae7 	bl	8000ddc <HAL_Delay>
//	eepromDataReadBack[0]
	IOExpenderWriteexp(eepromDataReadBack[0] << 4);
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <int_exp+0x38>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	011b      	lsls	r3, r3, #4
 8000814:	b2db      	uxtb	r3, r3
 8000816:	4618      	mov	r0, r3
 8000818:	f000 f8da 	bl	80009d0 <IOExpenderWriteexp>



}
 800081c:	bf00      	nop
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200000e2 	.word	0x200000e2
 8000824:	200000ed 	.word	0x200000ed
 8000828:	200000e8 	.word	0x200000e8

0800082c <EEPROMWriteExample>:
void EEPROMWriteExample() {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af02      	add	r7, sp, #8
	if (eepromExampleWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <EEPROMWriteExample+0x3c>)
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d012      	beq.n	8000860 <EEPROMWriteExample+0x34>
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <EEPROMWriteExample+0x40>)
 800083c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000840:	b2db      	uxtb	r3, r3
 8000842:	2b20      	cmp	r3, #32
 8000844:	d10c      	bne.n	8000860 <EEPROMWriteExample+0x34>

		static uint8_t data[4] = { 0xff, 0x00, 0x55, 0xaa };
		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x61, I2C_MEMADD_SIZE_16BIT,
 8000846:	2304      	movs	r3, #4
 8000848:	9301      	str	r3, [sp, #4]
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <EEPROMWriteExample+0x44>)
 800084c:	9300      	str	r3, [sp, #0]
 800084e:	2310      	movs	r3, #16
 8000850:	2261      	movs	r2, #97	; 0x61
 8000852:	21a0      	movs	r1, #160	; 0xa0
 8000854:	4805      	ldr	r0, [pc, #20]	; (800086c <EEPROMWriteExample+0x40>)
 8000856:	f001 f81b 	bl	8001890 <HAL_I2C_Mem_Write_IT>
				data, 4);



		eepromExampleWriteFlag = 0;
 800085a:	4b03      	ldr	r3, [pc, #12]	; (8000868 <EEPROMWriteExample+0x3c>)
 800085c:	2200      	movs	r2, #0
 800085e:	701a      	strb	r2, [r3, #0]
	}
}
 8000860:	bf00      	nop
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000e0 	.word	0x200000e0
 800086c:	20000048 	.word	0x20000048
 8000870:	20000004 	.word	0x20000004

08000874 <EEPROMWritefromeeprom>:
void EEPROMWritefromeeprom() {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af02      	add	r7, sp, #8
	if (eepromWritefromeepromFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 800087a:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <EEPROMWritefromeeprom+0x3c>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d012      	beq.n	80008a8 <EEPROMWritefromeeprom+0x34>
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <EEPROMWritefromeeprom+0x40>)
 8000884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000888:	b2db      	uxtb	r3, r3
 800088a:	2b20      	cmp	r3, #32
 800088c:	d10c      	bne.n	80008a8 <EEPROMWritefromeeprom+0x34>

		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x61, I2C_MEMADD_SIZE_16BIT,
 800088e:	2301      	movs	r3, #1
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <EEPROMWritefromeeprom+0x44>)
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	2310      	movs	r3, #16
 8000898:	2261      	movs	r2, #97	; 0x61
 800089a:	21a0      	movs	r1, #160	; 0xa0
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <EEPROMWritefromeeprom+0x40>)
 800089e:	f000 fff7 	bl	8001890 <HAL_I2C_Mem_Write_IT>
				&IOExpdrDataReadBack, 1);



		eepromWritefromeepromFlag = 0;
 80008a2:	4b03      	ldr	r3, [pc, #12]	; (80008b0 <EEPROMWritefromeeprom+0x3c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
	}
}
 80008a8:	bf00      	nop
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	200000e1 	.word	0x200000e1
 80008b4:	20000048 	.word	0x20000048
 80008b8:	200000ec 	.word	0x200000ec

080008bc <EEPROMReadExample>:

void EEPROMReadExample(uint8_t *Rdata, uint16_t len) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af02      	add	r7, sp, #8
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	807b      	strh	r3, [r7, #2]
	if (eepromExampleReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 80008c8:	4b0d      	ldr	r3, [pc, #52]	; (8000900 <EEPROMReadExample+0x44>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d012      	beq.n	80008f6 <EEPROMReadExample+0x3a>
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <EEPROMReadExample+0x48>)
 80008d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	2b20      	cmp	r3, #32
 80008da:	d10c      	bne.n	80008f6 <EEPROMReadExample+0x3a>

		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x61, I2C_MEMADD_SIZE_16BIT,
 80008dc:	887b      	ldrh	r3, [r7, #2]
 80008de:	9301      	str	r3, [sp, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	9300      	str	r3, [sp, #0]
 80008e4:	2310      	movs	r3, #16
 80008e6:	2261      	movs	r2, #97	; 0x61
 80008e8:	21a0      	movs	r1, #160	; 0xa0
 80008ea:	4806      	ldr	r0, [pc, #24]	; (8000904 <EEPROMReadExample+0x48>)
 80008ec:	f001 f882 	bl	80019f4 <HAL_I2C_Mem_Read_IT>
				Rdata, len);
		eepromExampleReadFlag = 0;
 80008f0:	4b03      	ldr	r3, [pc, #12]	; (8000900 <EEPROMReadExample+0x44>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	701a      	strb	r2, [r3, #0]
	}
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	200000e2 	.word	0x200000e2
 8000904:	20000048 	.word	0x20000048

08000908 <IOExpenderInit>:
void IOExpenderInit() {
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af04      	add	r7, sp, #16
	//Init All
	static uint8_t Setting[0x16] = { 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00 };
	HAL_I2C_Mem_Write(&hi2c1, IOEXPD_ADDR, 0x00, I2C_MEMADD_SIZE_8BIT, Setting,
 800090e:	2364      	movs	r3, #100	; 0x64
 8000910:	9302      	str	r3, [sp, #8]
 8000912:	2316      	movs	r3, #22
 8000914:	9301      	str	r3, [sp, #4]
 8000916:	4b05      	ldr	r3, [pc, #20]	; (800092c <IOExpenderInit+0x24>)
 8000918:	9300      	str	r3, [sp, #0]
 800091a:	2301      	movs	r3, #1
 800091c:	2200      	movs	r2, #0
 800091e:	2140      	movs	r1, #64	; 0x40
 8000920:	4803      	ldr	r0, [pc, #12]	; (8000930 <IOExpenderInit+0x28>)
 8000922:	f000 febb 	bl	800169c <HAL_I2C_Mem_Write>
			0x16, 100);
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000008 	.word	0x20000008
 8000930:	20000048 	.word	0x20000048

08000934 <IOExpenderReadPinA>:
void IOExpenderReadPinA(uint8_t *Rdata) {
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af02      	add	r7, sp, #8
 800093a:	6078      	str	r0, [r7, #4]
	if (IOExpdrExampleReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <IOExpenderReadPinA+0x40>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d012      	beq.n	800096a <IOExpenderReadPinA+0x36>
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <IOExpenderReadPinA+0x44>)
 8000946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800094a:	b2db      	uxtb	r3, r3
 800094c:	2b20      	cmp	r3, #32
 800094e:	d10c      	bne.n	800096a <IOExpenderReadPinA+0x36>
		HAL_I2C_Mem_Read_IT(&hi2c1, IOEXPD_ADDR, 0x12, I2C_MEMADD_SIZE_8BIT,
 8000950:	2301      	movs	r3, #1
 8000952:	9301      	str	r3, [sp, #4]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	9300      	str	r3, [sp, #0]
 8000958:	2301      	movs	r3, #1
 800095a:	2212      	movs	r2, #18
 800095c:	2140      	movs	r1, #64	; 0x40
 800095e:	4806      	ldr	r0, [pc, #24]	; (8000978 <IOExpenderReadPinA+0x44>)
 8000960:	f001 f848 	bl	80019f4 <HAL_I2C_Mem_Read_IT>
				Rdata, 1);
		IOExpdrExampleReadFlag =0;
 8000964:	4b03      	ldr	r3, [pc, #12]	; (8000974 <IOExpenderReadPinA+0x40>)
 8000966:	2200      	movs	r2, #0
 8000968:	701a      	strb	r2, [r3, #0]
	}
}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	200000e4 	.word	0x200000e4
 8000978:	20000048 	.word	0x20000048

0800097c <IOExpenderWritePinB>:
void IOExpenderWritePinB(uint8_t Wdata) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b084      	sub	sp, #16
 8000980:	af02      	add	r7, sp, #8
 8000982:	4603      	mov	r3, r0
 8000984:	71fb      	strb	r3, [r7, #7]
	if (IOExpdrExampleWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <IOExpenderWritePinB+0x48>)
 8000988:	781b      	ldrb	r3, [r3, #0]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d015      	beq.n	80009ba <IOExpenderWritePinB+0x3e>
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <IOExpenderWritePinB+0x4c>)
 8000990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000994:	b2db      	uxtb	r3, r3
 8000996:	2b20      	cmp	r3, #32
 8000998:	d10f      	bne.n	80009ba <IOExpenderWritePinB+0x3e>
		static uint8_t data;
		data = Wdata;
 800099a:	4a0c      	ldr	r2, [pc, #48]	; (80009cc <IOExpenderWritePinB+0x50>)
 800099c:	79fb      	ldrb	r3, [r7, #7]
 800099e:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write_IT(&hi2c1, IOEXPD_ADDR, 0x15, I2C_MEMADD_SIZE_8BIT,
 80009a0:	2301      	movs	r3, #1
 80009a2:	9301      	str	r3, [sp, #4]
 80009a4:	4b09      	ldr	r3, [pc, #36]	; (80009cc <IOExpenderWritePinB+0x50>)
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	2301      	movs	r3, #1
 80009aa:	2215      	movs	r2, #21
 80009ac:	2140      	movs	r1, #64	; 0x40
 80009ae:	4806      	ldr	r0, [pc, #24]	; (80009c8 <IOExpenderWritePinB+0x4c>)
 80009b0:	f000 ff6e 	bl	8001890 <HAL_I2C_Mem_Write_IT>
				&data, 1);
		IOExpdrExampleWriteFlag=0;
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <IOExpenderWritePinB+0x48>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	701a      	strb	r2, [r3, #0]
	}
}
 80009ba:	bf00      	nop
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	200000e3 	.word	0x200000e3
 80009c8:	20000048 	.word	0x20000048
 80009cc:	200000f0 	.word	0x200000f0

080009d0 <IOExpenderWriteexp>:

void IOExpenderWriteexp(uint8_t Wdata) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af02      	add	r7, sp, #8
 80009d6:	4603      	mov	r3, r0
 80009d8:	71fb      	strb	r3, [r7, #7]
	if (IOExpdrexpWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <IOExpenderWriteexp+0x48>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d015      	beq.n	8000a0e <IOExpenderWriteexp+0x3e>
 80009e2:	4b0e      	ldr	r3, [pc, #56]	; (8000a1c <IOExpenderWriteexp+0x4c>)
 80009e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	2b20      	cmp	r3, #32
 80009ec:	d10f      	bne.n	8000a0e <IOExpenderWriteexp+0x3e>
		static uint8_t data;
		data = Wdata;
 80009ee:	4a0c      	ldr	r2, [pc, #48]	; (8000a20 <IOExpenderWriteexp+0x50>)
 80009f0:	79fb      	ldrb	r3, [r7, #7]
 80009f2:	7013      	strb	r3, [r2, #0]
		HAL_I2C_Mem_Write_IT(&hi2c1, IOEXPD_ADDR, 0x15, I2C_MEMADD_SIZE_8BIT,
 80009f4:	2301      	movs	r3, #1
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <IOExpenderWriteexp+0x50>)
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2301      	movs	r3, #1
 80009fe:	2215      	movs	r2, #21
 8000a00:	2140      	movs	r1, #64	; 0x40
 8000a02:	4806      	ldr	r0, [pc, #24]	; (8000a1c <IOExpenderWriteexp+0x4c>)
 8000a04:	f000 ff44 	bl	8001890 <HAL_I2C_Mem_Write_IT>
				&data, 1);
		IOExpdrexpWriteFlag=0;
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <IOExpenderWriteexp+0x48>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	701a      	strb	r2, [r3, #0]
	}
}
 8000a0e:	bf00      	nop
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200000ed 	.word	0x200000ed
 8000a1c:	20000048 	.word	0x20000048
 8000a20:	200000f1 	.word	0x200000f1

08000a24 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13){
 8000a2e:	88fb      	ldrh	r3, [r7, #6]
 8000a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a34:	d105      	bne.n	8000a42 <HAL_GPIO_EXTI_Callback+0x1e>
        IOExpdrExampleReadFlag = 1;
 8000a36:	4b06      	ldr	r3, [pc, #24]	; (8000a50 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000a38:	2201      	movs	r2, #1
 8000a3a:	701a      	strb	r2, [r3, #0]
		canwrite = 1;
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <HAL_GPIO_EXTI_Callback+0x30>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	801a      	strh	r2, [r3, #0]
	}
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	200000e4 	.word	0x200000e4
 8000a54:	200000ee 	.word	0x200000ee

08000a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a5c:	b672      	cpsid	i
}
 8000a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <Error_Handler+0x8>
	...

08000a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	4a0f      	ldr	r2, [pc, #60]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a78:	6453      	str	r3, [r2, #68]	; 0x44
 8000a7a:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	603b      	str	r3, [r7, #0]
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a94:	6413      	str	r3, [r2, #64]	; 0x40
 8000a96:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <HAL_MspInit+0x4c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a9e:	603b      	str	r3, [r7, #0]
 8000aa0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aa2:	2007      	movs	r0, #7
 8000aa4:	f000 fa8e 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800

08000ab4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08a      	sub	sp, #40	; 0x28
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abc:	f107 0314 	add.w	r3, r7, #20
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a21      	ldr	r2, [pc, #132]	; (8000b58 <HAL_I2C_MspInit+0xa4>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d13c      	bne.n	8000b50 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
 8000ada:	4b20      	ldr	r3, [pc, #128]	; (8000b5c <HAL_I2C_MspInit+0xa8>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	4a1f      	ldr	r2, [pc, #124]	; (8000b5c <HAL_I2C_MspInit+0xa8>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ae6:	4b1d      	ldr	r3, [pc, #116]	; (8000b5c <HAL_I2C_MspInit+0xa8>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000af2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000af8:	2312      	movs	r3, #18
 8000afa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b00:	2303      	movs	r3, #3
 8000b02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b04:	2304      	movs	r3, #4
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4814      	ldr	r0, [pc, #80]	; (8000b60 <HAL_I2C_MspInit+0xac>)
 8000b10:	f000 faca 	bl	80010a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <HAL_I2C_MspInit+0xa8>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <HAL_I2C_MspInit+0xa8>)
 8000b1e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b22:	6413      	str	r3, [r2, #64]	; 0x40
 8000b24:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <HAL_I2C_MspInit+0xa8>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000b30:	2200      	movs	r2, #0
 8000b32:	2100      	movs	r1, #0
 8000b34:	201f      	movs	r0, #31
 8000b36:	f000 fa50 	bl	8000fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b3a:	201f      	movs	r0, #31
 8000b3c:	f000 fa69 	bl	8001012 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2100      	movs	r1, #0
 8000b44:	2020      	movs	r0, #32
 8000b46:	f000 fa48 	bl	8000fda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b4a:	2020      	movs	r0, #32
 8000b4c:	f000 fa61 	bl	8001012 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b50:	bf00      	nop
 8000b52:	3728      	adds	r7, #40	; 0x28
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40005400 	.word	0x40005400
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020400 	.word	0x40020400

08000b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08a      	sub	sp, #40	; 0x28
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0314 	add.w	r3, r7, #20
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a19      	ldr	r2, [pc, #100]	; (8000be8 <HAL_UART_MspInit+0x84>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d12b      	bne.n	8000bde <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	613b      	str	r3, [r7, #16]
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a17      	ldr	r2, [pc, #92]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a10      	ldr	r2, [pc, #64]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <HAL_UART_MspInit+0x88>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bbe:	230c      	movs	r3, #12
 8000bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bce:	2307      	movs	r3, #7
 8000bd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4805      	ldr	r0, [pc, #20]	; (8000bf0 <HAL_UART_MspInit+0x8c>)
 8000bda:	f000 fa65 	bl	80010a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bde:	bf00      	nop
 8000be0:	3728      	adds	r7, #40	; 0x28
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40004400 	.word	0x40004400
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020000 	.word	0x40020000

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <MemManage_Handler+0x4>

08000c06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c40:	f000 f8ac 	bl	8000d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c44:	bf00      	nop
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000c4c:	4802      	ldr	r0, [pc, #8]	; (8000c58 <I2C1_EV_IRQHandler+0x10>)
 8000c4e:	f000 ff8f 	bl	8001b70 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000c52:	bf00      	nop
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	20000048 	.word	0x20000048

08000c5c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000c60:	4802      	ldr	r0, [pc, #8]	; (8000c6c <I2C1_ER_IRQHandler+0x10>)
 8000c62:	f001 f8f6 	bl	8001e52 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000048 	.word	0x20000048

08000c70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c74:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c78:	f000 fbb4 	bl	80013e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cdc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ca8:	480d      	ldr	r0, [pc, #52]	; (8000ce0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000caa:	490e      	ldr	r1, [pc, #56]	; (8000ce4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cac:	4a0e      	ldr	r2, [pc, #56]	; (8000ce8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc0:	4c0b      	ldr	r4, [pc, #44]	; (8000cf0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000cce:	f7ff ffd7 	bl	8000c80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f003 fd9f 	bl	8004814 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cd6:	f7ff fc01 	bl	80004dc <main>
  bx  lr    
 8000cda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000cdc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000ce8:	080048ac 	.word	0x080048ac
  ldr r2, =_sbss
 8000cec:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000cf0:	200000f8 	.word	0x200000f8

08000cf4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC_IRQHandler>
	...

08000cf8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cfc:	4b0e      	ldr	r3, [pc, #56]	; (8000d38 <HAL_Init+0x40>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a0d      	ldr	r2, [pc, #52]	; (8000d38 <HAL_Init+0x40>)
 8000d02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <HAL_Init+0x40>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <HAL_Init+0x40>)
 8000d0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <HAL_Init+0x40>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a07      	ldr	r2, [pc, #28]	; (8000d38 <HAL_Init+0x40>)
 8000d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f000 f94f 	bl	8000fc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f000 f808 	bl	8000d3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d2c:	f7ff fe9a 	bl	8000a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	40023c00 	.word	0x40023c00

08000d3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d44:	4b12      	ldr	r3, [pc, #72]	; (8000d90 <HAL_InitTick+0x54>)
 8000d46:	681a      	ldr	r2, [r3, #0]
 8000d48:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <HAL_InitTick+0x58>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f000 f967 	bl	800102e <HAL_SYSTICK_Config>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d66:	2301      	movs	r3, #1
 8000d68:	e00e      	b.n	8000d88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b0f      	cmp	r3, #15
 8000d6e:	d80a      	bhi.n	8000d86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d70:	2200      	movs	r2, #0
 8000d72:	6879      	ldr	r1, [r7, #4]
 8000d74:	f04f 30ff 	mov.w	r0, #4294967295
 8000d78:	f000 f92f 	bl	8000fda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d7c:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <HAL_InitTick+0x5c>)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d82:	2300      	movs	r3, #0
 8000d84:	e000      	b.n	8000d88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3708      	adds	r7, #8
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	20000020 	.word	0x20000020
 8000d94:	20000028 	.word	0x20000028
 8000d98:	20000024 	.word	0x20000024

08000d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <HAL_IncTick+0x20>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_IncTick+0x24>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4413      	add	r3, r2
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <HAL_IncTick+0x24>)
 8000dae:	6013      	str	r3, [r2, #0]
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	20000028 	.word	0x20000028
 8000dc0:	200000f4 	.word	0x200000f4

08000dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000dc8:	4b03      	ldr	r3, [pc, #12]	; (8000dd8 <HAL_GetTick+0x14>)
 8000dca:	681b      	ldr	r3, [r3, #0]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	200000f4 	.word	0x200000f4

08000ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000de4:	f7ff ffee 	bl	8000dc4 <HAL_GetTick>
 8000de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d005      	beq.n	8000e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000df6:	4b0a      	ldr	r3, [pc, #40]	; (8000e20 <HAL_Delay+0x44>)
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4413      	add	r3, r2
 8000e00:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e02:	bf00      	nop
 8000e04:	f7ff ffde 	bl	8000dc4 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	68fa      	ldr	r2, [r7, #12]
 8000e10:	429a      	cmp	r2, r3
 8000e12:	d8f7      	bhi.n	8000e04 <HAL_Delay+0x28>
  {
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000028 	.word	0x20000028

08000e24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f003 0307 	and.w	r3, r3, #7
 8000e32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e34:	4b0c      	ldr	r3, [pc, #48]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e3a:	68ba      	ldr	r2, [r7, #8]
 8000e3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e40:	4013      	ands	r3, r2
 8000e42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e56:	4a04      	ldr	r2, [pc, #16]	; (8000e68 <__NVIC_SetPriorityGrouping+0x44>)
 8000e58:	68bb      	ldr	r3, [r7, #8]
 8000e5a:	60d3      	str	r3, [r2, #12]
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	e000ed00 	.word	0xe000ed00

08000e6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <__NVIC_GetPriorityGrouping+0x18>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0a1b      	lsrs	r3, r3, #8
 8000e76:	f003 0307 	and.w	r3, r3, #7
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	4603      	mov	r3, r0
 8000e90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	db0b      	blt.n	8000eb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	f003 021f 	and.w	r2, r3, #31
 8000ea0:	4907      	ldr	r1, [pc, #28]	; (8000ec0 <__NVIC_EnableIRQ+0x38>)
 8000ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea6:	095b      	lsrs	r3, r3, #5
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000e100 	.word	0xe000e100

08000ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0a      	blt.n	8000eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	490c      	ldr	r1, [pc, #48]	; (8000f10 <__NVIC_SetPriority+0x4c>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eec:	e00a      	b.n	8000f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4908      	ldr	r1, [pc, #32]	; (8000f14 <__NVIC_SetPriority+0x50>)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	3b04      	subs	r3, #4
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	761a      	strb	r2, [r3, #24]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000e100 	.word	0xe000e100
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	; 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	bf28      	it	cs
 8000f36:	2304      	movcs	r3, #4
 8000f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d902      	bls.n	8000f48 <NVIC_EncodePriority+0x30>
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3b03      	subs	r3, #3
 8000f46:	e000      	b.n	8000f4a <NVIC_EncodePriority+0x32>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43da      	mvns	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43d9      	mvns	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	4313      	orrs	r3, r2
         );
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3724      	adds	r7, #36	; 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
	...

08000f80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f90:	d301      	bcc.n	8000f96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00f      	b.n	8000fb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f96:	4a0a      	ldr	r2, [pc, #40]	; (8000fc0 <SysTick_Config+0x40>)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9e:	210f      	movs	r1, #15
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa4:	f7ff ff8e 	bl	8000ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <SysTick_Config+0x40>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <SysTick_Config+0x40>)
 8000fb0:	2207      	movs	r2, #7
 8000fb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	e000e010 	.word	0xe000e010

08000fc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fcc:	6878      	ldr	r0, [r7, #4]
 8000fce:	f7ff ff29 	bl	8000e24 <__NVIC_SetPriorityGrouping>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
 8000fe6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fec:	f7ff ff3e 	bl	8000e6c <__NVIC_GetPriorityGrouping>
 8000ff0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	68b9      	ldr	r1, [r7, #8]
 8000ff6:	6978      	ldr	r0, [r7, #20]
 8000ff8:	f7ff ff8e 	bl	8000f18 <NVIC_EncodePriority>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001002:	4611      	mov	r1, r2
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff ff5d 	bl	8000ec4 <__NVIC_SetPriority>
}
 800100a:	bf00      	nop
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b082      	sub	sp, #8
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff ff31 	bl	8000e88 <__NVIC_EnableIRQ>
}
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff ffa2 	bl	8000f80 <SysTick_Config>
 800103c:	4603      	mov	r3, r0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001046:	b480      	push	{r7}
 8001048:	b083      	sub	sp, #12
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d004      	beq.n	8001064 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2280      	movs	r2, #128	; 0x80
 800105e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001060:	2301      	movs	r3, #1
 8001062:	e00c      	b.n	800107e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2205      	movs	r2, #5
 8001068:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0201 	bic.w	r2, r2, #1
 800107a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800107c:	2300      	movs	r3, #0
}
 800107e:	4618      	mov	r0, r3
 8001080:	370c      	adds	r7, #12
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr

0800108a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001098:	b2db      	uxtb	r3, r3
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b089      	sub	sp, #36	; 0x24
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
 80010c2:	e159      	b.n	8001378 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010c4:	2201      	movs	r2, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	697a      	ldr	r2, [r7, #20]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	429a      	cmp	r2, r3
 80010de:	f040 8148 	bne.w	8001372 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d005      	beq.n	80010fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010f6:	2b02      	cmp	r3, #2
 80010f8:	d130      	bne.n	800115c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	2203      	movs	r2, #3
 8001106:	fa02 f303 	lsl.w	r3, r2, r3
 800110a:	43db      	mvns	r3, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4013      	ands	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	68da      	ldr	r2, [r3, #12]
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	005b      	lsls	r3, r3, #1
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	69ba      	ldr	r2, [r7, #24]
 8001128:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001130:	2201      	movs	r2, #1
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	091b      	lsrs	r3, r3, #4
 8001146:	f003 0201 	and.w	r2, r3, #1
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b03      	cmp	r3, #3
 8001166:	d017      	beq.n	8001198 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800116e:	69fb      	ldr	r3, [r7, #28]
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	2203      	movs	r2, #3
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	69ba      	ldr	r2, [r7, #24]
 800118e:	4313      	orrs	r3, r2
 8001190:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 0303 	and.w	r3, r3, #3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d123      	bne.n	80011ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	08da      	lsrs	r2, r3, #3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3208      	adds	r2, #8
 80011ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	220f      	movs	r2, #15
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	691a      	ldr	r2, [r3, #16]
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	08da      	lsrs	r2, r3, #3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3208      	adds	r2, #8
 80011e6:	69b9      	ldr	r1, [r7, #24]
 80011e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011f2:	69fb      	ldr	r3, [r7, #28]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2203      	movs	r2, #3
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	4013      	ands	r3, r2
 8001202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0203 	and.w	r2, r3, #3
 800120c:	69fb      	ldr	r3, [r7, #28]
 800120e:	005b      	lsls	r3, r3, #1
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	69ba      	ldr	r2, [r7, #24]
 8001216:	4313      	orrs	r3, r2
 8001218:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69ba      	ldr	r2, [r7, #24]
 800121e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001228:	2b00      	cmp	r3, #0
 800122a:	f000 80a2 	beq.w	8001372 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b57      	ldr	r3, [pc, #348]	; (8001390 <HAL_GPIO_Init+0x2e8>)
 8001234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001236:	4a56      	ldr	r2, [pc, #344]	; (8001390 <HAL_GPIO_Init+0x2e8>)
 8001238:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123c:	6453      	str	r3, [r2, #68]	; 0x44
 800123e:	4b54      	ldr	r3, [pc, #336]	; (8001390 <HAL_GPIO_Init+0x2e8>)
 8001240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800124a:	4a52      	ldr	r2, [pc, #328]	; (8001394 <HAL_GPIO_Init+0x2ec>)
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	089b      	lsrs	r3, r3, #2
 8001250:	3302      	adds	r3, #2
 8001252:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001256:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	f003 0303 	and.w	r3, r3, #3
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	220f      	movs	r2, #15
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	43db      	mvns	r3, r3
 8001268:	69ba      	ldr	r2, [r7, #24]
 800126a:	4013      	ands	r3, r2
 800126c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a49      	ldr	r2, [pc, #292]	; (8001398 <HAL_GPIO_Init+0x2f0>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d019      	beq.n	80012aa <HAL_GPIO_Init+0x202>
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4a48      	ldr	r2, [pc, #288]	; (800139c <HAL_GPIO_Init+0x2f4>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d013      	beq.n	80012a6 <HAL_GPIO_Init+0x1fe>
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4a47      	ldr	r2, [pc, #284]	; (80013a0 <HAL_GPIO_Init+0x2f8>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d00d      	beq.n	80012a2 <HAL_GPIO_Init+0x1fa>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a46      	ldr	r2, [pc, #280]	; (80013a4 <HAL_GPIO_Init+0x2fc>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d007      	beq.n	800129e <HAL_GPIO_Init+0x1f6>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4a45      	ldr	r2, [pc, #276]	; (80013a8 <HAL_GPIO_Init+0x300>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d101      	bne.n	800129a <HAL_GPIO_Init+0x1f2>
 8001296:	2304      	movs	r3, #4
 8001298:	e008      	b.n	80012ac <HAL_GPIO_Init+0x204>
 800129a:	2307      	movs	r3, #7
 800129c:	e006      	b.n	80012ac <HAL_GPIO_Init+0x204>
 800129e:	2303      	movs	r3, #3
 80012a0:	e004      	b.n	80012ac <HAL_GPIO_Init+0x204>
 80012a2:	2302      	movs	r3, #2
 80012a4:	e002      	b.n	80012ac <HAL_GPIO_Init+0x204>
 80012a6:	2301      	movs	r3, #1
 80012a8:	e000      	b.n	80012ac <HAL_GPIO_Init+0x204>
 80012aa:	2300      	movs	r3, #0
 80012ac:	69fa      	ldr	r2, [r7, #28]
 80012ae:	f002 0203 	and.w	r2, r2, #3
 80012b2:	0092      	lsls	r2, r2, #2
 80012b4:	4093      	lsls	r3, r2
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012bc:	4935      	ldr	r1, [pc, #212]	; (8001394 <HAL_GPIO_Init+0x2ec>)
 80012be:	69fb      	ldr	r3, [r7, #28]
 80012c0:	089b      	lsrs	r3, r3, #2
 80012c2:	3302      	adds	r3, #2
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ca:	4b38      	ldr	r3, [pc, #224]	; (80013ac <HAL_GPIO_Init+0x304>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012ee:	4a2f      	ldr	r2, [pc, #188]	; (80013ac <HAL_GPIO_Init+0x304>)
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f4:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <HAL_GPIO_Init+0x304>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4013      	ands	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	4313      	orrs	r3, r2
 8001316:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001318:	4a24      	ldr	r2, [pc, #144]	; (80013ac <HAL_GPIO_Init+0x304>)
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800131e:	4b23      	ldr	r3, [pc, #140]	; (80013ac <HAL_GPIO_Init+0x304>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	43db      	mvns	r3, r3
 8001328:	69ba      	ldr	r2, [r7, #24]
 800132a:	4013      	ands	r3, r2
 800132c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001342:	4a1a      	ldr	r2, [pc, #104]	; (80013ac <HAL_GPIO_Init+0x304>)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001348:	4b18      	ldr	r3, [pc, #96]	; (80013ac <HAL_GPIO_Init+0x304>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001360:	2b00      	cmp	r3, #0
 8001362:	d003      	beq.n	800136c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800136c:	4a0f      	ldr	r2, [pc, #60]	; (80013ac <HAL_GPIO_Init+0x304>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	3301      	adds	r3, #1
 8001376:	61fb      	str	r3, [r7, #28]
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	2b0f      	cmp	r3, #15
 800137c:	f67f aea2 	bls.w	80010c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001380:	bf00      	nop
 8001382:	bf00      	nop
 8001384:	3724      	adds	r7, #36	; 0x24
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	40013800 	.word	0x40013800
 8001398:	40020000 	.word	0x40020000
 800139c:	40020400 	.word	0x40020400
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40020c00 	.word	0x40020c00
 80013a8:	40021000 	.word	0x40021000
 80013ac:	40013c00 	.word	0x40013c00

080013b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	807b      	strh	r3, [r7, #2]
 80013bc:	4613      	mov	r3, r2
 80013be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013c0:	787b      	ldrb	r3, [r7, #1]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d003      	beq.n	80013ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013c6:	887a      	ldrh	r2, [r7, #2]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013cc:	e003      	b.n	80013d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	041a      	lsls	r2, r3, #16
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	619a      	str	r2, [r3, #24]
}
 80013d6:	bf00      	nop
 80013d8:	370c      	adds	r7, #12
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80013ee:	4b08      	ldr	r3, [pc, #32]	; (8001410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f0:	695a      	ldr	r2, [r3, #20]
 80013f2:	88fb      	ldrh	r3, [r7, #6]
 80013f4:	4013      	ands	r3, r2
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d006      	beq.n	8001408 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001400:	88fb      	ldrh	r3, [r7, #6]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff fb0e 	bl	8000a24 <HAL_GPIO_EXTI_Callback>
  }
}
 8001408:	bf00      	nop
 800140a:	3708      	adds	r7, #8
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40013c00 	.word	0x40013c00

08001414 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d101      	bne.n	8001426 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e12b      	b.n	800167e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800142c:	b2db      	uxtb	r3, r3
 800142e:	2b00      	cmp	r3, #0
 8001430:	d106      	bne.n	8001440 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff fb3a 	bl	8000ab4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2224      	movs	r2, #36	; 0x24
 8001444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f022 0201 	bic.w	r2, r2, #1
 8001456:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001466:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001476:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001478:	f002 fee2 	bl	8004240 <HAL_RCC_GetPCLK1Freq>
 800147c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	4a81      	ldr	r2, [pc, #516]	; (8001688 <HAL_I2C_Init+0x274>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d807      	bhi.n	8001498 <HAL_I2C_Init+0x84>
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4a80      	ldr	r2, [pc, #512]	; (800168c <HAL_I2C_Init+0x278>)
 800148c:	4293      	cmp	r3, r2
 800148e:	bf94      	ite	ls
 8001490:	2301      	movls	r3, #1
 8001492:	2300      	movhi	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	e006      	b.n	80014a6 <HAL_I2C_Init+0x92>
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4a7d      	ldr	r2, [pc, #500]	; (8001690 <HAL_I2C_Init+0x27c>)
 800149c:	4293      	cmp	r3, r2
 800149e:	bf94      	ite	ls
 80014a0:	2301      	movls	r3, #1
 80014a2:	2300      	movhi	r3, #0
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e0e7      	b.n	800167e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	4a78      	ldr	r2, [pc, #480]	; (8001694 <HAL_I2C_Init+0x280>)
 80014b2:	fba2 2303 	umull	r2, r3, r2, r3
 80014b6:	0c9b      	lsrs	r3, r3, #18
 80014b8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68ba      	ldr	r2, [r7, #8]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	685b      	ldr	r3, [r3, #4]
 80014dc:	4a6a      	ldr	r2, [pc, #424]	; (8001688 <HAL_I2C_Init+0x274>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d802      	bhi.n	80014e8 <HAL_I2C_Init+0xd4>
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	3301      	adds	r3, #1
 80014e6:	e009      	b.n	80014fc <HAL_I2C_Init+0xe8>
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	4a69      	ldr	r2, [pc, #420]	; (8001698 <HAL_I2C_Init+0x284>)
 80014f4:	fba2 2303 	umull	r2, r3, r2, r3
 80014f8:	099b      	lsrs	r3, r3, #6
 80014fa:	3301      	adds	r3, #1
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	6812      	ldr	r2, [r2, #0]
 8001500:	430b      	orrs	r3, r1
 8001502:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	69db      	ldr	r3, [r3, #28]
 800150a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800150e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	495c      	ldr	r1, [pc, #368]	; (8001688 <HAL_I2C_Init+0x274>)
 8001518:	428b      	cmp	r3, r1
 800151a:	d819      	bhi.n	8001550 <HAL_I2C_Init+0x13c>
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	1e59      	subs	r1, r3, #1
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	fbb1 f3f3 	udiv	r3, r1, r3
 800152a:	1c59      	adds	r1, r3, #1
 800152c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001530:	400b      	ands	r3, r1
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00a      	beq.n	800154c <HAL_I2C_Init+0x138>
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	1e59      	subs	r1, r3, #1
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	fbb1 f3f3 	udiv	r3, r1, r3
 8001544:	3301      	adds	r3, #1
 8001546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800154a:	e051      	b.n	80015f0 <HAL_I2C_Init+0x1dc>
 800154c:	2304      	movs	r3, #4
 800154e:	e04f      	b.n	80015f0 <HAL_I2C_Init+0x1dc>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d111      	bne.n	800157c <HAL_I2C_Init+0x168>
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	1e58      	subs	r0, r3, #1
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6859      	ldr	r1, [r3, #4]
 8001560:	460b      	mov	r3, r1
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	440b      	add	r3, r1
 8001566:	fbb0 f3f3 	udiv	r3, r0, r3
 800156a:	3301      	adds	r3, #1
 800156c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001570:	2b00      	cmp	r3, #0
 8001572:	bf0c      	ite	eq
 8001574:	2301      	moveq	r3, #1
 8001576:	2300      	movne	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	e012      	b.n	80015a2 <HAL_I2C_Init+0x18e>
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	1e58      	subs	r0, r3, #1
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6859      	ldr	r1, [r3, #4]
 8001584:	460b      	mov	r3, r1
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	0099      	lsls	r1, r3, #2
 800158c:	440b      	add	r3, r1
 800158e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001592:	3301      	adds	r3, #1
 8001594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001598:	2b00      	cmp	r3, #0
 800159a:	bf0c      	ite	eq
 800159c:	2301      	moveq	r3, #1
 800159e:	2300      	movne	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_I2C_Init+0x196>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e022      	b.n	80015f0 <HAL_I2C_Init+0x1dc>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d10e      	bne.n	80015d0 <HAL_I2C_Init+0x1bc>
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	1e58      	subs	r0, r3, #1
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6859      	ldr	r1, [r3, #4]
 80015ba:	460b      	mov	r3, r1
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	440b      	add	r3, r1
 80015c0:	fbb0 f3f3 	udiv	r3, r0, r3
 80015c4:	3301      	adds	r3, #1
 80015c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ce:	e00f      	b.n	80015f0 <HAL_I2C_Init+0x1dc>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	1e58      	subs	r0, r3, #1
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6859      	ldr	r1, [r3, #4]
 80015d8:	460b      	mov	r3, r1
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	0099      	lsls	r1, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015e6:	3301      	adds	r3, #1
 80015e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	6809      	ldr	r1, [r1, #0]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69da      	ldr	r2, [r3, #28]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	430a      	orrs	r2, r1
 8001612:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800161e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6911      	ldr	r1, [r2, #16]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	68d2      	ldr	r2, [r2, #12]
 800162a:	4311      	orrs	r1, r2
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6812      	ldr	r2, [r2, #0]
 8001630:	430b      	orrs	r3, r1
 8001632:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	695a      	ldr	r2, [r3, #20]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f042 0201 	orr.w	r2, r2, #1
 800165e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2220      	movs	r2, #32
 800166a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	3710      	adds	r7, #16
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	000186a0 	.word	0x000186a0
 800168c:	001e847f 	.word	0x001e847f
 8001690:	003d08ff 	.word	0x003d08ff
 8001694:	431bde83 	.word	0x431bde83
 8001698:	10624dd3 	.word	0x10624dd3

0800169c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af02      	add	r7, sp, #8
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	4608      	mov	r0, r1
 80016a6:	4611      	mov	r1, r2
 80016a8:	461a      	mov	r2, r3
 80016aa:	4603      	mov	r3, r0
 80016ac:	817b      	strh	r3, [r7, #10]
 80016ae:	460b      	mov	r3, r1
 80016b0:	813b      	strh	r3, [r7, #8]
 80016b2:	4613      	mov	r3, r2
 80016b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016b6:	f7ff fb85 	bl	8000dc4 <HAL_GetTick>
 80016ba:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b20      	cmp	r3, #32
 80016c6:	f040 80d9 	bne.w	800187c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	9300      	str	r3, [sp, #0]
 80016ce:	2319      	movs	r3, #25
 80016d0:	2201      	movs	r2, #1
 80016d2:	496d      	ldr	r1, [pc, #436]	; (8001888 <HAL_I2C_Mem_Write+0x1ec>)
 80016d4:	68f8      	ldr	r0, [r7, #12]
 80016d6:	f001 ff6f 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80016e0:	2302      	movs	r3, #2
 80016e2:	e0cc      	b.n	800187e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d101      	bne.n	80016f2 <HAL_I2C_Mem_Write+0x56>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e0c5      	b.n	800187e <HAL_I2C_Mem_Write+0x1e2>
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b01      	cmp	r3, #1
 8001706:	d007      	beq.n	8001718 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001726:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	2221      	movs	r2, #33	; 0x21
 800172c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	2240      	movs	r2, #64	; 0x40
 8001734:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2200      	movs	r2, #0
 800173c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	6a3a      	ldr	r2, [r7, #32]
 8001742:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001748:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174e:	b29a      	uxth	r2, r3
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4a4d      	ldr	r2, [pc, #308]	; (800188c <HAL_I2C_Mem_Write+0x1f0>)
 8001758:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800175a:	88f8      	ldrh	r0, [r7, #6]
 800175c:	893a      	ldrh	r2, [r7, #8]
 800175e:	8979      	ldrh	r1, [r7, #10]
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	9301      	str	r3, [sp, #4]
 8001764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001766:	9300      	str	r3, [sp, #0]
 8001768:	4603      	mov	r3, r0
 800176a:	68f8      	ldr	r0, [r7, #12]
 800176c:	f001 fde6 	bl	800333c <I2C_RequestMemoryWrite>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d052      	beq.n	800181c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e081      	b.n	800187e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800177e:	68f8      	ldr	r0, [r7, #12]
 8001780:	f001 fff0 	bl	8003764 <I2C_WaitOnTXEFlagUntilTimeout>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00d      	beq.n	80017a6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	2b04      	cmp	r3, #4
 8001790:	d107      	bne.n	80017a2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017a0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017a2:	2301      	movs	r3, #1
 80017a4:	e06b      	b.n	800187e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	781a      	ldrb	r2, [r3, #0]
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c0:	3b01      	subs	r3, #1
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	3b01      	subs	r3, #1
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b04      	cmp	r3, #4
 80017e2:	d11b      	bne.n	800181c <HAL_I2C_Mem_Write+0x180>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d017      	beq.n	800181c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f0:	781a      	ldrb	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001806:	3b01      	subs	r3, #1
 8001808:	b29a      	uxth	r2, r3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001812:	b29b      	uxth	r3, r3
 8001814:	3b01      	subs	r3, #1
 8001816:	b29a      	uxth	r2, r3
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001820:	2b00      	cmp	r3, #0
 8001822:	d1aa      	bne.n	800177a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001824:	697a      	ldr	r2, [r7, #20]
 8001826:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001828:	68f8      	ldr	r0, [r7, #12]
 800182a:	f001 ffdc 	bl	80037e6 <I2C_WaitOnBTFFlagUntilTimeout>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d00d      	beq.n	8001850 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	2b04      	cmp	r3, #4
 800183a:	d107      	bne.n	800184c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800184a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e016      	b.n	800187e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800185e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2220      	movs	r2, #32
 8001864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	e000      	b.n	800187e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800187c:	2302      	movs	r3, #2
  }
}
 800187e:	4618      	mov	r0, r3
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	00100002 	.word	0x00100002
 800188c:	ffff0000 	.word	0xffff0000

08001890 <HAL_I2C_Mem_Write_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	4608      	mov	r0, r1
 800189a:	4611      	mov	r1, r2
 800189c:	461a      	mov	r2, r3
 800189e:	4603      	mov	r3, r0
 80018a0:	817b      	strh	r3, [r7, #10]
 80018a2:	460b      	mov	r3, r1
 80018a4:	813b      	strh	r3, [r7, #8]
 80018a6:	4613      	mov	r3, r2
 80018a8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	2b20      	cmp	r3, #32
 80018b8:	f040 808e 	bne.w	80019d8 <HAL_I2C_Mem_Write_IT+0x148>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80018bc:	4b4a      	ldr	r3, [pc, #296]	; (80019e8 <HAL_I2C_Mem_Write_IT+0x158>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	08db      	lsrs	r3, r3, #3
 80018c2:	4a4a      	ldr	r2, [pc, #296]	; (80019ec <HAL_I2C_Mem_Write_IT+0x15c>)
 80018c4:	fba2 2303 	umull	r2, r3, r2, r3
 80018c8:	0a1a      	lsrs	r2, r3, #8
 80018ca:	4613      	mov	r3, r2
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	4413      	add	r3, r2
 80018d0:	009a      	lsls	r2, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	3b01      	subs	r3, #1
 80018da:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d116      	bne.n	8001910 <HAL_I2C_Mem_Write_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2200      	movs	r2, #0
 80018e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2220      	movs	r2, #32
 80018ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	f043 0220 	orr.w	r2, r3, #32
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e064      	b.n	80019da <HAL_I2C_Mem_Write_IT+0x14a>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b02      	cmp	r3, #2
 800191c:	d0db      	beq.n	80018d6 <HAL_I2C_Mem_Write_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001924:	2b01      	cmp	r3, #1
 8001926:	d101      	bne.n	800192c <HAL_I2C_Mem_Write_IT+0x9c>
 8001928:	2302      	movs	r3, #2
 800192a:	e056      	b.n	80019da <HAL_I2C_Mem_Write_IT+0x14a>
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b01      	cmp	r3, #1
 8001940:	d007      	beq.n	8001952 <HAL_I2C_Mem_Write_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f042 0201 	orr.w	r2, r2, #1
 8001950:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001960:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2221      	movs	r2, #33	; 0x21
 8001966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2240      	movs	r2, #64	; 0x40
 800196e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6a3a      	ldr	r2, [r7, #32]
 800197c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001982:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001988:	b29a      	uxth	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4a17      	ldr	r2, [pc, #92]	; (80019f0 <HAL_I2C_Mem_Write_IT+0x160>)
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001994:	897a      	ldrh	r2, [r7, #10]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 800199a:	893a      	ldrh	r2, [r7, #8]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 80019a0:	88fa      	ldrh	r2, [r7, #6]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	651a      	str	r2, [r3, #80]	; 0x50

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80019ba:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80019d2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80019d4:	2300      	movs	r3, #0
 80019d6:	e000      	b.n	80019da <HAL_I2C_Mem_Write_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80019d8:	2302      	movs	r3, #2
  }
}
 80019da:	4618      	mov	r0, r3
 80019dc:	371c      	adds	r7, #28
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20000020 	.word	0x20000020
 80019ec:	14f8b589 	.word	0x14f8b589
 80019f0:	ffff0000 	.word	0xffff0000

080019f4 <HAL_I2C_Mem_Read_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	60f8      	str	r0, [r7, #12]
 80019fc:	4608      	mov	r0, r1
 80019fe:	4611      	mov	r1, r2
 8001a00:	461a      	mov	r2, r3
 8001a02:	4603      	mov	r3, r0
 8001a04:	817b      	strh	r3, [r7, #10]
 8001a06:	460b      	mov	r3, r1
 8001a08:	813b      	strh	r3, [r7, #8]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b20      	cmp	r3, #32
 8001a1c:	f040 809a 	bne.w	8001b54 <HAL_I2C_Mem_Read_IT+0x160>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8001a20:	4b50      	ldr	r3, [pc, #320]	; (8001b64 <HAL_I2C_Mem_Read_IT+0x170>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	08db      	lsrs	r3, r3, #3
 8001a26:	4a50      	ldr	r2, [pc, #320]	; (8001b68 <HAL_I2C_Mem_Read_IT+0x174>)
 8001a28:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2c:	0a1a      	lsrs	r2, r3, #8
 8001a2e:	4613      	mov	r3, r2
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	4413      	add	r3, r2
 8001a34:	009a      	lsls	r2, r3, #2
 8001a36:	4413      	add	r3, r2
 8001a38:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d116      	bne.n	8001a74 <HAL_I2C_Mem_Read_IT+0x80>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	f043 0220 	orr.w	r2, r3, #32
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e070      	b.n	8001b56 <HAL_I2C_Mem_Read_IT+0x162>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d0db      	beq.n	8001a3a <HAL_I2C_Mem_Read_IT+0x46>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d101      	bne.n	8001a90 <HAL_I2C_Mem_Read_IT+0x9c>
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	e062      	b.n	8001b56 <HAL_I2C_Mem_Read_IT+0x162>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d007      	beq.n	8001ab6 <HAL_I2C_Mem_Read_IT+0xc2>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f042 0201 	orr.w	r2, r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ac4:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2222      	movs	r2, #34	; 0x22
 8001aca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2240      	movs	r2, #64	; 0x40
 8001ad2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6a3a      	ldr	r2, [r7, #32]
 8001ae0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001ae6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4a1d      	ldr	r2, [pc, #116]	; (8001b6c <HAL_I2C_Mem_Read_IT+0x178>)
 8001af6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8001af8:	897a      	ldrh	r2, [r7, #10]
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->Memaddress  = MemAddress;
 8001afe:	893a      	ldrh	r2, [r7, #8]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	649a      	str	r2, [r3, #72]	; 0x48
    hi2c->MemaddSize  = MemAddSize;
 8001b04:	88fa      	ldrh	r2, [r7, #6]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	64da      	str	r2, [r3, #76]	; 0x4c
    hi2c->EventCount  = 0U;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001b1e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b2e:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2200      	movs	r2, #0
 8001b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    if (hi2c->XferSize > 0U)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d007      	beq.n	8001b50 <HAL_I2C_Mem_Read_IT+0x15c>
      /* Note : The I2C interrupts must be enabled after unlocking current process
      to avoid the risk of I2C interrupt handle execution before current
      process unlock */

      /* Enable EVT, BUF and ERR interrupt */
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8001b4e:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	e000      	b.n	8001b56 <HAL_I2C_Mem_Read_IT+0x162>
  }
  else
  {
    return HAL_BUSY;
 8001b54:	2302      	movs	r3, #2
  }
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	371c      	adds	r7, #28
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	20000020 	.word	0x20000020
 8001b68:	14f8b589 	.word	0x14f8b589
 8001b6c:	ffff0000 	.word	0xffff0000

08001b70 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b88:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b90:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b98:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001b9a:	7bfb      	ldrb	r3, [r7, #15]
 8001b9c:	2b10      	cmp	r3, #16
 8001b9e:	d003      	beq.n	8001ba8 <HAL_I2C_EV_IRQHandler+0x38>
 8001ba0:	7bfb      	ldrb	r3, [r7, #15]
 8001ba2:	2b40      	cmp	r3, #64	; 0x40
 8001ba4:	f040 80c1 	bne.w	8001d2a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	699b      	ldr	r3, [r3, #24]
 8001bae:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10d      	bne.n	8001bde <HAL_I2C_EV_IRQHandler+0x6e>
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001bc8:	d003      	beq.n	8001bd2 <HAL_I2C_EV_IRQHandler+0x62>
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001bd0:	d101      	bne.n	8001bd6 <HAL_I2C_EV_IRQHandler+0x66>
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e000      	b.n	8001bd8 <HAL_I2C_EV_IRQHandler+0x68>
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	f000 8132 	beq.w	8001e42 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	f003 0301 	and.w	r3, r3, #1
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00c      	beq.n	8001c02 <HAL_I2C_EV_IRQHandler+0x92>
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	0a5b      	lsrs	r3, r3, #9
 8001bec:	f003 0301 	and.w	r3, r3, #1
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d006      	beq.n	8001c02 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f001 fe98 	bl	800392a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 fd83 	bl	8002706 <I2C_Master_SB>
 8001c00:	e092      	b.n	8001d28 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	08db      	lsrs	r3, r3, #3
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d009      	beq.n	8001c22 <HAL_I2C_EV_IRQHandler+0xb2>
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	0a5b      	lsrs	r3, r3, #9
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d003      	beq.n	8001c22 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 fdf9 	bl	8002812 <I2C_Master_ADD10>
 8001c20:	e082      	b.n	8001d28 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c22:	69fb      	ldr	r3, [r7, #28]
 8001c24:	085b      	lsrs	r3, r3, #1
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d009      	beq.n	8001c42 <HAL_I2C_EV_IRQHandler+0xd2>
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	0a5b      	lsrs	r3, r3, #9
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 fe13 	bl	8002866 <I2C_Master_ADDR>
 8001c40:	e072      	b.n	8001d28 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001c42:	69bb      	ldr	r3, [r7, #24]
 8001c44:	089b      	lsrs	r3, r3, #2
 8001c46:	f003 0301 	and.w	r3, r3, #1
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d03b      	beq.n	8001cc6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c5c:	f000 80f3 	beq.w	8001e46 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	09db      	lsrs	r3, r3, #7
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d00f      	beq.n	8001c8c <HAL_I2C_EV_IRQHandler+0x11c>
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	0a9b      	lsrs	r3, r3, #10
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d009      	beq.n	8001c8c <HAL_I2C_EV_IRQHandler+0x11c>
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d103      	bne.n	8001c8c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f000 f9f3 	bl	8002070 <I2C_MasterTransmit_TXE>
 8001c8a:	e04d      	b.n	8001d28 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	089b      	lsrs	r3, r3, #2
 8001c90:	f003 0301 	and.w	r3, r3, #1
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f000 80d6 	beq.w	8001e46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	0a5b      	lsrs	r3, r3, #9
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 80cf 	beq.w	8001e46 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8001ca8:	7bbb      	ldrb	r3, [r7, #14]
 8001caa:	2b21      	cmp	r3, #33	; 0x21
 8001cac:	d103      	bne.n	8001cb6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 fa7a 	bl	80021a8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cb4:	e0c7      	b.n	8001e46 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	2b40      	cmp	r3, #64	; 0x40
 8001cba:	f040 80c4 	bne.w	8001e46 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 fae8 	bl	8002294 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001cc4:	e0bf      	b.n	8001e46 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cd4:	f000 80b7 	beq.w	8001e46 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	099b      	lsrs	r3, r3, #6
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00f      	beq.n	8001d04 <HAL_I2C_EV_IRQHandler+0x194>
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	0a9b      	lsrs	r3, r3, #10
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d009      	beq.n	8001d04 <HAL_I2C_EV_IRQHandler+0x194>
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	089b      	lsrs	r3, r3, #2
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d103      	bne.n	8001d04 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 fb5d 	bl	80023bc <I2C_MasterReceive_RXNE>
 8001d02:	e011      	b.n	8001d28 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 809a 	beq.w	8001e46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	0a5b      	lsrs	r3, r3, #9
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 8093 	beq.w	8001e46 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 fc06 	bl	8002532 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d26:	e08e      	b.n	8001e46 <HAL_I2C_EV_IRQHandler+0x2d6>
 8001d28:	e08d      	b.n	8001e46 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d004      	beq.n	8001d3c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	695b      	ldr	r3, [r3, #20]
 8001d38:	61fb      	str	r3, [r7, #28]
 8001d3a:	e007      	b.n	8001d4c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	695b      	ldr	r3, [r3, #20]
 8001d4a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	085b      	lsrs	r3, r3, #1
 8001d50:	f003 0301 	and.w	r3, r3, #1
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d012      	beq.n	8001d7e <HAL_I2C_EV_IRQHandler+0x20e>
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	0a5b      	lsrs	r3, r3, #9
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00c      	beq.n	8001d7e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001d74:	69b9      	ldr	r1, [r7, #24]
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f000 ffc4 	bl	8002d04 <I2C_Slave_ADDR>
 8001d7c:	e066      	b.n	8001e4c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001d7e:	69fb      	ldr	r3, [r7, #28]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d009      	beq.n	8001d9e <HAL_I2C_EV_IRQHandler+0x22e>
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	0a5b      	lsrs	r3, r3, #9
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 fffe 	bl	8002d98 <I2C_Slave_STOPF>
 8001d9c:	e056      	b.n	8001e4c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001d9e:	7bbb      	ldrb	r3, [r7, #14]
 8001da0:	2b21      	cmp	r3, #33	; 0x21
 8001da2:	d002      	beq.n	8001daa <HAL_I2C_EV_IRQHandler+0x23a>
 8001da4:	7bbb      	ldrb	r3, [r7, #14]
 8001da6:	2b29      	cmp	r3, #41	; 0x29
 8001da8:	d125      	bne.n	8001df6 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	09db      	lsrs	r3, r3, #7
 8001dae:	f003 0301 	and.w	r3, r3, #1
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00f      	beq.n	8001dd6 <HAL_I2C_EV_IRQHandler+0x266>
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	0a9b      	lsrs	r3, r3, #10
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d009      	beq.n	8001dd6 <HAL_I2C_EV_IRQHandler+0x266>
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	089b      	lsrs	r3, r3, #2
 8001dc6:	f003 0301 	and.w	r3, r3, #1
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d103      	bne.n	8001dd6 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 feda 	bl	8002b88 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001dd4:	e039      	b.n	8001e4a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d033      	beq.n	8001e4a <HAL_I2C_EV_IRQHandler+0x2da>
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	0a5b      	lsrs	r3, r3, #9
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d02d      	beq.n	8001e4a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 ff07 	bl	8002c02 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001df4:	e029      	b.n	8001e4a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	099b      	lsrs	r3, r3, #6
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d00f      	beq.n	8001e22 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	0a9b      	lsrs	r3, r3, #10
 8001e06:	f003 0301 	and.w	r3, r3, #1
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d009      	beq.n	8001e22 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	089b      	lsrs	r3, r3, #2
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d103      	bne.n	8001e22 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 ff12 	bl	8002c44 <I2C_SlaveReceive_RXNE>
 8001e20:	e014      	b.n	8001e4c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	089b      	lsrs	r3, r3, #2
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00e      	beq.n	8001e4c <HAL_I2C_EV_IRQHandler+0x2dc>
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	0a5b      	lsrs	r3, r3, #9
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d008      	beq.n	8001e4c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f000 ff40 	bl	8002cc0 <I2C_SlaveReceive_BTF>
 8001e40:	e004      	b.n	8001e4c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001e42:	bf00      	nop
 8001e44:	e002      	b.n	8001e4c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001e46:	bf00      	nop
 8001e48:	e000      	b.n	8001e4c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001e4a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001e4c:	3720      	adds	r7, #32
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b08a      	sub	sp, #40	; 0x28
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	695b      	ldr	r3, [r3, #20]
 8001e60:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e74:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00e      	beq.n	8001ea0 <HAL_I2C_ER_IRQHandler+0x4e>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d008      	beq.n	8001ea0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	f043 0301 	orr.w	r3, r3, #1
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e9e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001ea0:	6a3b      	ldr	r3, [r7, #32]
 8001ea2:	0a5b      	lsrs	r3, r3, #9
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d00e      	beq.n	8001eca <HAL_I2C_ER_IRQHandler+0x78>
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	0a1b      	lsrs	r3, r3, #8
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d008      	beq.n	8001eca <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	f043 0302 	orr.w	r3, r3, #2
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001ec8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	0a9b      	lsrs	r3, r3, #10
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d03f      	beq.n	8001f56 <HAL_I2C_ER_IRQHandler+0x104>
 8001ed6:	69fb      	ldr	r3, [r7, #28]
 8001ed8:	0a1b      	lsrs	r3, r3, #8
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d039      	beq.n	8001f56 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8001ee2:	7efb      	ldrb	r3, [r7, #27]
 8001ee4:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ef4:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efa:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001efc:	7ebb      	ldrb	r3, [r7, #26]
 8001efe:	2b20      	cmp	r3, #32
 8001f00:	d112      	bne.n	8001f28 <HAL_I2C_ER_IRQHandler+0xd6>
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d10f      	bne.n	8001f28 <HAL_I2C_ER_IRQHandler+0xd6>
 8001f08:	7cfb      	ldrb	r3, [r7, #19]
 8001f0a:	2b21      	cmp	r3, #33	; 0x21
 8001f0c:	d008      	beq.n	8001f20 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001f0e:	7cfb      	ldrb	r3, [r7, #19]
 8001f10:	2b29      	cmp	r3, #41	; 0x29
 8001f12:	d005      	beq.n	8001f20 <HAL_I2C_ER_IRQHandler+0xce>
 8001f14:	7cfb      	ldrb	r3, [r7, #19]
 8001f16:	2b28      	cmp	r3, #40	; 0x28
 8001f18:	d106      	bne.n	8001f28 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2b21      	cmp	r3, #33	; 0x21
 8001f1e:	d103      	bne.n	8001f28 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f001 f869 	bl	8002ff8 <I2C_Slave_AF>
 8001f26:	e016      	b.n	8001f56 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001f30:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	f043 0304 	orr.w	r3, r3, #4
 8001f38:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f3a:	7efb      	ldrb	r3, [r7, #27]
 8001f3c:	2b10      	cmp	r3, #16
 8001f3e:	d002      	beq.n	8001f46 <HAL_I2C_ER_IRQHandler+0xf4>
 8001f40:	7efb      	ldrb	r3, [r7, #27]
 8001f42:	2b40      	cmp	r3, #64	; 0x40
 8001f44:	d107      	bne.n	8001f56 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f54:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	0adb      	lsrs	r3, r3, #11
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00e      	beq.n	8001f80 <HAL_I2C_ER_IRQHandler+0x12e>
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	f003 0301 	and.w	r3, r3, #1
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d008      	beq.n	8001f80 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f70:	f043 0308 	orr.w	r3, r3, #8
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001f7e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d008      	beq.n	8001f98 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f001 f8a0 	bl	80030d8 <I2C_ITError>
  }
}
 8001f98:	bf00      	nop
 8001f9a:	3728      	adds	r7, #40	; 0x28
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001fbc:	bf00      	nop
 8001fbe:	370c      	adds	r7, #12
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	70fb      	strb	r3, [r7, #3]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800207e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002086:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002092:	2b00      	cmp	r3, #0
 8002094:	d150      	bne.n	8002138 <I2C_MasterTransmit_TXE+0xc8>
 8002096:	7bfb      	ldrb	r3, [r7, #15]
 8002098:	2b21      	cmp	r3, #33	; 0x21
 800209a:	d14d      	bne.n	8002138 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d01d      	beq.n	80020de <I2C_MasterTransmit_TXE+0x6e>
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	2b20      	cmp	r3, #32
 80020a6:	d01a      	beq.n	80020de <I2C_MasterTransmit_TXE+0x6e>
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020ae:	d016      	beq.n	80020de <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020be:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2211      	movs	r2, #17
 80020c4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2220      	movs	r2, #32
 80020d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff ff62 	bl	8001fa0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80020dc:	e060      	b.n	80021a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020ec:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020fc:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2200      	movs	r2, #0
 8002102:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2220      	movs	r2, #32
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b40      	cmp	r3, #64	; 0x40
 8002116:	d107      	bne.n	8002128 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff ff7d 	bl	8002020 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002126:	e03b      	b.n	80021a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f7ff ff35 	bl	8001fa0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002136:	e033      	b.n	80021a0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	2b21      	cmp	r3, #33	; 0x21
 800213c:	d005      	beq.n	800214a <I2C_MasterTransmit_TXE+0xda>
 800213e:	7bbb      	ldrb	r3, [r7, #14]
 8002140:	2b40      	cmp	r3, #64	; 0x40
 8002142:	d12d      	bne.n	80021a0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8002144:	7bfb      	ldrb	r3, [r7, #15]
 8002146:	2b22      	cmp	r3, #34	; 0x22
 8002148:	d12a      	bne.n	80021a0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214e:	b29b      	uxth	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d108      	bne.n	8002166 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	685a      	ldr	r2, [r3, #4]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002162:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002164:	e01c      	b.n	80021a0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800216c:	b2db      	uxtb	r3, r3
 800216e:	2b40      	cmp	r3, #64	; 0x40
 8002170:	d103      	bne.n	800217a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f88e 	bl	8002294 <I2C_MemoryTransmit_TXE_BTF>
}
 8002178:	e012      	b.n	80021a0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217e:	781a      	ldrb	r2, [r3, #0]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218a:	1c5a      	adds	r2, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002194:	b29b      	uxth	r3, r3
 8002196:	3b01      	subs	r3, #1
 8002198:	b29a      	uxth	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800219e:	e7ff      	b.n	80021a0 <I2C_MasterTransmit_TXE+0x130>
 80021a0:	bf00      	nop
 80021a2:	3710      	adds	r7, #16
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b21      	cmp	r3, #33	; 0x21
 80021c0:	d164      	bne.n	800228c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d012      	beq.n	80021f2 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021d0:	781a      	ldrb	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	1c5a      	adds	r2, r3, #1
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	3b01      	subs	r3, #1
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80021f0:	e04c      	b.n	800228c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d01d      	beq.n	8002234 <I2C_MasterTransmit_BTF+0x8c>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b20      	cmp	r3, #32
 80021fc:	d01a      	beq.n	8002234 <I2C_MasterTransmit_BTF+0x8c>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002204:	d016      	beq.n	8002234 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002214:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2211      	movs	r2, #17
 800221a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff feb7 	bl	8001fa0 <HAL_I2C_MasterTxCpltCallback>
}
 8002232:	e02b      	b.n	800228c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	685a      	ldr	r2, [r3, #4]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002242:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002252:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2200      	movs	r2, #0
 8002258:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2220      	movs	r2, #32
 800225e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b40      	cmp	r3, #64	; 0x40
 800226c:	d107      	bne.n	800227e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f7ff fed2 	bl	8002020 <HAL_I2C_MemTxCpltCallback>
}
 800227c:	e006      	b.n	800228c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2200      	movs	r2, #0
 8002282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f7ff fe8a 	bl	8001fa0 <HAL_I2C_MasterTxCpltCallback>
}
 800228c:	bf00      	nop
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022a2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d11d      	bne.n	80022e8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d10b      	bne.n	80022cc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022c4:	1c9a      	adds	r2, r3, #2
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80022ca:	e073      	b.n	80023b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	121b      	asrs	r3, r3, #8
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e0:	1c5a      	adds	r2, r3, #1
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80022e6:	e065      	b.n	80023b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d10b      	bne.n	8002308 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002300:	1c5a      	adds	r2, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002306:	e055      	b.n	80023b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800230c:	2b02      	cmp	r3, #2
 800230e:	d151      	bne.n	80023b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	2b22      	cmp	r3, #34	; 0x22
 8002314:	d10d      	bne.n	8002332 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002324:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002330:	e040      	b.n	80023b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002336:	b29b      	uxth	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d015      	beq.n	8002368 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	2b21      	cmp	r3, #33	; 0x21
 8002340:	d112      	bne.n	8002368 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	781a      	ldrb	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002352:	1c5a      	adds	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800235c:	b29b      	uxth	r3, r3
 800235e:	3b01      	subs	r3, #1
 8002360:	b29a      	uxth	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002366:	e025      	b.n	80023b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236c:	b29b      	uxth	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d120      	bne.n	80023b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002372:	7bfb      	ldrb	r3, [r7, #15]
 8002374:	2b21      	cmp	r3, #33	; 0x21
 8002376:	d11d      	bne.n	80023b4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002386:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002396:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2200      	movs	r2, #0
 800239c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2220      	movs	r2, #32
 80023a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff fe36 	bl	8002020 <HAL_I2C_MemTxCpltCallback>
}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b22      	cmp	r3, #34	; 0x22
 80023ce:	f040 80ac 	bne.w	800252a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b03      	cmp	r3, #3
 80023de:	d921      	bls.n	8002424 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691a      	ldr	r2, [r3, #16]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240a:	b29b      	uxth	r3, r3
 800240c:	2b03      	cmp	r3, #3
 800240e:	f040 808c 	bne.w	800252a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002420:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002422:	e082      	b.n	800252a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	2b02      	cmp	r3, #2
 800242a:	d075      	beq.n	8002518 <I2C_MasterReceive_RXNE+0x15c>
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d002      	beq.n	8002438 <I2C_MasterReceive_RXNE+0x7c>
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d16f      	bne.n	8002518 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f001 fa15 	bl	8003868 <I2C_WaitOnSTOPRequestThroughIT>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d142      	bne.n	80024ca <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002452:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002462:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	691a      	ldr	r2, [r3, #16]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	1c5a      	adds	r2, r3, #1
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002480:	b29b      	uxth	r3, r3
 8002482:	3b01      	subs	r3, #1
 8002484:	b29a      	uxth	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2220      	movs	r2, #32
 800248e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002498:	b2db      	uxtb	r3, r3
 800249a:	2b40      	cmp	r3, #64	; 0x40
 800249c:	d10a      	bne.n	80024b4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f7ff fdc1 	bl	8002034 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024b2:	e03a      	b.n	800252a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2212      	movs	r2, #18
 80024c0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7ff fd76 	bl	8001fb4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80024c8:	e02f      	b.n	800252a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80024d8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	691a      	ldr	r2, [r3, #16]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	b2d2      	uxtb	r2, r2
 80024e6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	1c5a      	adds	r2, r3, #1
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2220      	movs	r2, #32
 8002504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f7ff fd99 	bl	8002048 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002516:	e008      	b.n	800252a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002526:	605a      	str	r2, [r3, #4]
}
 8002528:	e7ff      	b.n	800252a <I2C_MasterReceive_RXNE+0x16e>
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b084      	sub	sp, #16
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002544:	b29b      	uxth	r3, r3
 8002546:	2b04      	cmp	r3, #4
 8002548:	d11b      	bne.n	8002582 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685a      	ldr	r2, [r3, #4]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002558:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	691a      	ldr	r2, [r3, #16]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002576:	b29b      	uxth	r3, r3
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002580:	e0bd      	b.n	80026fe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b03      	cmp	r3, #3
 800258a:	d129      	bne.n	80025e0 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800259a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d00a      	beq.n	80025b8 <I2C_MasterReceive_BTF+0x86>
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d007      	beq.n	80025b8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025b6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691a      	ldr	r2, [r3, #16]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ca:	1c5a      	adds	r2, r3, #1
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80025de:	e08e      	b.n	80026fe <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d176      	bne.n	80026d8 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d002      	beq.n	80025f6 <I2C_MasterReceive_BTF+0xc4>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2b10      	cmp	r3, #16
 80025f4:	d108      	bne.n	8002608 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002604:	601a      	str	r2, [r3, #0]
 8002606:	e019      	b.n	800263c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2b04      	cmp	r3, #4
 800260c:	d002      	beq.n	8002614 <I2C_MasterReceive_BTF+0xe2>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d108      	bne.n	8002626 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	e00a      	b.n	800263c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2b10      	cmp	r3, #16
 800262a:	d007      	beq.n	800263c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800263a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691a      	ldr	r2, [r3, #16]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	1c5a      	adds	r2, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002658:	b29b      	uxth	r3, r3
 800265a:	3b01      	subs	r3, #1
 800265c:	b29a      	uxth	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	691a      	ldr	r2, [r3, #16]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	685a      	ldr	r2, [r3, #4]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002696:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2220      	movs	r2, #32
 800269c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	2b40      	cmp	r3, #64	; 0x40
 80026aa:	d10a      	bne.n	80026c2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2200      	movs	r2, #0
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff fcba 	bl	8002034 <HAL_I2C_MemRxCpltCallback>
}
 80026c0:	e01d      	b.n	80026fe <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2212      	movs	r2, #18
 80026ce:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	f7ff fc6f 	bl	8001fb4 <HAL_I2C_MasterRxCpltCallback>
}
 80026d6:	e012      	b.n	80026fe <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691a      	ldr	r2, [r3, #16]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	1c5a      	adds	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f4:	b29b      	uxth	r3, r3
 80026f6:	3b01      	subs	r3, #1
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80026fe:	bf00      	nop
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002706:	b480      	push	{r7}
 8002708:	b083      	sub	sp, #12
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b40      	cmp	r3, #64	; 0x40
 8002718:	d117      	bne.n	800274a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800271e:	2b00      	cmp	r3, #0
 8002720:	d109      	bne.n	8002736 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002726:	b2db      	uxtb	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002732:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002734:	e067      	b.n	8002806 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	b2da      	uxtb	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	611a      	str	r2, [r3, #16]
}
 8002748:	e05d      	b.n	8002806 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002752:	d133      	bne.n	80027bc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b21      	cmp	r3, #33	; 0x21
 800275e:	d109      	bne.n	8002774 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002764:	b2db      	uxtb	r3, r3
 8002766:	461a      	mov	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002770:	611a      	str	r2, [r3, #16]
 8002772:	e008      	b.n	8002786 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002778:	b2db      	uxtb	r3, r3
 800277a:	f043 0301 	orr.w	r3, r3, #1
 800277e:	b2da      	uxtb	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800278a:	2b00      	cmp	r3, #0
 800278c:	d004      	beq.n	8002798 <I2C_Master_SB+0x92>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002794:	2b00      	cmp	r3, #0
 8002796:	d108      	bne.n	80027aa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279c:	2b00      	cmp	r3, #0
 800279e:	d032      	beq.n	8002806 <I2C_Master_SB+0x100>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d02d      	beq.n	8002806 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027b8:	605a      	str	r2, [r3, #4]
}
 80027ba:	e024      	b.n	8002806 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10e      	bne.n	80027e2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	11db      	asrs	r3, r3, #7
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	f003 0306 	and.w	r3, r3, #6
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	f063 030f 	orn	r3, r3, #15
 80027d8:	b2da      	uxtb	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	611a      	str	r2, [r3, #16]
}
 80027e0:	e011      	b.n	8002806 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d10d      	bne.n	8002806 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	b29b      	uxth	r3, r3
 80027f0:	11db      	asrs	r3, r3, #7
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	f003 0306 	and.w	r3, r3, #6
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	f063 030e 	orn	r3, r3, #14
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	611a      	str	r2, [r3, #16]
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281e:	b2da      	uxtb	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282a:	2b00      	cmp	r3, #0
 800282c:	d004      	beq.n	8002838 <I2C_Master_ADD10+0x26>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d108      	bne.n	800284a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00c      	beq.n	800285a <I2C_Master_ADD10+0x48>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002846:	2b00      	cmp	r3, #0
 8002848:	d007      	beq.n	800285a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002858:	605a      	str	r2, [r3, #4]
  }
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002866:	b480      	push	{r7}
 8002868:	b091      	sub	sp, #68	; 0x44
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002874:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b22      	cmp	r3, #34	; 0x22
 800288e:	f040 8169 	bne.w	8002b64 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002896:	2b00      	cmp	r3, #0
 8002898:	d10f      	bne.n	80028ba <I2C_Master_ADDR+0x54>
 800289a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800289e:	2b40      	cmp	r3, #64	; 0x40
 80028a0:	d10b      	bne.n	80028ba <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028a2:	2300      	movs	r3, #0
 80028a4:	633b      	str	r3, [r7, #48]	; 0x30
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	633b      	str	r3, [r7, #48]	; 0x30
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	633b      	str	r3, [r7, #48]	; 0x30
 80028b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b8:	e160      	b.n	8002b7c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d11d      	bne.n	80028fe <I2C_Master_ADDR+0x98>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80028ca:	d118      	bne.n	80028fe <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028cc:	2300      	movs	r3, #0
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	699b      	ldr	r3, [r3, #24]
 80028de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028f0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028f6:	1c5a      	adds	r2, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	651a      	str	r2, [r3, #80]	; 0x50
 80028fc:	e13e      	b.n	8002b7c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002902:	b29b      	uxth	r3, r3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d113      	bne.n	8002930 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002908:	2300      	movs	r3, #0
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	62bb      	str	r3, [r7, #40]	; 0x28
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	62bb      	str	r3, [r7, #40]	; 0x28
 800291c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	e115      	b.n	8002b5c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002934:	b29b      	uxth	r3, r3
 8002936:	2b01      	cmp	r3, #1
 8002938:	f040 808a 	bne.w	8002a50 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800293c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002942:	d137      	bne.n	80029b4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002952:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800295e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002962:	d113      	bne.n	800298c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002972:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002974:	2300      	movs	r3, #0
 8002976:	627b      	str	r3, [r7, #36]	; 0x24
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	699b      	ldr	r3, [r3, #24]
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	e0e7      	b.n	8002b5c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298c:	2300      	movs	r3, #0
 800298e:	623b      	str	r3, [r7, #32]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	623b      	str	r3, [r7, #32]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	623b      	str	r3, [r7, #32]
 80029a0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b0:	601a      	str	r2, [r3, #0]
 80029b2:	e0d3      	b.n	8002b5c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80029b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d02e      	beq.n	8002a18 <I2C_Master_ADDR+0x1b2>
 80029ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029bc:	2b20      	cmp	r3, #32
 80029be:	d02b      	beq.n	8002a18 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80029c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c2:	2b12      	cmp	r3, #18
 80029c4:	d102      	bne.n	80029cc <I2C_Master_ADDR+0x166>
 80029c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d125      	bne.n	8002a18 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80029cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	d00e      	beq.n	80029f0 <I2C_Master_ADDR+0x18a>
 80029d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d00b      	beq.n	80029f0 <I2C_Master_ADDR+0x18a>
 80029d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029da:	2b10      	cmp	r3, #16
 80029dc:	d008      	beq.n	80029f0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	e007      	b.n	8002a00 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029fe:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a00:	2300      	movs	r3, #0
 8002a02:	61fb      	str	r3, [r7, #28]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	695b      	ldr	r3, [r3, #20]
 8002a0a:	61fb      	str	r3, [r7, #28]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	61fb      	str	r3, [r7, #28]
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	e0a1      	b.n	8002b5c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a26:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61bb      	str	r3, [r7, #24]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	61bb      	str	r3, [r7, #24]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	61bb      	str	r3, [r7, #24]
 8002a3c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a4c:	601a      	str	r2, [r3, #0]
 8002a4e:	e085      	b.n	8002b5c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d14d      	bne.n	8002af6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d016      	beq.n	8002a8e <I2C_Master_ADDR+0x228>
 8002a60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d013      	beq.n	8002a8e <I2C_Master_ADDR+0x228>
 8002a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a68:	2b10      	cmp	r3, #16
 8002a6a:	d010      	beq.n	8002a8e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a7a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	e007      	b.n	8002a9e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a9c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002aac:	d117      	bne.n	8002ade <I2C_Master_ADDR+0x278>
 8002aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ab4:	d00b      	beq.n	8002ace <I2C_Master_ADDR+0x268>
 8002ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d008      	beq.n	8002ace <I2C_Master_ADDR+0x268>
 8002abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002abe:	2b08      	cmp	r3, #8
 8002ac0:	d005      	beq.n	8002ace <I2C_Master_ADDR+0x268>
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d002      	beq.n	8002ace <I2C_Master_ADDR+0x268>
 8002ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aca:	2b20      	cmp	r3, #32
 8002acc:	d107      	bne.n	8002ade <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002adc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ade:	2300      	movs	r3, #0
 8002ae0:	617b      	str	r3, [r7, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695b      	ldr	r3, [r3, #20]
 8002ae8:	617b      	str	r3, [r7, #20]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	e032      	b.n	8002b5c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b04:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b14:	d117      	bne.n	8002b46 <I2C_Master_ADDR+0x2e0>
 8002b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b18:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b1c:	d00b      	beq.n	8002b36 <I2C_Master_ADDR+0x2d0>
 8002b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d008      	beq.n	8002b36 <I2C_Master_ADDR+0x2d0>
 8002b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d005      	beq.n	8002b36 <I2C_Master_ADDR+0x2d0>
 8002b2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b2c:	2b10      	cmp	r3, #16
 8002b2e:	d002      	beq.n	8002b36 <I2C_Master_ADDR+0x2d0>
 8002b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	d107      	bne.n	8002b46 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b44:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b46:	2300      	movs	r3, #0
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	613b      	str	r3, [r7, #16]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002b62:	e00b      	b.n	8002b7c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b64:	2300      	movs	r3, #0
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	695b      	ldr	r3, [r3, #20]
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	68fb      	ldr	r3, [r7, #12]
}
 8002b7a:	e7ff      	b.n	8002b7c <I2C_Master_ADDR+0x316>
 8002b7c:	bf00      	nop
 8002b7e:	3744      	adds	r7, #68	; 0x44
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b96:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d02b      	beq.n	8002bfa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	781a      	ldrb	r2, [r3, #0]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	1c5a      	adds	r2, r3, #1
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d114      	bne.n	8002bfa <I2C_SlaveTransmit_TXE+0x72>
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	2b29      	cmp	r3, #41	; 0x29
 8002bd4:	d111      	bne.n	8002bfa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002be4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2221      	movs	r2, #33	; 0x21
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2228      	movs	r2, #40	; 0x28
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f7ff f9e7 	bl	8001fc8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d011      	beq.n	8002c38 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	781a      	ldrb	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c52:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d02c      	beq.n	8002cb8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	b2d2      	uxtb	r2, r2
 8002c6a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	1c5a      	adds	r2, r3, #1
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	b29a      	uxth	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d114      	bne.n	8002cb8 <I2C_SlaveReceive_RXNE+0x74>
 8002c8e:	7bfb      	ldrb	r3, [r7, #15]
 8002c90:	2b2a      	cmp	r3, #42	; 0x2a
 8002c92:	d111      	bne.n	8002cb8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	685a      	ldr	r2, [r3, #4]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ca2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2222      	movs	r2, #34	; 0x22
 8002ca8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2228      	movs	r2, #40	; 0x28
 8002cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7ff f992 	bl	8001fdc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002cb8:	bf00      	nop
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b083      	sub	sp, #12
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d012      	beq.n	8002cf8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cdc:	b2d2      	uxtb	r2, r2
 8002cde:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce4:	1c5a      	adds	r2, r3, #1
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	3b01      	subs	r3, #1
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	370c      	adds	r7, #12
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d02:	4770      	bx	lr

08002d04 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002d1e:	2b28      	cmp	r3, #40	; 0x28
 8002d20:	d127      	bne.n	8002d72 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d30:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	089b      	lsrs	r3, r3, #2
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	09db      	lsrs	r3, r3, #7
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d103      	bne.n	8002d56 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	81bb      	strh	r3, [r7, #12]
 8002d54:	e002      	b.n	8002d5c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8002d64:	89ba      	ldrh	r2, [r7, #12]
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff f940 	bl	8001ff0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002d70:	e00e      	b.n	8002d90 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	695b      	ldr	r3, [r3, #20]
 8002d7c:	60bb      	str	r3, [r7, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	60bb      	str	r3, [r7, #8]
 8002d86:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002d90:	bf00      	nop
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002da6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002db6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002db8:	2300      	movs	r3, #0
 8002dba:	60bb      	str	r3, [r7, #8]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]
 8002dd4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002df4:	d172      	bne.n	8002edc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	2b22      	cmp	r3, #34	; 0x22
 8002dfa:	d002      	beq.n	8002e02 <I2C_Slave_STOPF+0x6a>
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	2b2a      	cmp	r3, #42	; 0x2a
 8002e00:	d135      	bne.n	8002e6e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	b29a      	uxth	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e14:	b29b      	uxth	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	f043 0204 	orr.w	r2, r3, #4
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e34:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fe f925 	bl	800108a <HAL_DMA_GetState>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d049      	beq.n	8002eda <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e4a:	4a69      	ldr	r2, [pc, #420]	; (8002ff0 <I2C_Slave_STOPF+0x258>)
 8002e4c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7fe f8f7 	bl	8001046 <HAL_DMA_Abort_IT>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d03d      	beq.n	8002eda <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e68:	4610      	mov	r0, r2
 8002e6a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002e6c:	e035      	b.n	8002eda <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8a:	f043 0204 	orr.w	r2, r3, #4
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685a      	ldr	r2, [r3, #4]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ea0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe f8ef 	bl	800108a <HAL_DMA_GetState>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d014      	beq.n	8002edc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb6:	4a4e      	ldr	r2, [pc, #312]	; (8002ff0 <I2C_Slave_STOPF+0x258>)
 8002eb8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fe f8c1 	bl	8001046 <HAL_DMA_Abort_IT>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d008      	beq.n	8002edc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	4798      	blx	r3
 8002ed8:	e000      	b.n	8002edc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002eda:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d03e      	beq.n	8002f64 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	695b      	ldr	r3, [r3, #20]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b04      	cmp	r3, #4
 8002ef2:	d112      	bne.n	8002f1a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	1c5a      	adds	r2, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	3b01      	subs	r3, #1
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f24:	2b40      	cmp	r3, #64	; 0x40
 8002f26:	d112      	bne.n	8002f4e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	691a      	ldr	r2, [r3, #16]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	b2d2      	uxtb	r2, r2
 8002f34:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	f043 0204 	orr.w	r2, r3, #4
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f8b3 	bl	80030d8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002f72:	e039      	b.n	8002fe8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
 8002f76:	2b2a      	cmp	r3, #42	; 0x2a
 8002f78:	d109      	bne.n	8002f8e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2228      	movs	r2, #40	; 0x28
 8002f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	f7ff f827 	bl	8001fdc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	2b28      	cmp	r3, #40	; 0x28
 8002f98:	d111      	bne.n	8002fbe <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a15      	ldr	r2, [pc, #84]	; (8002ff4 <I2C_Slave_STOPF+0x25c>)
 8002f9e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2220      	movs	r2, #32
 8002faa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff f828 	bl	800200c <HAL_I2C_ListenCpltCallback>
}
 8002fbc:	e014      	b.n	8002fe8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	2b22      	cmp	r3, #34	; 0x22
 8002fc4:	d002      	beq.n	8002fcc <I2C_Slave_STOPF+0x234>
 8002fc6:	7bfb      	ldrb	r3, [r7, #15]
 8002fc8:	2b22      	cmp	r3, #34	; 0x22
 8002fca:	d10d      	bne.n	8002fe8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fe fffa 	bl	8001fdc <HAL_I2C_SlaveRxCpltCallback>
}
 8002fe8:	bf00      	nop
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	08003469 	.word	0x08003469
 8002ff4:	ffff0000 	.word	0xffff0000

08002ff8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003006:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2b08      	cmp	r3, #8
 8003012:	d002      	beq.n	800301a <I2C_Slave_AF+0x22>
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	2b20      	cmp	r3, #32
 8003018:	d129      	bne.n	800306e <I2C_Slave_AF+0x76>
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	2b28      	cmp	r3, #40	; 0x28
 800301e:	d126      	bne.n	800306e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a2c      	ldr	r2, [pc, #176]	; (80030d4 <I2C_Slave_AF+0xdc>)
 8003024:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685a      	ldr	r2, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003034:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800303e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800304e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2220      	movs	r2, #32
 800305a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f7fe ffd0 	bl	800200c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800306c:	e02e      	b.n	80030cc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	2b21      	cmp	r3, #33	; 0x21
 8003072:	d126      	bne.n	80030c2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a17      	ldr	r2, [pc, #92]	; (80030d4 <I2C_Slave_AF+0xdc>)
 8003078:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2221      	movs	r2, #33	; 0x21
 800307e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800309e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030a8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f7fe ff84 	bl	8001fc8 <HAL_I2C_SlaveTxCpltCallback>
}
 80030c0:	e004      	b.n	80030cc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030ca:	615a      	str	r2, [r3, #20]
}
 80030cc:	bf00      	nop
 80030ce:	3710      	adds	r7, #16
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	ffff0000 	.word	0xffff0000

080030d8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80030ee:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80030f0:	7bbb      	ldrb	r3, [r7, #14]
 80030f2:	2b10      	cmp	r3, #16
 80030f4:	d002      	beq.n	80030fc <I2C_ITError+0x24>
 80030f6:	7bbb      	ldrb	r3, [r7, #14]
 80030f8:	2b40      	cmp	r3, #64	; 0x40
 80030fa:	d10a      	bne.n	8003112 <I2C_ITError+0x3a>
 80030fc:	7bfb      	ldrb	r3, [r7, #15]
 80030fe:	2b22      	cmp	r3, #34	; 0x22
 8003100:	d107      	bne.n	8003112 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003110:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003112:	7bfb      	ldrb	r3, [r7, #15]
 8003114:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003118:	2b28      	cmp	r3, #40	; 0x28
 800311a:	d107      	bne.n	800312c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2228      	movs	r2, #40	; 0x28
 8003126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800312a:	e015      	b.n	8003158 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003136:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800313a:	d00a      	beq.n	8003152 <I2C_ITError+0x7a>
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	2b60      	cmp	r3, #96	; 0x60
 8003140:	d007      	beq.n	8003152 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2220      	movs	r2, #32
 8003146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003166:	d162      	bne.n	800322e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003176:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b01      	cmp	r3, #1
 8003184:	d020      	beq.n	80031c8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800318a:	4a6a      	ldr	r2, [pc, #424]	; (8003334 <I2C_ITError+0x25c>)
 800318c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd ff57 	bl	8001046 <HAL_DMA_Abort_IT>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 8089 	beq.w	80032b2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0201 	bic.w	r2, r2, #1
 80031ae:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2220      	movs	r2, #32
 80031b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031c2:	4610      	mov	r0, r2
 80031c4:	4798      	blx	r3
 80031c6:	e074      	b.n	80032b2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	4a59      	ldr	r2, [pc, #356]	; (8003334 <I2C_ITError+0x25c>)
 80031ce:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fd ff36 	bl	8001046 <HAL_DMA_Abort_IT>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d068      	beq.n	80032b2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	2b40      	cmp	r3, #64	; 0x40
 80031ec:	d10b      	bne.n	8003206 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0201 	bic.w	r2, r2, #1
 8003214:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003228:	4610      	mov	r0, r2
 800322a:	4798      	blx	r3
 800322c:	e041      	b.n	80032b2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b60      	cmp	r3, #96	; 0x60
 8003238:	d125      	bne.n	8003286 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2220      	movs	r2, #32
 800323e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003252:	2b40      	cmp	r3, #64	; 0x40
 8003254:	d10b      	bne.n	800326e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	691a      	ldr	r2, [r3, #16]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	b2d2      	uxtb	r2, r2
 8003262:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f022 0201 	bic.w	r2, r2, #1
 800327c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fe feec 	bl	800205c <HAL_I2C_AbortCpltCallback>
 8003284:	e015      	b.n	80032b2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003290:	2b40      	cmp	r3, #64	; 0x40
 8003292:	d10b      	bne.n	80032ac <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80032ac:	6878      	ldr	r0, [r7, #4]
 80032ae:	f7fe fecb 	bl	8002048 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10e      	bne.n	80032e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d109      	bne.n	80032e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d104      	bne.n	80032e0 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d007      	beq.n	80032f0 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80032ee:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f6:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b04      	cmp	r3, #4
 8003302:	d113      	bne.n	800332c <I2C_ITError+0x254>
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	2b28      	cmp	r3, #40	; 0x28
 8003308:	d110      	bne.n	800332c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <I2C_ITError+0x260>)
 800330e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fe fe70 	bl	800200c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800332c:	bf00      	nop
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	08003469 	.word	0x08003469
 8003338:	ffff0000 	.word	0xffff0000

0800333c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af02      	add	r7, sp, #8
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	4608      	mov	r0, r1
 8003346:	4611      	mov	r1, r2
 8003348:	461a      	mov	r2, r3
 800334a:	4603      	mov	r3, r0
 800334c:	817b      	strh	r3, [r7, #10]
 800334e:	460b      	mov	r3, r1
 8003350:	813b      	strh	r3, [r7, #8]
 8003352:	4613      	mov	r3, r2
 8003354:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003364:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003368:	9300      	str	r3, [sp, #0]
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	2200      	movs	r2, #0
 800336e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 f920 	bl	80035b8 <I2C_WaitOnFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00d      	beq.n	800339a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800338c:	d103      	bne.n	8003396 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003394:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e05f      	b.n	800345a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800339a:	897b      	ldrh	r3, [r7, #10]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	461a      	mov	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80033a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	6a3a      	ldr	r2, [r7, #32]
 80033ae:	492d      	ldr	r1, [pc, #180]	; (8003464 <I2C_RequestMemoryWrite+0x128>)
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 f958 	bl	8003666 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d001      	beq.n	80033c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e04c      	b.n	800345a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033c0:	2300      	movs	r3, #0
 80033c2:	617b      	str	r3, [r7, #20]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	617b      	str	r3, [r7, #20]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	617b      	str	r3, [r7, #20]
 80033d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033d8:	6a39      	ldr	r1, [r7, #32]
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f9c2 	bl	8003764 <I2C_WaitOnTXEFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00d      	beq.n	8003402 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d107      	bne.n	80033fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e02b      	b.n	800345a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003402:	88fb      	ldrh	r3, [r7, #6]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d105      	bne.n	8003414 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003408:	893b      	ldrh	r3, [r7, #8]
 800340a:	b2da      	uxtb	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	611a      	str	r2, [r3, #16]
 8003412:	e021      	b.n	8003458 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003414:	893b      	ldrh	r3, [r7, #8]
 8003416:	0a1b      	lsrs	r3, r3, #8
 8003418:	b29b      	uxth	r3, r3
 800341a:	b2da      	uxtb	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003424:	6a39      	ldr	r1, [r7, #32]
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 f99c 	bl	8003764 <I2C_WaitOnTXEFlagUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00d      	beq.n	800344e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	2b04      	cmp	r3, #4
 8003438:	d107      	bne.n	800344a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003448:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e005      	b.n	800345a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800344e:	893b      	ldrh	r3, [r7, #8]
 8003450:	b2da      	uxtb	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	00010002 	.word	0x00010002

08003468 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003478:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003480:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003482:	4b4b      	ldr	r3, [pc, #300]	; (80035b0 <I2C_DMAAbort+0x148>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	08db      	lsrs	r3, r3, #3
 8003488:	4a4a      	ldr	r2, [pc, #296]	; (80035b4 <I2C_DMAAbort+0x14c>)
 800348a:	fba2 2303 	umull	r2, r3, r2, r3
 800348e:	0a1a      	lsrs	r2, r3, #8
 8003490:	4613      	mov	r3, r2
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	4413      	add	r3, r2
 8003496:	00da      	lsls	r2, r3, #3
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	f043 0220 	orr.w	r2, r3, #32
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80034ae:	e00a      	b.n	80034c6 <I2C_DMAAbort+0x5e>
    }
    count--;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034c4:	d0ea      	beq.n	800349c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d003      	beq.n	80034d6 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d2:	2200      	movs	r2, #0
 80034d4:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	2200      	movs	r2, #0
 80034e4:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034f4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	2200      	movs	r2, #0
 80034fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003500:	2b00      	cmp	r3, #0
 8003502:	d003      	beq.n	800350c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003508:	2200      	movs	r2, #0
 800350a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003518:	2200      	movs	r2, #0
 800351a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f022 0201 	bic.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b60      	cmp	r3, #96	; 0x60
 8003536:	d10e      	bne.n	8003556 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	2220      	movs	r2, #32
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	2200      	movs	r2, #0
 800354c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800354e:	6978      	ldr	r0, [r7, #20]
 8003550:	f7fe fd84 	bl	800205c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003554:	e027      	b.n	80035a6 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003556:	7cfb      	ldrb	r3, [r7, #19]
 8003558:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800355c:	2b28      	cmp	r3, #40	; 0x28
 800355e:	d117      	bne.n	8003590 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800357e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2200      	movs	r2, #0
 8003584:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2228      	movs	r2, #40	; 0x28
 800358a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800358e:	e007      	b.n	80035a0 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	2220      	movs	r2, #32
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80035a0:	6978      	ldr	r0, [r7, #20]
 80035a2:	f7fe fd51 	bl	8002048 <HAL_I2C_ErrorCallback>
}
 80035a6:	bf00      	nop
 80035a8:	3718      	adds	r7, #24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	20000020 	.word	0x20000020
 80035b4:	14f8b589 	.word	0x14f8b589

080035b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	60f8      	str	r0, [r7, #12]
 80035c0:	60b9      	str	r1, [r7, #8]
 80035c2:	603b      	str	r3, [r7, #0]
 80035c4:	4613      	mov	r3, r2
 80035c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035c8:	e025      	b.n	8003616 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d0:	d021      	beq.n	8003616 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d2:	f7fd fbf7 	bl	8000dc4 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d302      	bcc.n	80035e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d116      	bne.n	8003616 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f043 0220 	orr.w	r2, r3, #32
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e023      	b.n	800365e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	0c1b      	lsrs	r3, r3, #16
 800361a:	b2db      	uxtb	r3, r3
 800361c:	2b01      	cmp	r3, #1
 800361e:	d10d      	bne.n	800363c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	43da      	mvns	r2, r3
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	4013      	ands	r3, r2
 800362c:	b29b      	uxth	r3, r3
 800362e:	2b00      	cmp	r3, #0
 8003630:	bf0c      	ite	eq
 8003632:	2301      	moveq	r3, #1
 8003634:	2300      	movne	r3, #0
 8003636:	b2db      	uxtb	r3, r3
 8003638:	461a      	mov	r2, r3
 800363a:	e00c      	b.n	8003656 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	43da      	mvns	r2, r3
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4013      	ands	r3, r2
 8003648:	b29b      	uxth	r3, r3
 800364a:	2b00      	cmp	r3, #0
 800364c:	bf0c      	ite	eq
 800364e:	2301      	moveq	r3, #1
 8003650:	2300      	movne	r3, #0
 8003652:	b2db      	uxtb	r3, r3
 8003654:	461a      	mov	r2, r3
 8003656:	79fb      	ldrb	r3, [r7, #7]
 8003658:	429a      	cmp	r2, r3
 800365a:	d0b6      	beq.n	80035ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b084      	sub	sp, #16
 800366a:	af00      	add	r7, sp, #0
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
 8003672:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003674:	e051      	b.n	800371a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003684:	d123      	bne.n	80036ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003694:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800369e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2220      	movs	r2, #32
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	f043 0204 	orr.w	r2, r3, #4
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e046      	b.n	800375c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d4:	d021      	beq.n	800371a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d6:	f7fd fb75 	bl	8000dc4 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d302      	bcc.n	80036ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d116      	bne.n	800371a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2220      	movs	r2, #32
 80036f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f043 0220 	orr.w	r2, r3, #32
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e020      	b.n	800375c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	0c1b      	lsrs	r3, r3, #16
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b01      	cmp	r3, #1
 8003722:	d10c      	bne.n	800373e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	43da      	mvns	r2, r3
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	4013      	ands	r3, r2
 8003730:	b29b      	uxth	r3, r3
 8003732:	2b00      	cmp	r3, #0
 8003734:	bf14      	ite	ne
 8003736:	2301      	movne	r3, #1
 8003738:	2300      	moveq	r3, #0
 800373a:	b2db      	uxtb	r3, r3
 800373c:	e00b      	b.n	8003756 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	43da      	mvns	r2, r3
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	4013      	ands	r3, r2
 800374a:	b29b      	uxth	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	bf14      	ite	ne
 8003750:	2301      	movne	r3, #1
 8003752:	2300      	moveq	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d18d      	bne.n	8003676 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800375a:	2300      	movs	r3, #0
}
 800375c:	4618      	mov	r0, r3
 800375e:	3710      	adds	r7, #16
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003770:	e02d      	b.n	80037ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003772:	68f8      	ldr	r0, [r7, #12]
 8003774:	f000 f8aa 	bl	80038cc <I2C_IsAcknowledgeFailed>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e02d      	b.n	80037de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003788:	d021      	beq.n	80037ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378a:	f7fd fb1b 	bl	8000dc4 <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	429a      	cmp	r2, r3
 8003798:	d302      	bcc.n	80037a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d116      	bne.n	80037ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2220      	movs	r2, #32
 80037aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ba:	f043 0220 	orr.w	r2, r3, #32
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e007      	b.n	80037de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d8:	2b80      	cmp	r3, #128	; 0x80
 80037da:	d1ca      	bne.n	8003772 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b084      	sub	sp, #16
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	60f8      	str	r0, [r7, #12]
 80037ee:	60b9      	str	r1, [r7, #8]
 80037f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037f2:	e02d      	b.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 f869 	bl	80038cc <I2C_IsAcknowledgeFailed>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e02d      	b.n	8003860 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380a:	d021      	beq.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800380c:	f7fd fada 	bl	8000dc4 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	429a      	cmp	r2, r3
 800381a:	d302      	bcc.n	8003822 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d116      	bne.n	8003850 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	2200      	movs	r2, #0
 8003826:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2220      	movs	r2, #32
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	f043 0220 	orr.w	r2, r3, #32
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e007      	b.n	8003860 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b04      	cmp	r3, #4
 800385c:	d1ca      	bne.n	80037f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	3710      	adds	r7, #16
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003870:	2300      	movs	r3, #0
 8003872:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003874:	4b13      	ldr	r3, [pc, #76]	; (80038c4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	08db      	lsrs	r3, r3, #3
 800387a:	4a13      	ldr	r2, [pc, #76]	; (80038c8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800387c:	fba2 2303 	umull	r2, r3, r2, r3
 8003880:	0a1a      	lsrs	r2, r3, #8
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	3b01      	subs	r3, #1
 800388e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d107      	bne.n	80038a6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	f043 0220 	orr.w	r2, r3, #32
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e008      	b.n	80038b8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038b4:	d0e9      	beq.n	800388a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80038b6:	2300      	movs	r3, #0
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr
 80038c4:	20000020 	.word	0x20000020
 80038c8:	14f8b589 	.word	0x14f8b589

080038cc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038e2:	d11b      	bne.n	800391c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038ec:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	f043 0204 	orr.w	r2, r3, #4
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	e000      	b.n	800391e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800391c:	2300      	movs	r3, #0
}
 800391e:	4618      	mov	r0, r3
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003936:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800393a:	d103      	bne.n	8003944 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003942:	e007      	b.n	8003954 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003948:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800394c:	d102      	bne.n	8003954 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2208      	movs	r2, #8
 8003952:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003954:	bf00      	nop
 8003956:	370c      	adds	r7, #12
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e267      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0301 	and.w	r3, r3, #1
 800397a:	2b00      	cmp	r3, #0
 800397c:	d075      	beq.n	8003a6a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800397e:	4b88      	ldr	r3, [pc, #544]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	2b04      	cmp	r3, #4
 8003988:	d00c      	beq.n	80039a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800398a:	4b85      	ldr	r3, [pc, #532]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003992:	2b08      	cmp	r3, #8
 8003994:	d112      	bne.n	80039bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003996:	4b82      	ldr	r3, [pc, #520]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039a2:	d10b      	bne.n	80039bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039a4:	4b7e      	ldr	r3, [pc, #504]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d05b      	beq.n	8003a68 <HAL_RCC_OscConfig+0x108>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d157      	bne.n	8003a68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e242      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c4:	d106      	bne.n	80039d4 <HAL_RCC_OscConfig+0x74>
 80039c6:	4b76      	ldr	r3, [pc, #472]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a75      	ldr	r2, [pc, #468]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	e01d      	b.n	8003a10 <HAL_RCC_OscConfig+0xb0>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039dc:	d10c      	bne.n	80039f8 <HAL_RCC_OscConfig+0x98>
 80039de:	4b70      	ldr	r3, [pc, #448]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a6f      	ldr	r2, [pc, #444]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039e8:	6013      	str	r3, [r2, #0]
 80039ea:	4b6d      	ldr	r3, [pc, #436]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a6c      	ldr	r2, [pc, #432]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f4:	6013      	str	r3, [r2, #0]
 80039f6:	e00b      	b.n	8003a10 <HAL_RCC_OscConfig+0xb0>
 80039f8:	4b69      	ldr	r3, [pc, #420]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a68      	ldr	r2, [pc, #416]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 80039fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	4b66      	ldr	r3, [pc, #408]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a65      	ldr	r2, [pc, #404]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d013      	beq.n	8003a40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a18:	f7fd f9d4 	bl	8000dc4 <HAL_GetTick>
 8003a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a1e:	e008      	b.n	8003a32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a20:	f7fd f9d0 	bl	8000dc4 <HAL_GetTick>
 8003a24:	4602      	mov	r2, r0
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	1ad3      	subs	r3, r2, r3
 8003a2a:	2b64      	cmp	r3, #100	; 0x64
 8003a2c:	d901      	bls.n	8003a32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a2e:	2303      	movs	r3, #3
 8003a30:	e207      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a32:	4b5b      	ldr	r3, [pc, #364]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d0f0      	beq.n	8003a20 <HAL_RCC_OscConfig+0xc0>
 8003a3e:	e014      	b.n	8003a6a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a40:	f7fd f9c0 	bl	8000dc4 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a48:	f7fd f9bc 	bl	8000dc4 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	; 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e1f3      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a5a:	4b51      	ldr	r3, [pc, #324]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0xe8>
 8003a66:	e000      	b.n	8003a6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d063      	beq.n	8003b3e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a76:	4b4a      	ldr	r3, [pc, #296]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a78:	689b      	ldr	r3, [r3, #8]
 8003a7a:	f003 030c 	and.w	r3, r3, #12
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00b      	beq.n	8003a9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a82:	4b47      	ldr	r3, [pc, #284]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a8a:	2b08      	cmp	r3, #8
 8003a8c:	d11c      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a8e:	4b44      	ldr	r3, [pc, #272]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d116      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a9a:	4b41      	ldr	r3, [pc, #260]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d005      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x152>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d001      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e1c7      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ab2:	4b3b      	ldr	r3, [pc, #236]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	4937      	ldr	r1, [pc, #220]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ac6:	e03a      	b.n	8003b3e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d020      	beq.n	8003b12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ad0:	4b34      	ldr	r3, [pc, #208]	; (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad6:	f7fd f975 	bl	8000dc4 <HAL_GetTick>
 8003ada:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003adc:	e008      	b.n	8003af0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ade:	f7fd f971 	bl	8000dc4 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d901      	bls.n	8003af0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003aec:	2303      	movs	r3, #3
 8003aee:	e1a8      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003af0:	4b2b      	ldr	r3, [pc, #172]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d0f0      	beq.n	8003ade <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003afc:	4b28      	ldr	r3, [pc, #160]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	00db      	lsls	r3, r3, #3
 8003b0a:	4925      	ldr	r1, [pc, #148]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	600b      	str	r3, [r1, #0]
 8003b10:	e015      	b.n	8003b3e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b12:	4b24      	ldr	r3, [pc, #144]	; (8003ba4 <HAL_RCC_OscConfig+0x244>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b18:	f7fd f954 	bl	8000dc4 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b20:	f7fd f950 	bl	8000dc4 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e187      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b32:	4b1b      	ldr	r3, [pc, #108]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0302 	and.w	r3, r3, #2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0308 	and.w	r3, r3, #8
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d036      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d016      	beq.n	8003b80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b52:	4b15      	ldr	r3, [pc, #84]	; (8003ba8 <HAL_RCC_OscConfig+0x248>)
 8003b54:	2201      	movs	r2, #1
 8003b56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b58:	f7fd f934 	bl	8000dc4 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b60:	f7fd f930 	bl	8000dc4 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e167      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b72:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <HAL_RCC_OscConfig+0x240>)
 8003b74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b76:	f003 0302 	and.w	r3, r3, #2
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d0f0      	beq.n	8003b60 <HAL_RCC_OscConfig+0x200>
 8003b7e:	e01b      	b.n	8003bb8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b80:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <HAL_RCC_OscConfig+0x248>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b86:	f7fd f91d 	bl	8000dc4 <HAL_GetTick>
 8003b8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b8c:	e00e      	b.n	8003bac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b8e:	f7fd f919 	bl	8000dc4 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	2b02      	cmp	r3, #2
 8003b9a:	d907      	bls.n	8003bac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e150      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	42470000 	.word	0x42470000
 8003ba8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bac:	4b88      	ldr	r3, [pc, #544]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003bae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bb0:	f003 0302 	and.w	r3, r3, #2
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1ea      	bne.n	8003b8e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0304 	and.w	r3, r3, #4
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8097 	beq.w	8003cf4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bca:	4b81      	ldr	r3, [pc, #516]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d10f      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	4b7d      	ldr	r3, [pc, #500]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	4a7c      	ldr	r2, [pc, #496]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003be0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003be4:	6413      	str	r3, [r2, #64]	; 0x40
 8003be6:	4b7a      	ldr	r3, [pc, #488]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf6:	4b77      	ldr	r3, [pc, #476]	; (8003dd4 <HAL_RCC_OscConfig+0x474>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d118      	bne.n	8003c34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c02:	4b74      	ldr	r3, [pc, #464]	; (8003dd4 <HAL_RCC_OscConfig+0x474>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a73      	ldr	r2, [pc, #460]	; (8003dd4 <HAL_RCC_OscConfig+0x474>)
 8003c08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c0e:	f7fd f8d9 	bl	8000dc4 <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c16:	f7fd f8d5 	bl	8000dc4 <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e10c      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c28:	4b6a      	ldr	r3, [pc, #424]	; (8003dd4 <HAL_RCC_OscConfig+0x474>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d106      	bne.n	8003c4a <HAL_RCC_OscConfig+0x2ea>
 8003c3c:	4b64      	ldr	r3, [pc, #400]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c40:	4a63      	ldr	r2, [pc, #396]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c42:	f043 0301 	orr.w	r3, r3, #1
 8003c46:	6713      	str	r3, [r2, #112]	; 0x70
 8003c48:	e01c      	b.n	8003c84 <HAL_RCC_OscConfig+0x324>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b05      	cmp	r3, #5
 8003c50:	d10c      	bne.n	8003c6c <HAL_RCC_OscConfig+0x30c>
 8003c52:	4b5f      	ldr	r3, [pc, #380]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c56:	4a5e      	ldr	r2, [pc, #376]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c58:	f043 0304 	orr.w	r3, r3, #4
 8003c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8003c5e:	4b5c      	ldr	r3, [pc, #368]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c62:	4a5b      	ldr	r2, [pc, #364]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c64:	f043 0301 	orr.w	r3, r3, #1
 8003c68:	6713      	str	r3, [r2, #112]	; 0x70
 8003c6a:	e00b      	b.n	8003c84 <HAL_RCC_OscConfig+0x324>
 8003c6c:	4b58      	ldr	r3, [pc, #352]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	4a57      	ldr	r2, [pc, #348]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c72:	f023 0301 	bic.w	r3, r3, #1
 8003c76:	6713      	str	r3, [r2, #112]	; 0x70
 8003c78:	4b55      	ldr	r3, [pc, #340]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7c:	4a54      	ldr	r2, [pc, #336]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003c7e:	f023 0304 	bic.w	r3, r3, #4
 8003c82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d015      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c8c:	f7fd f89a 	bl	8000dc4 <HAL_GetTick>
 8003c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c92:	e00a      	b.n	8003caa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c94:	f7fd f896 	bl	8000dc4 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e0cb      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003caa:	4b49      	ldr	r3, [pc, #292]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0ee      	beq.n	8003c94 <HAL_RCC_OscConfig+0x334>
 8003cb6:	e014      	b.n	8003ce2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb8:	f7fd f884 	bl	8000dc4 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cbe:	e00a      	b.n	8003cd6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cc0:	f7fd f880 	bl	8000dc4 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e0b5      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cd6:	4b3e      	ldr	r3, [pc, #248]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cda:	f003 0302 	and.w	r3, r3, #2
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1ee      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ce2:	7dfb      	ldrb	r3, [r7, #23]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d105      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ce8:	4b39      	ldr	r3, [pc, #228]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	4a38      	ldr	r2, [pc, #224]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cf2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	699b      	ldr	r3, [r3, #24]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 80a1 	beq.w	8003e40 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cfe:	4b34      	ldr	r3, [pc, #208]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	f003 030c 	and.w	r3, r3, #12
 8003d06:	2b08      	cmp	r3, #8
 8003d08:	d05c      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	699b      	ldr	r3, [r3, #24]
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d141      	bne.n	8003d96 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d12:	4b31      	ldr	r3, [pc, #196]	; (8003dd8 <HAL_RCC_OscConfig+0x478>)
 8003d14:	2200      	movs	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d18:	f7fd f854 	bl	8000dc4 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d20:	f7fd f850 	bl	8000dc4 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e087      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d32:	4b27      	ldr	r3, [pc, #156]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69da      	ldr	r2, [r3, #28]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6a1b      	ldr	r3, [r3, #32]
 8003d46:	431a      	orrs	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4c:	019b      	lsls	r3, r3, #6
 8003d4e:	431a      	orrs	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	085b      	lsrs	r3, r3, #1
 8003d56:	3b01      	subs	r3, #1
 8003d58:	041b      	lsls	r3, r3, #16
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d60:	061b      	lsls	r3, r3, #24
 8003d62:	491b      	ldr	r1, [pc, #108]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d68:	4b1b      	ldr	r3, [pc, #108]	; (8003dd8 <HAL_RCC_OscConfig+0x478>)
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d6e:	f7fd f829 	bl	8000dc4 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d74:	e008      	b.n	8003d88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d76:	f7fd f825 	bl	8000dc4 <HAL_GetTick>
 8003d7a:	4602      	mov	r2, r0
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d901      	bls.n	8003d88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d84:	2303      	movs	r3, #3
 8003d86:	e05c      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d88:	4b11      	ldr	r3, [pc, #68]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d0f0      	beq.n	8003d76 <HAL_RCC_OscConfig+0x416>
 8003d94:	e054      	b.n	8003e40 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d96:	4b10      	ldr	r3, [pc, #64]	; (8003dd8 <HAL_RCC_OscConfig+0x478>)
 8003d98:	2200      	movs	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9c:	f7fd f812 	bl	8000dc4 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da4:	f7fd f80e 	bl	8000dc4 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b02      	cmp	r3, #2
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e045      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db6:	4b06      	ldr	r3, [pc, #24]	; (8003dd0 <HAL_RCC_OscConfig+0x470>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1f0      	bne.n	8003da4 <HAL_RCC_OscConfig+0x444>
 8003dc2:	e03d      	b.n	8003e40 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d107      	bne.n	8003ddc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e038      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	40007000 	.word	0x40007000
 8003dd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ddc:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <HAL_RCC_OscConfig+0x4ec>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d028      	beq.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d121      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d11a      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d111      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	085b      	lsrs	r3, r3, #1
 8003e24:	3b01      	subs	r3, #1
 8003e26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d107      	bne.n	8003e3c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d001      	beq.n	8003e40 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	40023800 	.word	0x40023800

08003e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
 8003e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e0cc      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e64:	4b68      	ldr	r3, [pc, #416]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d90c      	bls.n	8003e8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e72:	4b65      	ldr	r3, [pc, #404]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e7a:	4b63      	ldr	r3, [pc, #396]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d001      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e0b8      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d020      	beq.n	8003eda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f003 0304 	and.w	r3, r3, #4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d005      	beq.n	8003eb0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ea4:	4b59      	ldr	r3, [pc, #356]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	4a58      	ldr	r2, [pc, #352]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003eaa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0308 	and.w	r3, r3, #8
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d005      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ebc:	4b53      	ldr	r3, [pc, #332]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4a52      	ldr	r2, [pc, #328]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ec2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ec6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec8:	4b50      	ldr	r3, [pc, #320]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	494d      	ldr	r1, [pc, #308]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d044      	beq.n	8003f70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d107      	bne.n	8003efe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eee:	4b47      	ldr	r3, [pc, #284]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d119      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e07f      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d003      	beq.n	8003f0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d107      	bne.n	8003f1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f0e:	4b3f      	ldr	r3, [pc, #252]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d109      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e06f      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f1e:	4b3b      	ldr	r3, [pc, #236]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e067      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f2e:	4b37      	ldr	r3, [pc, #220]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f023 0203 	bic.w	r2, r3, #3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	4934      	ldr	r1, [pc, #208]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f40:	f7fc ff40 	bl	8000dc4 <HAL_GetTick>
 8003f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f46:	e00a      	b.n	8003f5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f48:	f7fc ff3c 	bl	8000dc4 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d901      	bls.n	8003f5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e04f      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f5e:	4b2b      	ldr	r3, [pc, #172]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 020c 	and.w	r2, r3, #12
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d1eb      	bne.n	8003f48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f70:	4b25      	ldr	r3, [pc, #148]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f003 0307 	and.w	r3, r3, #7
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d20c      	bcs.n	8003f98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f7e:	4b22      	ldr	r3, [pc, #136]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f86:	4b20      	ldr	r3, [pc, #128]	; (8004008 <HAL_RCC_ClockConfig+0x1b8>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d001      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e032      	b.n	8003ffe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d008      	beq.n	8003fb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fa4:	4b19      	ldr	r3, [pc, #100]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	4916      	ldr	r1, [pc, #88]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d009      	beq.n	8003fd6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003fc2:	4b12      	ldr	r3, [pc, #72]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	00db      	lsls	r3, r3, #3
 8003fd0:	490e      	ldr	r1, [pc, #56]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fd6:	f000 f821 	bl	800401c <HAL_RCC_GetSysClockFreq>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	4b0b      	ldr	r3, [pc, #44]	; (800400c <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	490a      	ldr	r1, [pc, #40]	; (8004010 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe8:	5ccb      	ldrb	r3, [r1, r3]
 8003fea:	fa22 f303 	lsr.w	r3, r2, r3
 8003fee:	4a09      	ldr	r2, [pc, #36]	; (8004014 <HAL_RCC_ClockConfig+0x1c4>)
 8003ff0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ff2:	4b09      	ldr	r3, [pc, #36]	; (8004018 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7fc fea0 	bl	8000d3c <HAL_InitTick>

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3710      	adds	r7, #16
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	40023c00 	.word	0x40023c00
 800400c:	40023800 	.word	0x40023800
 8004010:	08004884 	.word	0x08004884
 8004014:	20000020 	.word	0x20000020
 8004018:	20000024 	.word	0x20000024

0800401c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800401c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004020:	b094      	sub	sp, #80	; 0x50
 8004022:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	647b      	str	r3, [r7, #68]	; 0x44
 8004028:	2300      	movs	r3, #0
 800402a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800402c:	2300      	movs	r3, #0
 800402e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004030:	2300      	movs	r3, #0
 8004032:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004034:	4b79      	ldr	r3, [pc, #484]	; (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 8004036:	689b      	ldr	r3, [r3, #8]
 8004038:	f003 030c 	and.w	r3, r3, #12
 800403c:	2b08      	cmp	r3, #8
 800403e:	d00d      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x40>
 8004040:	2b08      	cmp	r3, #8
 8004042:	f200 80e1 	bhi.w	8004208 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_RCC_GetSysClockFreq+0x34>
 800404a:	2b04      	cmp	r3, #4
 800404c:	d003      	beq.n	8004056 <HAL_RCC_GetSysClockFreq+0x3a>
 800404e:	e0db      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004050:	4b73      	ldr	r3, [pc, #460]	; (8004220 <HAL_RCC_GetSysClockFreq+0x204>)
 8004052:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004054:	e0db      	b.n	800420e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004056:	4b73      	ldr	r3, [pc, #460]	; (8004224 <HAL_RCC_GetSysClockFreq+0x208>)
 8004058:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800405a:	e0d8      	b.n	800420e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800405c:	4b6f      	ldr	r3, [pc, #444]	; (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004064:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004066:	4b6d      	ldr	r3, [pc, #436]	; (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d063      	beq.n	800413a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004072:	4b6a      	ldr	r3, [pc, #424]	; (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	099b      	lsrs	r3, r3, #6
 8004078:	2200      	movs	r2, #0
 800407a:	63bb      	str	r3, [r7, #56]	; 0x38
 800407c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800407e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004080:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004084:	633b      	str	r3, [r7, #48]	; 0x30
 8004086:	2300      	movs	r3, #0
 8004088:	637b      	str	r3, [r7, #52]	; 0x34
 800408a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800408e:	4622      	mov	r2, r4
 8004090:	462b      	mov	r3, r5
 8004092:	f04f 0000 	mov.w	r0, #0
 8004096:	f04f 0100 	mov.w	r1, #0
 800409a:	0159      	lsls	r1, r3, #5
 800409c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040a0:	0150      	lsls	r0, r2, #5
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4621      	mov	r1, r4
 80040a8:	1a51      	subs	r1, r2, r1
 80040aa:	6139      	str	r1, [r7, #16]
 80040ac:	4629      	mov	r1, r5
 80040ae:	eb63 0301 	sbc.w	r3, r3, r1
 80040b2:	617b      	str	r3, [r7, #20]
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040c0:	4659      	mov	r1, fp
 80040c2:	018b      	lsls	r3, r1, #6
 80040c4:	4651      	mov	r1, sl
 80040c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040ca:	4651      	mov	r1, sl
 80040cc:	018a      	lsls	r2, r1, #6
 80040ce:	4651      	mov	r1, sl
 80040d0:	ebb2 0801 	subs.w	r8, r2, r1
 80040d4:	4659      	mov	r1, fp
 80040d6:	eb63 0901 	sbc.w	r9, r3, r1
 80040da:	f04f 0200 	mov.w	r2, #0
 80040de:	f04f 0300 	mov.w	r3, #0
 80040e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040ee:	4690      	mov	r8, r2
 80040f0:	4699      	mov	r9, r3
 80040f2:	4623      	mov	r3, r4
 80040f4:	eb18 0303 	adds.w	r3, r8, r3
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	462b      	mov	r3, r5
 80040fc:	eb49 0303 	adc.w	r3, r9, r3
 8004100:	60fb      	str	r3, [r7, #12]
 8004102:	f04f 0200 	mov.w	r2, #0
 8004106:	f04f 0300 	mov.w	r3, #0
 800410a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800410e:	4629      	mov	r1, r5
 8004110:	024b      	lsls	r3, r1, #9
 8004112:	4621      	mov	r1, r4
 8004114:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004118:	4621      	mov	r1, r4
 800411a:	024a      	lsls	r2, r1, #9
 800411c:	4610      	mov	r0, r2
 800411e:	4619      	mov	r1, r3
 8004120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004122:	2200      	movs	r2, #0
 8004124:	62bb      	str	r3, [r7, #40]	; 0x28
 8004126:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004128:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800412c:	f7fc f854 	bl	80001d8 <__aeabi_uldivmod>
 8004130:	4602      	mov	r2, r0
 8004132:	460b      	mov	r3, r1
 8004134:	4613      	mov	r3, r2
 8004136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004138:	e058      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800413a:	4b38      	ldr	r3, [pc, #224]	; (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	099b      	lsrs	r3, r3, #6
 8004140:	2200      	movs	r2, #0
 8004142:	4618      	mov	r0, r3
 8004144:	4611      	mov	r1, r2
 8004146:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800414a:	623b      	str	r3, [r7, #32]
 800414c:	2300      	movs	r3, #0
 800414e:	627b      	str	r3, [r7, #36]	; 0x24
 8004150:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004154:	4642      	mov	r2, r8
 8004156:	464b      	mov	r3, r9
 8004158:	f04f 0000 	mov.w	r0, #0
 800415c:	f04f 0100 	mov.w	r1, #0
 8004160:	0159      	lsls	r1, r3, #5
 8004162:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004166:	0150      	lsls	r0, r2, #5
 8004168:	4602      	mov	r2, r0
 800416a:	460b      	mov	r3, r1
 800416c:	4641      	mov	r1, r8
 800416e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004172:	4649      	mov	r1, r9
 8004174:	eb63 0b01 	sbc.w	fp, r3, r1
 8004178:	f04f 0200 	mov.w	r2, #0
 800417c:	f04f 0300 	mov.w	r3, #0
 8004180:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004184:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004188:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800418c:	ebb2 040a 	subs.w	r4, r2, sl
 8004190:	eb63 050b 	sbc.w	r5, r3, fp
 8004194:	f04f 0200 	mov.w	r2, #0
 8004198:	f04f 0300 	mov.w	r3, #0
 800419c:	00eb      	lsls	r3, r5, #3
 800419e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041a2:	00e2      	lsls	r2, r4, #3
 80041a4:	4614      	mov	r4, r2
 80041a6:	461d      	mov	r5, r3
 80041a8:	4643      	mov	r3, r8
 80041aa:	18e3      	adds	r3, r4, r3
 80041ac:	603b      	str	r3, [r7, #0]
 80041ae:	464b      	mov	r3, r9
 80041b0:	eb45 0303 	adc.w	r3, r5, r3
 80041b4:	607b      	str	r3, [r7, #4]
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	f04f 0300 	mov.w	r3, #0
 80041be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041c2:	4629      	mov	r1, r5
 80041c4:	028b      	lsls	r3, r1, #10
 80041c6:	4621      	mov	r1, r4
 80041c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041cc:	4621      	mov	r1, r4
 80041ce:	028a      	lsls	r2, r1, #10
 80041d0:	4610      	mov	r0, r2
 80041d2:	4619      	mov	r1, r3
 80041d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041d6:	2200      	movs	r2, #0
 80041d8:	61bb      	str	r3, [r7, #24]
 80041da:	61fa      	str	r2, [r7, #28]
 80041dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041e0:	f7fb fffa 	bl	80001d8 <__aeabi_uldivmod>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4613      	mov	r3, r2
 80041ea:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <HAL_RCC_GetSysClockFreq+0x200>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	3301      	adds	r3, #1
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80041fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80041fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004200:	fbb2 f3f3 	udiv	r3, r2, r3
 8004204:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004206:	e002      	b.n	800420e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <HAL_RCC_GetSysClockFreq+0x204>)
 800420a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800420c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800420e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004210:	4618      	mov	r0, r3
 8004212:	3750      	adds	r7, #80	; 0x50
 8004214:	46bd      	mov	sp, r7
 8004216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800421a:	bf00      	nop
 800421c:	40023800 	.word	0x40023800
 8004220:	00f42400 	.word	0x00f42400
 8004224:	007a1200 	.word	0x007a1200

08004228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800422c:	4b03      	ldr	r3, [pc, #12]	; (800423c <HAL_RCC_GetHCLKFreq+0x14>)
 800422e:	681b      	ldr	r3, [r3, #0]
}
 8004230:	4618      	mov	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	20000020 	.word	0x20000020

08004240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004244:	f7ff fff0 	bl	8004228 <HAL_RCC_GetHCLKFreq>
 8004248:	4602      	mov	r2, r0
 800424a:	4b05      	ldr	r3, [pc, #20]	; (8004260 <HAL_RCC_GetPCLK1Freq+0x20>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	0a9b      	lsrs	r3, r3, #10
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	4903      	ldr	r1, [pc, #12]	; (8004264 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004256:	5ccb      	ldrb	r3, [r1, r3]
 8004258:	fa22 f303 	lsr.w	r3, r2, r3
}
 800425c:	4618      	mov	r0, r3
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40023800 	.word	0x40023800
 8004264:	08004894 	.word	0x08004894

08004268 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800426c:	f7ff ffdc 	bl	8004228 <HAL_RCC_GetHCLKFreq>
 8004270:	4602      	mov	r2, r0
 8004272:	4b05      	ldr	r3, [pc, #20]	; (8004288 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	0b5b      	lsrs	r3, r3, #13
 8004278:	f003 0307 	and.w	r3, r3, #7
 800427c:	4903      	ldr	r1, [pc, #12]	; (800428c <HAL_RCC_GetPCLK2Freq+0x24>)
 800427e:	5ccb      	ldrb	r3, [r1, r3]
 8004280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004284:	4618      	mov	r0, r3
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40023800 	.word	0x40023800
 800428c:	08004894 	.word	0x08004894

08004290 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d101      	bne.n	80042a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	e03f      	b.n	8004322 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d106      	bne.n	80042bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f7fc fc54 	bl	8000b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2224      	movs	r2, #36	; 0x24
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68da      	ldr	r2, [r3, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f000 f829 	bl	800432c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	695a      	ldr	r2, [r3, #20]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004308:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2220      	movs	r2, #32
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
	...

0800432c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800432c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004330:	b0c0      	sub	sp, #256	; 0x100
 8004332:	af00      	add	r7, sp, #0
 8004334:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	691b      	ldr	r3, [r3, #16]
 8004340:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004348:	68d9      	ldr	r1, [r3, #12]
 800434a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	ea40 0301 	orr.w	r3, r0, r1
 8004354:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004360:	691b      	ldr	r3, [r3, #16]
 8004362:	431a      	orrs	r2, r3
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004368:	695b      	ldr	r3, [r3, #20]
 800436a:	431a      	orrs	r2, r3
 800436c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	4313      	orrs	r3, r2
 8004374:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004384:	f021 010c 	bic.w	r1, r1, #12
 8004388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004392:	430b      	orrs	r3, r1
 8004394:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80043a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a6:	6999      	ldr	r1, [r3, #24]
 80043a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	ea40 0301 	orr.w	r3, r0, r1
 80043b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	4b8f      	ldr	r3, [pc, #572]	; (80045f8 <UART_SetConfig+0x2cc>)
 80043bc:	429a      	cmp	r2, r3
 80043be:	d005      	beq.n	80043cc <UART_SetConfig+0xa0>
 80043c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4b8d      	ldr	r3, [pc, #564]	; (80045fc <UART_SetConfig+0x2d0>)
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d104      	bne.n	80043d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043cc:	f7ff ff4c 	bl	8004268 <HAL_RCC_GetPCLK2Freq>
 80043d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80043d4:	e003      	b.n	80043de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043d6:	f7ff ff33 	bl	8004240 <HAL_RCC_GetPCLK1Freq>
 80043da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e2:	69db      	ldr	r3, [r3, #28]
 80043e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043e8:	f040 810c 	bne.w	8004604 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80043f0:	2200      	movs	r2, #0
 80043f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80043f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80043fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80043fe:	4622      	mov	r2, r4
 8004400:	462b      	mov	r3, r5
 8004402:	1891      	adds	r1, r2, r2
 8004404:	65b9      	str	r1, [r7, #88]	; 0x58
 8004406:	415b      	adcs	r3, r3
 8004408:	65fb      	str	r3, [r7, #92]	; 0x5c
 800440a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800440e:	4621      	mov	r1, r4
 8004410:	eb12 0801 	adds.w	r8, r2, r1
 8004414:	4629      	mov	r1, r5
 8004416:	eb43 0901 	adc.w	r9, r3, r1
 800441a:	f04f 0200 	mov.w	r2, #0
 800441e:	f04f 0300 	mov.w	r3, #0
 8004422:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004426:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800442a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800442e:	4690      	mov	r8, r2
 8004430:	4699      	mov	r9, r3
 8004432:	4623      	mov	r3, r4
 8004434:	eb18 0303 	adds.w	r3, r8, r3
 8004438:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800443c:	462b      	mov	r3, r5
 800443e:	eb49 0303 	adc.w	r3, r9, r3
 8004442:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004452:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004456:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800445a:	460b      	mov	r3, r1
 800445c:	18db      	adds	r3, r3, r3
 800445e:	653b      	str	r3, [r7, #80]	; 0x50
 8004460:	4613      	mov	r3, r2
 8004462:	eb42 0303 	adc.w	r3, r2, r3
 8004466:	657b      	str	r3, [r7, #84]	; 0x54
 8004468:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800446c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004470:	f7fb feb2 	bl	80001d8 <__aeabi_uldivmod>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	4b61      	ldr	r3, [pc, #388]	; (8004600 <UART_SetConfig+0x2d4>)
 800447a:	fba3 2302 	umull	r2, r3, r3, r2
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	011c      	lsls	r4, r3, #4
 8004482:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004486:	2200      	movs	r2, #0
 8004488:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800448c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004490:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004494:	4642      	mov	r2, r8
 8004496:	464b      	mov	r3, r9
 8004498:	1891      	adds	r1, r2, r2
 800449a:	64b9      	str	r1, [r7, #72]	; 0x48
 800449c:	415b      	adcs	r3, r3
 800449e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80044a4:	4641      	mov	r1, r8
 80044a6:	eb12 0a01 	adds.w	sl, r2, r1
 80044aa:	4649      	mov	r1, r9
 80044ac:	eb43 0b01 	adc.w	fp, r3, r1
 80044b0:	f04f 0200 	mov.w	r2, #0
 80044b4:	f04f 0300 	mov.w	r3, #0
 80044b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044c4:	4692      	mov	sl, r2
 80044c6:	469b      	mov	fp, r3
 80044c8:	4643      	mov	r3, r8
 80044ca:	eb1a 0303 	adds.w	r3, sl, r3
 80044ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044d2:	464b      	mov	r3, r9
 80044d4:	eb4b 0303 	adc.w	r3, fp, r3
 80044d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80044dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80044ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80044f0:	460b      	mov	r3, r1
 80044f2:	18db      	adds	r3, r3, r3
 80044f4:	643b      	str	r3, [r7, #64]	; 0x40
 80044f6:	4613      	mov	r3, r2
 80044f8:	eb42 0303 	adc.w	r3, r2, r3
 80044fc:	647b      	str	r3, [r7, #68]	; 0x44
 80044fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004502:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004506:	f7fb fe67 	bl	80001d8 <__aeabi_uldivmod>
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	4611      	mov	r1, r2
 8004510:	4b3b      	ldr	r3, [pc, #236]	; (8004600 <UART_SetConfig+0x2d4>)
 8004512:	fba3 2301 	umull	r2, r3, r3, r1
 8004516:	095b      	lsrs	r3, r3, #5
 8004518:	2264      	movs	r2, #100	; 0x64
 800451a:	fb02 f303 	mul.w	r3, r2, r3
 800451e:	1acb      	subs	r3, r1, r3
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004526:	4b36      	ldr	r3, [pc, #216]	; (8004600 <UART_SetConfig+0x2d4>)
 8004528:	fba3 2302 	umull	r2, r3, r3, r2
 800452c:	095b      	lsrs	r3, r3, #5
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004534:	441c      	add	r4, r3
 8004536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800453a:	2200      	movs	r2, #0
 800453c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004540:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004544:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004548:	4642      	mov	r2, r8
 800454a:	464b      	mov	r3, r9
 800454c:	1891      	adds	r1, r2, r2
 800454e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004550:	415b      	adcs	r3, r3
 8004552:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004554:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004558:	4641      	mov	r1, r8
 800455a:	1851      	adds	r1, r2, r1
 800455c:	6339      	str	r1, [r7, #48]	; 0x30
 800455e:	4649      	mov	r1, r9
 8004560:	414b      	adcs	r3, r1
 8004562:	637b      	str	r3, [r7, #52]	; 0x34
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	f04f 0300 	mov.w	r3, #0
 800456c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004570:	4659      	mov	r1, fp
 8004572:	00cb      	lsls	r3, r1, #3
 8004574:	4651      	mov	r1, sl
 8004576:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800457a:	4651      	mov	r1, sl
 800457c:	00ca      	lsls	r2, r1, #3
 800457e:	4610      	mov	r0, r2
 8004580:	4619      	mov	r1, r3
 8004582:	4603      	mov	r3, r0
 8004584:	4642      	mov	r2, r8
 8004586:	189b      	adds	r3, r3, r2
 8004588:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800458c:	464b      	mov	r3, r9
 800458e:	460a      	mov	r2, r1
 8004590:	eb42 0303 	adc.w	r3, r2, r3
 8004594:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80045a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80045a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80045ac:	460b      	mov	r3, r1
 80045ae:	18db      	adds	r3, r3, r3
 80045b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80045b2:	4613      	mov	r3, r2
 80045b4:	eb42 0303 	adc.w	r3, r2, r3
 80045b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80045be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80045c2:	f7fb fe09 	bl	80001d8 <__aeabi_uldivmod>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4b0d      	ldr	r3, [pc, #52]	; (8004600 <UART_SetConfig+0x2d4>)
 80045cc:	fba3 1302 	umull	r1, r3, r3, r2
 80045d0:	095b      	lsrs	r3, r3, #5
 80045d2:	2164      	movs	r1, #100	; 0x64
 80045d4:	fb01 f303 	mul.w	r3, r1, r3
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	00db      	lsls	r3, r3, #3
 80045dc:	3332      	adds	r3, #50	; 0x32
 80045de:	4a08      	ldr	r2, [pc, #32]	; (8004600 <UART_SetConfig+0x2d4>)
 80045e0:	fba2 2303 	umull	r2, r3, r2, r3
 80045e4:	095b      	lsrs	r3, r3, #5
 80045e6:	f003 0207 	and.w	r2, r3, #7
 80045ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4422      	add	r2, r4
 80045f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045f4:	e105      	b.n	8004802 <UART_SetConfig+0x4d6>
 80045f6:	bf00      	nop
 80045f8:	40011000 	.word	0x40011000
 80045fc:	40011400 	.word	0x40011400
 8004600:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004608:	2200      	movs	r2, #0
 800460a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800460e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004612:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004616:	4642      	mov	r2, r8
 8004618:	464b      	mov	r3, r9
 800461a:	1891      	adds	r1, r2, r2
 800461c:	6239      	str	r1, [r7, #32]
 800461e:	415b      	adcs	r3, r3
 8004620:	627b      	str	r3, [r7, #36]	; 0x24
 8004622:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004626:	4641      	mov	r1, r8
 8004628:	1854      	adds	r4, r2, r1
 800462a:	4649      	mov	r1, r9
 800462c:	eb43 0501 	adc.w	r5, r3, r1
 8004630:	f04f 0200 	mov.w	r2, #0
 8004634:	f04f 0300 	mov.w	r3, #0
 8004638:	00eb      	lsls	r3, r5, #3
 800463a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800463e:	00e2      	lsls	r2, r4, #3
 8004640:	4614      	mov	r4, r2
 8004642:	461d      	mov	r5, r3
 8004644:	4643      	mov	r3, r8
 8004646:	18e3      	adds	r3, r4, r3
 8004648:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800464c:	464b      	mov	r3, r9
 800464e:	eb45 0303 	adc.w	r3, r5, r3
 8004652:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004662:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	f04f 0300 	mov.w	r3, #0
 800466e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004672:	4629      	mov	r1, r5
 8004674:	008b      	lsls	r3, r1, #2
 8004676:	4621      	mov	r1, r4
 8004678:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800467c:	4621      	mov	r1, r4
 800467e:	008a      	lsls	r2, r1, #2
 8004680:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004684:	f7fb fda8 	bl	80001d8 <__aeabi_uldivmod>
 8004688:	4602      	mov	r2, r0
 800468a:	460b      	mov	r3, r1
 800468c:	4b60      	ldr	r3, [pc, #384]	; (8004810 <UART_SetConfig+0x4e4>)
 800468e:	fba3 2302 	umull	r2, r3, r3, r2
 8004692:	095b      	lsrs	r3, r3, #5
 8004694:	011c      	lsls	r4, r3, #4
 8004696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800469a:	2200      	movs	r2, #0
 800469c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80046a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80046a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80046a8:	4642      	mov	r2, r8
 80046aa:	464b      	mov	r3, r9
 80046ac:	1891      	adds	r1, r2, r2
 80046ae:	61b9      	str	r1, [r7, #24]
 80046b0:	415b      	adcs	r3, r3
 80046b2:	61fb      	str	r3, [r7, #28]
 80046b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046b8:	4641      	mov	r1, r8
 80046ba:	1851      	adds	r1, r2, r1
 80046bc:	6139      	str	r1, [r7, #16]
 80046be:	4649      	mov	r1, r9
 80046c0:	414b      	adcs	r3, r1
 80046c2:	617b      	str	r3, [r7, #20]
 80046c4:	f04f 0200 	mov.w	r2, #0
 80046c8:	f04f 0300 	mov.w	r3, #0
 80046cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046d0:	4659      	mov	r1, fp
 80046d2:	00cb      	lsls	r3, r1, #3
 80046d4:	4651      	mov	r1, sl
 80046d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046da:	4651      	mov	r1, sl
 80046dc:	00ca      	lsls	r2, r1, #3
 80046de:	4610      	mov	r0, r2
 80046e0:	4619      	mov	r1, r3
 80046e2:	4603      	mov	r3, r0
 80046e4:	4642      	mov	r2, r8
 80046e6:	189b      	adds	r3, r3, r2
 80046e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80046ec:	464b      	mov	r3, r9
 80046ee:	460a      	mov	r2, r1
 80046f0:	eb42 0303 	adc.w	r3, r2, r3
 80046f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80046f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	67bb      	str	r3, [r7, #120]	; 0x78
 8004702:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004704:	f04f 0200 	mov.w	r2, #0
 8004708:	f04f 0300 	mov.w	r3, #0
 800470c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004710:	4649      	mov	r1, r9
 8004712:	008b      	lsls	r3, r1, #2
 8004714:	4641      	mov	r1, r8
 8004716:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800471a:	4641      	mov	r1, r8
 800471c:	008a      	lsls	r2, r1, #2
 800471e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004722:	f7fb fd59 	bl	80001d8 <__aeabi_uldivmod>
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	4b39      	ldr	r3, [pc, #228]	; (8004810 <UART_SetConfig+0x4e4>)
 800472c:	fba3 1302 	umull	r1, r3, r3, r2
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	2164      	movs	r1, #100	; 0x64
 8004734:	fb01 f303 	mul.w	r3, r1, r3
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	011b      	lsls	r3, r3, #4
 800473c:	3332      	adds	r3, #50	; 0x32
 800473e:	4a34      	ldr	r2, [pc, #208]	; (8004810 <UART_SetConfig+0x4e4>)
 8004740:	fba2 2303 	umull	r2, r3, r2, r3
 8004744:	095b      	lsrs	r3, r3, #5
 8004746:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800474a:	441c      	add	r4, r3
 800474c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004750:	2200      	movs	r2, #0
 8004752:	673b      	str	r3, [r7, #112]	; 0x70
 8004754:	677a      	str	r2, [r7, #116]	; 0x74
 8004756:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800475a:	4642      	mov	r2, r8
 800475c:	464b      	mov	r3, r9
 800475e:	1891      	adds	r1, r2, r2
 8004760:	60b9      	str	r1, [r7, #8]
 8004762:	415b      	adcs	r3, r3
 8004764:	60fb      	str	r3, [r7, #12]
 8004766:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800476a:	4641      	mov	r1, r8
 800476c:	1851      	adds	r1, r2, r1
 800476e:	6039      	str	r1, [r7, #0]
 8004770:	4649      	mov	r1, r9
 8004772:	414b      	adcs	r3, r1
 8004774:	607b      	str	r3, [r7, #4]
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004782:	4659      	mov	r1, fp
 8004784:	00cb      	lsls	r3, r1, #3
 8004786:	4651      	mov	r1, sl
 8004788:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800478c:	4651      	mov	r1, sl
 800478e:	00ca      	lsls	r2, r1, #3
 8004790:	4610      	mov	r0, r2
 8004792:	4619      	mov	r1, r3
 8004794:	4603      	mov	r3, r0
 8004796:	4642      	mov	r2, r8
 8004798:	189b      	adds	r3, r3, r2
 800479a:	66bb      	str	r3, [r7, #104]	; 0x68
 800479c:	464b      	mov	r3, r9
 800479e:	460a      	mov	r2, r1
 80047a0:	eb42 0303 	adc.w	r3, r2, r3
 80047a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	663b      	str	r3, [r7, #96]	; 0x60
 80047b0:	667a      	str	r2, [r7, #100]	; 0x64
 80047b2:	f04f 0200 	mov.w	r2, #0
 80047b6:	f04f 0300 	mov.w	r3, #0
 80047ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80047be:	4649      	mov	r1, r9
 80047c0:	008b      	lsls	r3, r1, #2
 80047c2:	4641      	mov	r1, r8
 80047c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047c8:	4641      	mov	r1, r8
 80047ca:	008a      	lsls	r2, r1, #2
 80047cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80047d0:	f7fb fd02 	bl	80001d8 <__aeabi_uldivmod>
 80047d4:	4602      	mov	r2, r0
 80047d6:	460b      	mov	r3, r1
 80047d8:	4b0d      	ldr	r3, [pc, #52]	; (8004810 <UART_SetConfig+0x4e4>)
 80047da:	fba3 1302 	umull	r1, r3, r3, r2
 80047de:	095b      	lsrs	r3, r3, #5
 80047e0:	2164      	movs	r1, #100	; 0x64
 80047e2:	fb01 f303 	mul.w	r3, r1, r3
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	3332      	adds	r3, #50	; 0x32
 80047ec:	4a08      	ldr	r2, [pc, #32]	; (8004810 <UART_SetConfig+0x4e4>)
 80047ee:	fba2 2303 	umull	r2, r3, r2, r3
 80047f2:	095b      	lsrs	r3, r3, #5
 80047f4:	f003 020f 	and.w	r2, r3, #15
 80047f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4422      	add	r2, r4
 8004800:	609a      	str	r2, [r3, #8]
}
 8004802:	bf00      	nop
 8004804:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004808:	46bd      	mov	sp, r7
 800480a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800480e:	bf00      	nop
 8004810:	51eb851f 	.word	0x51eb851f

08004814 <__libc_init_array>:
 8004814:	b570      	push	{r4, r5, r6, lr}
 8004816:	4d0d      	ldr	r5, [pc, #52]	; (800484c <__libc_init_array+0x38>)
 8004818:	4c0d      	ldr	r4, [pc, #52]	; (8004850 <__libc_init_array+0x3c>)
 800481a:	1b64      	subs	r4, r4, r5
 800481c:	10a4      	asrs	r4, r4, #2
 800481e:	2600      	movs	r6, #0
 8004820:	42a6      	cmp	r6, r4
 8004822:	d109      	bne.n	8004838 <__libc_init_array+0x24>
 8004824:	4d0b      	ldr	r5, [pc, #44]	; (8004854 <__libc_init_array+0x40>)
 8004826:	4c0c      	ldr	r4, [pc, #48]	; (8004858 <__libc_init_array+0x44>)
 8004828:	f000 f820 	bl	800486c <_init>
 800482c:	1b64      	subs	r4, r4, r5
 800482e:	10a4      	asrs	r4, r4, #2
 8004830:	2600      	movs	r6, #0
 8004832:	42a6      	cmp	r6, r4
 8004834:	d105      	bne.n	8004842 <__libc_init_array+0x2e>
 8004836:	bd70      	pop	{r4, r5, r6, pc}
 8004838:	f855 3b04 	ldr.w	r3, [r5], #4
 800483c:	4798      	blx	r3
 800483e:	3601      	adds	r6, #1
 8004840:	e7ee      	b.n	8004820 <__libc_init_array+0xc>
 8004842:	f855 3b04 	ldr.w	r3, [r5], #4
 8004846:	4798      	blx	r3
 8004848:	3601      	adds	r6, #1
 800484a:	e7f2      	b.n	8004832 <__libc_init_array+0x1e>
 800484c:	080048a4 	.word	0x080048a4
 8004850:	080048a4 	.word	0x080048a4
 8004854:	080048a4 	.word	0x080048a4
 8004858:	080048a8 	.word	0x080048a8

0800485c <memset>:
 800485c:	4402      	add	r2, r0
 800485e:	4603      	mov	r3, r0
 8004860:	4293      	cmp	r3, r2
 8004862:	d100      	bne.n	8004866 <memset+0xa>
 8004864:	4770      	bx	lr
 8004866:	f803 1b01 	strb.w	r1, [r3], #1
 800486a:	e7f9      	b.n	8004860 <memset+0x4>

0800486c <_init>:
 800486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486e:	bf00      	nop
 8004870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004872:	bc08      	pop	{r3}
 8004874:	469e      	mov	lr, r3
 8004876:	4770      	bx	lr

08004878 <_fini>:
 8004878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800487a:	bf00      	nop
 800487c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800487e:	bc08      	pop	{r3}
 8004880:	469e      	mov	lr, r3
 8004882:	4770      	bx	lr
