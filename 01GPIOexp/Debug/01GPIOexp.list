
01GPIOexp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032a4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  0800343c  0800343c  0001343c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800345c  0800345c  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  0800345c  0800345c  0001345c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003464  08003464  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003464  08003464  00013464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003468  08003468  00013468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  0800346c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000130  20000020  0800348c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  0800348c  00020150  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3eb  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a7f  00000000  00000000  0002d43b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  0002eec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b68  00000000  00000000  0002fac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000157ab  00000000  00000000  00030628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d612  00000000  00000000  00045dd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a1a0  00000000  00000000  000533e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dd585  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032b8  00000000  00000000  000dd5d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000020 	.word	0x20000020
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003424 	.word	0x08003424

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000024 	.word	0x20000024
 80001d4:	08003424 	.word	0x08003424

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 fc95 	bl	8000e04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f957 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 fa7f 	bl	80009e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e2:	f000 fa33 	bl	800094c <MX_USART2_UART_Init>
  MX_DMA_Init();
 80004e6:	f000 fa5b 	bl	80009a0 <MX_DMA_Init>
  MX_TIM4_Init();
 80004ea:	f000 f9b9 	bl	8000860 <MX_TIM4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	for (int i = 0; i < 2; ++i) {
 80004ee:	2300      	movs	r3, #0
 80004f0:	60fb      	str	r3, [r7, #12]
 80004f2:	e013      	b.n	800051c <main+0x4c>
		for (int j = 0; j < 4; ++j) {
 80004f4:	2300      	movs	r3, #0
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	e00a      	b.n	8000510 <main+0x40>
			B1state[i][j] = 0;
 80004fa:	4a97      	ldr	r2, [pc, #604]	; (8000758 <main+0x288>)
 80004fc:	68fb      	ldr	r3, [r7, #12]
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	441a      	add	r2, r3
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	4413      	add	r3, r2
 8000506:	2200      	movs	r2, #0
 8000508:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 4; ++j) {
 800050a:	68bb      	ldr	r3, [r7, #8]
 800050c:	3301      	adds	r3, #1
 800050e:	60bb      	str	r3, [r7, #8]
 8000510:	68bb      	ldr	r3, [r7, #8]
 8000512:	2b03      	cmp	r3, #3
 8000514:	ddf1      	ble.n	80004fa <main+0x2a>
	for (int i = 0; i < 2; ++i) {
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	3301      	adds	r3, #1
 800051a:	60fb      	str	r3, [r7, #12]
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	2b01      	cmp	r3, #1
 8000520:	dde8      	ble.n	80004f4 <main+0x24>
		}
	}
TIM4 -> CCR1=50;
 8000522:	4b8e      	ldr	r3, [pc, #568]	; (800075c <main+0x28c>)
 8000524:	2232      	movs	r2, #50	; 0x32
 8000526:	635a      	str	r2, [r3, #52]	; 0x34
HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000528:	2100      	movs	r1, #0
 800052a:	488d      	ldr	r0, [pc, #564]	; (8000760 <main+0x290>)
 800052c:	f001 ffc4 	bl	80024b8 <HAL_TIM_PWM_Start>
	while (1) {

		static uint32_t timestamp[4] = { 0, 0, 0, 0 };
		B1state[0][0] = HAL_GPIO_ReadPin(S1_GPIO_Port, S1_Pin);
 8000530:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000534:	488b      	ldr	r0, [pc, #556]	; (8000764 <main+0x294>)
 8000536:	f001 fa57 	bl	80019e8 <HAL_GPIO_ReadPin>
 800053a:	4603      	mov	r3, r0
 800053c:	461a      	mov	r2, r3
 800053e:	4b86      	ldr	r3, [pc, #536]	; (8000758 <main+0x288>)
 8000540:	701a      	strb	r2, [r3, #0]
		B1state[0][1] = HAL_GPIO_ReadPin(S2_GPIO_Port, S2_Pin);
 8000542:	2108      	movs	r1, #8
 8000544:	4888      	ldr	r0, [pc, #544]	; (8000768 <main+0x298>)
 8000546:	f001 fa4f 	bl	80019e8 <HAL_GPIO_ReadPin>
 800054a:	4603      	mov	r3, r0
 800054c:	461a      	mov	r2, r3
 800054e:	4b82      	ldr	r3, [pc, #520]	; (8000758 <main+0x288>)
 8000550:	705a      	strb	r2, [r3, #1]
		B1state[0][2] = HAL_GPIO_ReadPin(S3_GPIO_Port, S3_Pin);
 8000552:	2120      	movs	r1, #32
 8000554:	4884      	ldr	r0, [pc, #528]	; (8000768 <main+0x298>)
 8000556:	f001 fa47 	bl	80019e8 <HAL_GPIO_ReadPin>
 800055a:	4603      	mov	r3, r0
 800055c:	461a      	mov	r2, r3
 800055e:	4b7e      	ldr	r3, [pc, #504]	; (8000758 <main+0x288>)
 8000560:	709a      	strb	r2, [r3, #2]
		B1state[0][3] = HAL_GPIO_ReadPin(S4_GPIO_Port, S4_Pin);
 8000562:	2110      	movs	r1, #16
 8000564:	4880      	ldr	r0, [pc, #512]	; (8000768 <main+0x298>)
 8000566:	f001 fa3f 	bl	80019e8 <HAL_GPIO_ReadPin>
 800056a:	4603      	mov	r3, r0
 800056c:	461a      	mov	r2, r3
 800056e:	4b7a      	ldr	r3, [pc, #488]	; (8000758 <main+0x288>)
 8000570:	70da      	strb	r2, [r3, #3]

		if (B1state[1][0] == GPIO_PIN_SET && B1state[0][0] == GPIO_PIN_RESET) {
 8000572:	4b79      	ldr	r3, [pc, #484]	; (8000758 <main+0x288>)
 8000574:	791b      	ldrb	r3, [r3, #4]
 8000576:	2b01      	cmp	r3, #1
 8000578:	d12b      	bne.n	80005d2 <main+0x102>
 800057a:	4b77      	ldr	r3, [pc, #476]	; (8000758 <main+0x288>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	2b00      	cmp	r3, #0
 8000580:	d127      	bne.n	80005d2 <main+0x102>
			if (delay[0] == 2000)
 8000582:	4b7a      	ldr	r3, [pc, #488]	; (800076c <main+0x29c>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800058a:	d104      	bne.n	8000596 <main+0xc6>
				delay[0] = 1000 / 1;
 800058c:	4b77      	ldr	r3, [pc, #476]	; (800076c <main+0x29c>)
 800058e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	e01d      	b.n	80005d2 <main+0x102>
			else if (delay[0] == 1000)
 8000596:	4b75      	ldr	r3, [pc, #468]	; (800076c <main+0x29c>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800059e:	d104      	bne.n	80005aa <main+0xda>
				delay[0] = 500;
 80005a0:	4b72      	ldr	r3, [pc, #456]	; (800076c <main+0x29c>)
 80005a2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	e013      	b.n	80005d2 <main+0x102>
			else if (delay[0] == 500)
 80005aa:	4b70      	ldr	r3, [pc, #448]	; (800076c <main+0x29c>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80005b2:	d104      	bne.n	80005be <main+0xee>
				delay[0] = 333;
 80005b4:	4b6d      	ldr	r3, [pc, #436]	; (800076c <main+0x29c>)
 80005b6:	f240 124d 	movw	r2, #333	; 0x14d
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	e009      	b.n	80005d2 <main+0x102>
			else if (delay[0] == 333)
 80005be:	4b6b      	ldr	r3, [pc, #428]	; (800076c <main+0x29c>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	f240 124d 	movw	r2, #333	; 0x14d
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d103      	bne.n	80005d2 <main+0x102>
				delay[0] = 2000;
 80005ca:	4b68      	ldr	r3, [pc, #416]	; (800076c <main+0x29c>)
 80005cc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80005d0:	601a      	str	r2, [r3, #0]
		}
		if (B1state[1][1] == GPIO_PIN_SET && B1state[0][1] == GPIO_PIN_RESET) {
 80005d2:	4b61      	ldr	r3, [pc, #388]	; (8000758 <main+0x288>)
 80005d4:	795b      	ldrb	r3, [r3, #5]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d10d      	bne.n	80005f6 <main+0x126>
 80005da:	4b5f      	ldr	r3, [pc, #380]	; (8000758 <main+0x288>)
 80005dc:	785b      	ldrb	r3, [r3, #1]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d109      	bne.n	80005f6 <main+0x126>
			logic2 = (logic2 + 1) %2;
 80005e2:	4b63      	ldr	r3, [pc, #396]	; (8000770 <main+0x2a0>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	3301      	adds	r3, #1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	f003 0301 	and.w	r3, r3, #1
 80005ee:	bfb8      	it	lt
 80005f0:	425b      	neglt	r3, r3
 80005f2:	4a5f      	ldr	r2, [pc, #380]	; (8000770 <main+0x2a0>)
 80005f4:	6013      	str	r3, [r2, #0]
		}
		if (B1state[1][2] == GPIO_PIN_SET && B1state[0][2] == GPIO_PIN_RESET) {
 80005f6:	4b58      	ldr	r3, [pc, #352]	; (8000758 <main+0x288>)
 80005f8:	799b      	ldrb	r3, [r3, #6]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d10d      	bne.n	800061a <main+0x14a>
 80005fe:	4b56      	ldr	r3, [pc, #344]	; (8000758 <main+0x288>)
 8000600:	789b      	ldrb	r3, [r3, #2]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d109      	bne.n	800061a <main+0x14a>
			logic3 = (logic3 + 1) %2;
 8000606:	4b5b      	ldr	r3, [pc, #364]	; (8000774 <main+0x2a4>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	3301      	adds	r3, #1
 800060c:	2b00      	cmp	r3, #0
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	bfb8      	it	lt
 8000614:	425b      	neglt	r3, r3
 8000616:	4a57      	ldr	r2, [pc, #348]	; (8000774 <main+0x2a4>)
 8000618:	6013      	str	r3, [r2, #0]
		}
		if (B1state[1][3] == GPIO_PIN_SET && B1state[0][3] == GPIO_PIN_RESET) {
 800061a:	4b4f      	ldr	r3, [pc, #316]	; (8000758 <main+0x288>)
 800061c:	79db      	ldrb	r3, [r3, #7]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d115      	bne.n	800064e <main+0x17e>
 8000622:	4b4d      	ldr	r3, [pc, #308]	; (8000758 <main+0x288>)
 8000624:	78db      	ldrb	r3, [r3, #3]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d111      	bne.n	800064e <main+0x17e>
			pwm = (pwm + 25) %125;
 800062a:	4b53      	ldr	r3, [pc, #332]	; (8000778 <main+0x2a8>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	f103 0119 	add.w	r1, r3, #25
 8000632:	4b52      	ldr	r3, [pc, #328]	; (800077c <main+0x2ac>)
 8000634:	fb83 2301 	smull	r2, r3, r3, r1
 8000638:	10da      	asrs	r2, r3, #3
 800063a:	17cb      	asrs	r3, r1, #31
 800063c:	1ad2      	subs	r2, r2, r3
 800063e:	4613      	mov	r3, r2
 8000640:	015b      	lsls	r3, r3, #5
 8000642:	1a9b      	subs	r3, r3, r2
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	4413      	add	r3, r2
 8000648:	1aca      	subs	r2, r1, r3
 800064a:	4b4b      	ldr	r3, [pc, #300]	; (8000778 <main+0x2a8>)
 800064c:	601a      	str	r2, [r3, #0]
		}

		if (HAL_GetTick() - timestamp[0] >= delay[0]) {
 800064e:	f000 fc3f 	bl	8000ed0 <HAL_GetTick>
 8000652:	4602      	mov	r2, r0
 8000654:	4b4a      	ldr	r3, [pc, #296]	; (8000780 <main+0x2b0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	4a44      	ldr	r2, [pc, #272]	; (800076c <main+0x29c>)
 800065c:	6812      	ldr	r2, [r2, #0]
 800065e:	4293      	cmp	r3, r2
 8000660:	d309      	bcc.n	8000676 <main+0x1a6>
			HAL_GPIO_TogglePin(D1_GPIO_Port, D1_Pin);
 8000662:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000666:	483f      	ldr	r0, [pc, #252]	; (8000764 <main+0x294>)
 8000668:	f001 f9ef 	bl	8001a4a <HAL_GPIO_TogglePin>
			timestamp[0] = HAL_GetTick();
 800066c:	f000 fc30 	bl	8000ed0 <HAL_GetTick>
 8000670:	4603      	mov	r3, r0
 8000672:	4a43      	ldr	r2, [pc, #268]	; (8000780 <main+0x2b0>)
 8000674:	6013      	str	r3, [r2, #0]
		}
		if (HAL_GetTick() - timestamp[1] >= delay[1] && logic2 == 0) {
 8000676:	f000 fc2b 	bl	8000ed0 <HAL_GetTick>
 800067a:	4602      	mov	r2, r0
 800067c:	4b40      	ldr	r3, [pc, #256]	; (8000780 <main+0x2b0>)
 800067e:	685b      	ldr	r3, [r3, #4]
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	4a3a      	ldr	r2, [pc, #232]	; (800076c <main+0x29c>)
 8000684:	6852      	ldr	r2, [r2, #4]
 8000686:	4293      	cmp	r3, r2
 8000688:	d30c      	bcc.n	80006a4 <main+0x1d4>
 800068a:	4b39      	ldr	r3, [pc, #228]	; (8000770 <main+0x2a0>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d108      	bne.n	80006a4 <main+0x1d4>
			HAL_GPIO_TogglePin(D2_GPIO_Port, D2_Pin);
 8000692:	2180      	movs	r1, #128	; 0x80
 8000694:	4833      	ldr	r0, [pc, #204]	; (8000764 <main+0x294>)
 8000696:	f001 f9d8 	bl	8001a4a <HAL_GPIO_TogglePin>
			timestamp[1] = HAL_GetTick();
 800069a:	f000 fc19 	bl	8000ed0 <HAL_GetTick>
 800069e:	4603      	mov	r3, r0
 80006a0:	4a37      	ldr	r2, [pc, #220]	; (8000780 <main+0x2b0>)
 80006a2:	6053      	str	r3, [r2, #4]
		}
		if (HAL_GetTick() - timestamp[2] >= delay[2]) {
 80006a4:	f000 fc14 	bl	8000ed0 <HAL_GetTick>
 80006a8:	4602      	mov	r2, r0
 80006aa:	4b35      	ldr	r3, [pc, #212]	; (8000780 <main+0x2b0>)
 80006ac:	689b      	ldr	r3, [r3, #8]
 80006ae:	1ad3      	subs	r3, r2, r3
 80006b0:	4a2e      	ldr	r2, [pc, #184]	; (800076c <main+0x29c>)
 80006b2:	6892      	ldr	r2, [r2, #8]
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d329      	bcc.n	800070c <main+0x23c>
			if (count3 < 3)
 80006b8:	4b32      	ldr	r3, [pc, #200]	; (8000784 <main+0x2b4>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b02      	cmp	r3, #2
 80006be:	dc08      	bgt.n	80006d2 <main+0x202>
				HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, logic3);
 80006c0:	4b2c      	ldr	r3, [pc, #176]	; (8000774 <main+0x2a4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	b2db      	uxtb	r3, r3
 80006c6:	461a      	mov	r2, r3
 80006c8:	2180      	movs	r1, #128	; 0x80
 80006ca:	482f      	ldr	r0, [pc, #188]	; (8000788 <main+0x2b8>)
 80006cc:	f001 f9a4 	bl	8001a18 <HAL_GPIO_WritePin>
 80006d0:	e00b      	b.n	80006ea <main+0x21a>
			else
				HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, !logic3);
 80006d2:	4b28      	ldr	r3, [pc, #160]	; (8000774 <main+0x2a4>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	bf0c      	ite	eq
 80006da:	2301      	moveq	r3, #1
 80006dc:	2300      	movne	r3, #0
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	461a      	mov	r2, r3
 80006e2:	2180      	movs	r1, #128	; 0x80
 80006e4:	4828      	ldr	r0, [pc, #160]	; (8000788 <main+0x2b8>)
 80006e6:	f001 f997 	bl	8001a18 <HAL_GPIO_WritePin>
			timestamp[2] = HAL_GetTick();
 80006ea:	f000 fbf1 	bl	8000ed0 <HAL_GetTick>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a23      	ldr	r2, [pc, #140]	; (8000780 <main+0x2b0>)
 80006f2:	6093      	str	r3, [r2, #8]
			count3 = (count3 + 1) % 4;
 80006f4:	4b23      	ldr	r3, [pc, #140]	; (8000784 <main+0x2b4>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	3301      	adds	r3, #1
 80006fa:	425a      	negs	r2, r3
 80006fc:	f003 0303 	and.w	r3, r3, #3
 8000700:	f002 0203 	and.w	r2, r2, #3
 8000704:	bf58      	it	pl
 8000706:	4253      	negpl	r3, r2
 8000708:	4a1e      	ldr	r2, [pc, #120]	; (8000784 <main+0x2b4>)
 800070a:	6013      	str	r3, [r2, #0]
		}

		for (int j = 0; j < 4; ++j) {
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	e00c      	b.n	800072c <main+0x25c>
			B1state[1][j] = B1state[0][j];
 8000712:	4a11      	ldr	r2, [pc, #68]	; (8000758 <main+0x288>)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4413      	add	r3, r2
 8000718:	7819      	ldrb	r1, [r3, #0]
 800071a:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <main+0x288>)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	4413      	add	r3, r2
 8000720:	3304      	adds	r3, #4
 8000722:	460a      	mov	r2, r1
 8000724:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 4; ++j) {
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	3301      	adds	r3, #1
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b03      	cmp	r3, #3
 8000730:	ddef      	ble.n	8000712 <main+0x242>
		}

		TIM4 -> CCR1=pwm;
 8000732:	4b11      	ldr	r3, [pc, #68]	; (8000778 <main+0x2a8>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <main+0x28c>)
 8000738:	635a      	str	r2, [r3, #52]	; 0x34
		if (HAL_GetTick() - timestamp[3] >= 10) {
 800073a:	f000 fbc9 	bl	8000ed0 <HAL_GetTick>
 800073e:	4602      	mov	r2, r0
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <main+0x2b0>)
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	2b09      	cmp	r3, #9
 8000748:	f67f aef2 	bls.w	8000530 <main+0x60>
//			pwm=(pwm + 1)%100;
			timestamp[3] = HAL_GetTick();
 800074c:	f000 fbc0 	bl	8000ed0 <HAL_GetTick>
 8000750:	4603      	mov	r3, r0
 8000752:	4a0b      	ldr	r2, [pc, #44]	; (8000780 <main+0x2b0>)
 8000754:	60d3      	str	r3, [r2, #12]
	while (1) {
 8000756:	e6eb      	b.n	8000530 <main+0x60>
 8000758:	200000a0 	.word	0x200000a0
 800075c:	40000800 	.word	0x40000800
 8000760:	20000058 	.word	0x20000058
 8000764:	40020000 	.word	0x40020000
 8000768:	40020400 	.word	0x40020400
 800076c:	20000000 	.word	0x20000000
 8000770:	2000003c 	.word	0x2000003c
 8000774:	20000040 	.word	0x20000040
 8000778:	20000010 	.word	0x20000010
 800077c:	10624dd3 	.word	0x10624dd3
 8000780:	20000048 	.word	0x20000048
 8000784:	20000044 	.word	0x20000044
 8000788:	40020800 	.word	0x40020800

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 0320 	add.w	r3, r7, #32
 8000796:	2230      	movs	r2, #48	; 0x30
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f002 fe3a 	bl	8003414 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	4b28      	ldr	r3, [pc, #160]	; (8000858 <SystemClock_Config+0xcc>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	4a27      	ldr	r2, [pc, #156]	; (8000858 <SystemClock_Config+0xcc>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	; 0x40
 80007c0:	4b25      	ldr	r3, [pc, #148]	; (8000858 <SystemClock_Config+0xcc>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c8:	60bb      	str	r3, [r7, #8]
 80007ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007cc:	2300      	movs	r3, #0
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	4b22      	ldr	r3, [pc, #136]	; (800085c <SystemClock_Config+0xd0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a21      	ldr	r2, [pc, #132]	; (800085c <SystemClock_Config+0xd0>)
 80007d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007da:	6013      	str	r3, [r2, #0]
 80007dc:	4b1f      	ldr	r3, [pc, #124]	; (800085c <SystemClock_Config+0xd0>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007e8:	2302      	movs	r3, #2
 80007ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007ec:	2301      	movs	r3, #1
 80007ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f0:	2310      	movs	r3, #16
 80007f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f4:	2302      	movs	r3, #2
 80007f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007f8:	2300      	movs	r3, #0
 80007fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80007fc:	2310      	movs	r3, #16
 80007fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000800:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000804:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000806:	2304      	movs	r3, #4
 8000808:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800080a:	2304      	movs	r3, #4
 800080c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080e:	f107 0320 	add.w	r3, r7, #32
 8000812:	4618      	mov	r0, r3
 8000814:	f001 f934 	bl	8001a80 <HAL_RCC_OscConfig>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800081e:	f000 f97d 	bl	8000b1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000822:	230f      	movs	r3, #15
 8000824:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000826:	2302      	movs	r3, #2
 8000828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800082e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000832:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2102      	movs	r1, #2
 800083e:	4618      	mov	r0, r3
 8000840:	f001 fb96 	bl	8001f70 <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800084a:	f000 f967 	bl	8000b1c <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	3750      	adds	r7, #80	; 0x50
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800
 800085c:	40007000 	.word	0x40007000

08000860 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08e      	sub	sp, #56	; 0x38
 8000864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000866:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800086a:	2200      	movs	r2, #0
 800086c:	601a      	str	r2, [r3, #0]
 800086e:	605a      	str	r2, [r3, #4]
 8000870:	609a      	str	r2, [r3, #8]
 8000872:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000874:	f107 0320 	add.w	r3, r7, #32
 8000878:	2200      	movs	r2, #0
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800087e:	1d3b      	adds	r3, r7, #4
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
 8000884:	605a      	str	r2, [r3, #4]
 8000886:	609a      	str	r2, [r3, #8]
 8000888:	60da      	str	r2, [r3, #12]
 800088a:	611a      	str	r2, [r3, #16]
 800088c:	615a      	str	r2, [r3, #20]
 800088e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000890:	4b2c      	ldr	r3, [pc, #176]	; (8000944 <MX_TIM4_Init+0xe4>)
 8000892:	4a2d      	ldr	r2, [pc, #180]	; (8000948 <MX_TIM4_Init+0xe8>)
 8000894:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8000896:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <MX_TIM4_Init+0xe4>)
 8000898:	2247      	movs	r2, #71	; 0x47
 800089a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800089c:	4b29      	ldr	r3, [pc, #164]	; (8000944 <MX_TIM4_Init+0xe4>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 80008a2:	4b28      	ldr	r3, [pc, #160]	; (8000944 <MX_TIM4_Init+0xe4>)
 80008a4:	2263      	movs	r2, #99	; 0x63
 80008a6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008a8:	4b26      	ldr	r3, [pc, #152]	; (8000944 <MX_TIM4_Init+0xe4>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ae:	4b25      	ldr	r3, [pc, #148]	; (8000944 <MX_TIM4_Init+0xe4>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008b4:	4823      	ldr	r0, [pc, #140]	; (8000944 <MX_TIM4_Init+0xe4>)
 80008b6:	f001 fd57 	bl	8002368 <HAL_TIM_Base_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80008c0:	f000 f92c 	bl	8000b1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008ce:	4619      	mov	r1, r3
 80008d0:	481c      	ldr	r0, [pc, #112]	; (8000944 <MX_TIM4_Init+0xe4>)
 80008d2:	f001 ff63 	bl	800279c <HAL_TIM_ConfigClockSource>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80008dc:	f000 f91e 	bl	8000b1c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80008e0:	4818      	ldr	r0, [pc, #96]	; (8000944 <MX_TIM4_Init+0xe4>)
 80008e2:	f001 fd90 	bl	8002406 <HAL_TIM_PWM_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80008ec:	f000 f916 	bl	8000b1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008f0:	2300      	movs	r3, #0
 80008f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80008f8:	f107 0320 	add.w	r3, r7, #32
 80008fc:	4619      	mov	r1, r3
 80008fe:	4811      	ldr	r0, [pc, #68]	; (8000944 <MX_TIM4_Init+0xe4>)
 8000900:	f002 fae0 	bl	8002ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800090a:	f000 f907 	bl	8000b1c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800090e:	2360      	movs	r3, #96	; 0x60
 8000910:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	2200      	movs	r2, #0
 8000922:	4619      	mov	r1, r3
 8000924:	4807      	ldr	r0, [pc, #28]	; (8000944 <MX_TIM4_Init+0xe4>)
 8000926:	f001 fe77 	bl	8002618 <HAL_TIM_PWM_ConfigChannel>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000930:	f000 f8f4 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000934:	4803      	ldr	r0, [pc, #12]	; (8000944 <MX_TIM4_Init+0xe4>)
 8000936:	f000 f973 	bl	8000c20 <HAL_TIM_MspPostInit>

}
 800093a:	bf00      	nop
 800093c:	3738      	adds	r7, #56	; 0x38
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000058 	.word	0x20000058
 8000948:	40000800 	.word	0x40000800

0800094c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <MX_USART2_UART_Init+0x50>)
 8000954:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 8000958:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800095c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095e:	4b0e      	ldr	r3, [pc, #56]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000964:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096a:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 8000972:	220c      	movs	r2, #12
 8000974:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000976:	4b08      	ldr	r3, [pc, #32]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800097c:	4b06      	ldr	r3, [pc, #24]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_USART2_UART_Init+0x4c>)
 8000984:	f002 fb0c 	bl	8002fa0 <HAL_UART_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800098e:	f000 f8c5 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000108 	.word	0x20000108
 800099c:	40004400 	.word	0x40004400

080009a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <MX_DMA_Init+0x3c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ae:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <MX_DMA_Init+0x3c>)
 80009b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009b4:	6313      	str	r3, [r2, #48]	; 0x30
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <MX_DMA_Init+0x3c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80009c2:	2200      	movs	r2, #0
 80009c4:	2100      	movs	r1, #0
 80009c6:	200b      	movs	r0, #11
 80009c8:	f000 fb69 	bl	800109e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009cc:	200b      	movs	r0, #11
 80009ce:	f000 fb82 	bl	80010d6 <HAL_NVIC_EnableIRQ>

}
 80009d2:	bf00      	nop
 80009d4:	3708      	adds	r7, #8
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b44      	ldr	r3, [pc, #272]	; (8000b0c <MX_GPIO_Init+0x12c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a43      	ldr	r2, [pc, #268]	; (8000b0c <MX_GPIO_Init+0x12c>)
 8000a00:	f043 0304 	orr.w	r3, r3, #4
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b41      	ldr	r3, [pc, #260]	; (8000b0c <MX_GPIO_Init+0x12c>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0304 	and.w	r3, r3, #4
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b3d      	ldr	r3, [pc, #244]	; (8000b0c <MX_GPIO_Init+0x12c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a3c      	ldr	r2, [pc, #240]	; (8000b0c <MX_GPIO_Init+0x12c>)
 8000a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b3a      	ldr	r3, [pc, #232]	; (8000b0c <MX_GPIO_Init+0x12c>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	4b36      	ldr	r3, [pc, #216]	; (8000b0c <MX_GPIO_Init+0x12c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a35      	ldr	r2, [pc, #212]	; (8000b0c <MX_GPIO_Init+0x12c>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b33      	ldr	r3, [pc, #204]	; (8000b0c <MX_GPIO_Init+0x12c>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b2f      	ldr	r3, [pc, #188]	; (8000b0c <MX_GPIO_Init+0x12c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a2e      	ldr	r2, [pc, #184]	; (8000b0c <MX_GPIO_Init+0x12c>)
 8000a54:	f043 0302 	orr.w	r3, r3, #2
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b2c      	ldr	r3, [pc, #176]	; (8000b0c <MX_GPIO_Init+0x12c>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D2_Pin|D1_Pin, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8000a6c:	4828      	ldr	r0, [pc, #160]	; (8000b10 <MX_GPIO_Init+0x130>)
 8000a6e:	f000 ffd3 	bl	8001a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D3_GPIO_Port, D3_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2180      	movs	r1, #128	; 0x80
 8000a76:	4827      	ldr	r0, [pc, #156]	; (8000b14 <MX_GPIO_Init+0x134>)
 8000a78:	f000 ffce 	bl	8001a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a7c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a82:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	4820      	ldr	r0, [pc, #128]	; (8000b14 <MX_GPIO_Init+0x134>)
 8000a94:	f000 fe24 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin D2_Pin D1_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|D2_Pin|D1_Pin;
 8000a98:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	4619      	mov	r1, r3
 8000ab0:	4817      	ldr	r0, [pc, #92]	; (8000b10 <MX_GPIO_Init+0x130>)
 8000ab2:	f000 fe15 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : D3_Pin */
  GPIO_InitStruct.Pin = D3_Pin;
 8000ab6:	2380      	movs	r3, #128	; 0x80
 8000ab8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(D3_GPIO_Port, &GPIO_InitStruct);
 8000ac6:	f107 0314 	add.w	r3, r7, #20
 8000aca:	4619      	mov	r1, r3
 8000acc:	4811      	ldr	r0, [pc, #68]	; (8000b14 <MX_GPIO_Init+0x134>)
 8000ace:	f000 fe07 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : S1_Pin */
  GPIO_InitStruct.Pin = S1_Pin;
 8000ad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(S1_GPIO_Port, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	480a      	ldr	r0, [pc, #40]	; (8000b10 <MX_GPIO_Init+0x130>)
 8000ae8:	f000 fdfa 	bl	80016e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : S2_Pin S4_Pin S3_Pin */
  GPIO_InitStruct.Pin = S2_Pin|S4_Pin|S3_Pin;
 8000aec:	2338      	movs	r3, #56	; 0x38
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	4806      	ldr	r0, [pc, #24]	; (8000b18 <MX_GPIO_Init+0x138>)
 8000b00:	f000 fdee 	bl	80016e0 <HAL_GPIO_Init>

}
 8000b04:	bf00      	nop
 8000b06:	3728      	adds	r7, #40	; 0x28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40020000 	.word	0x40020000
 8000b14:	40020800 	.word	0x40020800
 8000b18:	40020400 	.word	0x40020400

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b24:	e7fe      	b.n	8000b24 <Error_Handler+0x8>
	...

08000b28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	607b      	str	r3, [r7, #4]
 8000b32:	4b10      	ldr	r3, [pc, #64]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b36:	4a0f      	ldr	r2, [pc, #60]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b3e:	4b0d      	ldr	r3, [pc, #52]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b46:	607b      	str	r3, [r7, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	603b      	str	r3, [r7, #0]
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	4a08      	ldr	r2, [pc, #32]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_MspInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b62:	603b      	str	r3, [r7, #0]
 8000b64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b66:	2007      	movs	r0, #7
 8000b68:	f000 fa8e 	bl	8001088 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40023800 	.word	0x40023800

08000b78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a22      	ldr	r2, [pc, #136]	; (8000c10 <HAL_TIM_Base_MspInit+0x98>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d13d      	bne.n	8000c06 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	60fb      	str	r3, [r7, #12]
 8000b8e:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <HAL_TIM_Base_MspInit+0x9c>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	4a20      	ldr	r2, [pc, #128]	; (8000c14 <HAL_TIM_Base_MspInit+0x9c>)
 8000b94:	f043 0304 	orr.w	r3, r3, #4
 8000b98:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <HAL_TIM_Base_MspInit+0x9c>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	f003 0304 	and.w	r3, r3, #4
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	; (8000c18 <HAL_TIM_Base_MspInit+0xa0>)
 8000ba8:	4a1c      	ldr	r2, [pc, #112]	; (8000c1c <HAL_TIM_Base_MspInit+0xa4>)
 8000baa:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	; (8000c18 <HAL_TIM_Base_MspInit+0xa0>)
 8000bae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000bb2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bb4:	4b18      	ldr	r3, [pc, #96]	; (8000c18 <HAL_TIM_Base_MspInit+0xa0>)
 8000bb6:	2240      	movs	r2, #64	; 0x40
 8000bb8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bba:	4b17      	ldr	r3, [pc, #92]	; (8000c18 <HAL_TIM_Base_MspInit+0xa0>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000bc0:	4b15      	ldr	r3, [pc, #84]	; (8000c18 <HAL_TIM_Base_MspInit+0xa0>)
 8000bc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bc6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bc8:	4b13      	ldr	r3, [pc, #76]	; (8000c18 <HAL_TIM_Base_MspInit+0xa0>)
 8000bca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bce:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	; (8000c18 <HAL_TIM_Base_MspInit+0xa0>)
 8000bd2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bd6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <HAL_TIM_Base_MspInit+0xa0>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <HAL_TIM_Base_MspInit+0xa0>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000be4:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <HAL_TIM_Base_MspInit+0xa0>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8000bea:	480b      	ldr	r0, [pc, #44]	; (8000c18 <HAL_TIM_Base_MspInit+0xa0>)
 8000bec:	f000 fa8e 	bl	800110c <HAL_DMA_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8000bf6:	f7ff ff91 	bl	8000b1c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4a06      	ldr	r2, [pc, #24]	; (8000c18 <HAL_TIM_Base_MspInit+0xa0>)
 8000bfe:	625a      	str	r2, [r3, #36]	; 0x24
 8000c00:	4a05      	ldr	r2, [pc, #20]	; (8000c18 <HAL_TIM_Base_MspInit+0xa0>)
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000c06:	bf00      	nop
 8000c08:	3710      	adds	r7, #16
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40000800 	.word	0x40000800
 8000c14:	40023800 	.word	0x40023800
 8000c18:	200000a8 	.word	0x200000a8
 8000c1c:	40026010 	.word	0x40026010

08000c20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b088      	sub	sp, #32
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 030c 	add.w	r3, r7, #12
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a12      	ldr	r2, [pc, #72]	; (8000c88 <HAL_TIM_MspPostInit+0x68>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d11d      	bne.n	8000c7e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <HAL_TIM_MspPostInit+0x6c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	4a10      	ldr	r2, [pc, #64]	; (8000c8c <HAL_TIM_MspPostInit+0x6c>)
 8000c4c:	f043 0302 	orr.w	r3, r3, #2
 8000c50:	6313      	str	r3, [r2, #48]	; 0x30
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <HAL_TIM_MspPostInit+0x6c>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	f003 0302 	and.w	r3, r3, #2
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c5e:	2340      	movs	r3, #64	; 0x40
 8000c60:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c62:	2302      	movs	r3, #2
 8000c64:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	4619      	mov	r1, r3
 8000c78:	4805      	ldr	r0, [pc, #20]	; (8000c90 <HAL_TIM_MspPostInit+0x70>)
 8000c7a:	f000 fd31 	bl	80016e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c7e:	bf00      	nop
 8000c80:	3720      	adds	r7, #32
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40000800 	.word	0x40000800
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020400 	.word	0x40020400

08000c94 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b08a      	sub	sp, #40	; 0x28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
 8000caa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a19      	ldr	r2, [pc, #100]	; (8000d18 <HAL_UART_MspInit+0x84>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d12b      	bne.n	8000d0e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
 8000cba:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <HAL_UART_MspInit+0x88>)
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	4a17      	ldr	r2, [pc, #92]	; (8000d1c <HAL_UART_MspInit+0x88>)
 8000cc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc6:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <HAL_UART_MspInit+0x88>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cce:	613b      	str	r3, [r7, #16]
 8000cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <HAL_UART_MspInit+0x88>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a10      	ldr	r2, [pc, #64]	; (8000d1c <HAL_UART_MspInit+0x88>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <HAL_UART_MspInit+0x88>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cee:	230c      	movs	r3, #12
 8000cf0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cfe:	2307      	movs	r3, #7
 8000d00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d02:	f107 0314 	add.w	r3, r7, #20
 8000d06:	4619      	mov	r1, r3
 8000d08:	4805      	ldr	r0, [pc, #20]	; (8000d20 <HAL_UART_MspInit+0x8c>)
 8000d0a:	f000 fce9 	bl	80016e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d0e:	bf00      	nop
 8000d10:	3728      	adds	r7, #40	; 0x28
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	40004400 	.word	0x40004400
 8000d1c:	40023800 	.word	0x40023800
 8000d20:	40020000 	.word	0x40020000

08000d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <NMI_Handler+0x4>

08000d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <MemManage_Handler+0x4>

08000d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <BusFault_Handler+0x4>

08000d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <UsageFault_Handler+0x4>

08000d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d70:	f000 f89a 	bl	8000ea8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <DMA1_Stream0_IRQHandler+0x10>)
 8000d7e:	f000 fa73 	bl	8001268 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200000a8 	.word	0x200000a8

08000d8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d90:	4b06      	ldr	r3, [pc, #24]	; (8000dac <SystemInit+0x20>)
 8000d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d96:	4a05      	ldr	r2, [pc, #20]	; (8000dac <SystemInit+0x20>)
 8000d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da0:	bf00      	nop
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	e000ed00 	.word	0xe000ed00

08000db0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000db0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db4:	480d      	ldr	r0, [pc, #52]	; (8000dec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000db6:	490e      	ldr	r1, [pc, #56]	; (8000df0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000db8:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a0b      	ldr	r2, [pc, #44]	; (8000df8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dcc:	4c0b      	ldr	r4, [pc, #44]	; (8000dfc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dda:	f7ff ffd7 	bl	8000d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dde:	f002 faf5 	bl	80033cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de2:	f7ff fb75 	bl	80004d0 <main>
  bx  lr    
 8000de6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000de8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000df4:	0800346c 	.word	0x0800346c
  ldr r2, =_sbss
 8000df8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000dfc:	20000150 	.word	0x20000150

08000e00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e00:	e7fe      	b.n	8000e00 <ADC_IRQHandler>
	...

08000e04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	; (8000e44 <HAL_Init+0x40>)
 8000e0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0a      	ldr	r2, [pc, #40]	; (8000e44 <HAL_Init+0x40>)
 8000e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a07      	ldr	r2, [pc, #28]	; (8000e44 <HAL_Init+0x40>)
 8000e26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2c:	2003      	movs	r0, #3
 8000e2e:	f000 f92b 	bl	8001088 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e32:	2000      	movs	r0, #0
 8000e34:	f000 f808 	bl	8000e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e38:	f7ff fe76 	bl	8000b28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e3c:	2300      	movs	r3, #0
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40023c00 	.word	0x40023c00

08000e48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_InitTick+0x54>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <HAL_InitTick+0x58>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	4619      	mov	r1, r3
 8000e5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f943 	bl	80010f2 <HAL_SYSTICK_Config>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	e00e      	b.n	8000e94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	d80a      	bhi.n	8000e92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	6879      	ldr	r1, [r7, #4]
 8000e80:	f04f 30ff 	mov.w	r0, #4294967295
 8000e84:	f000 f90b 	bl	800109e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e88:	4a06      	ldr	r2, [pc, #24]	; (8000ea4 <HAL_InitTick+0x5c>)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	e000      	b.n	8000e94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e92:	2301      	movs	r3, #1
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000014 	.word	0x20000014
 8000ea0:	2000001c 	.word	0x2000001c
 8000ea4:	20000018 	.word	0x20000018

08000ea8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eac:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <HAL_IncTick+0x20>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_IncTick+0x24>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	4413      	add	r3, r2
 8000eb8:	4a04      	ldr	r2, [pc, #16]	; (8000ecc <HAL_IncTick+0x24>)
 8000eba:	6013      	str	r3, [r2, #0]
}
 8000ebc:	bf00      	nop
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	2000001c 	.word	0x2000001c
 8000ecc:	2000014c 	.word	0x2000014c

08000ed0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <HAL_GetTick+0x14>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	2000014c 	.word	0x2000014c

08000ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <__NVIC_GetPriorityGrouping+0x18>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	f003 0307 	and.w	r3, r3, #7
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	db0b      	blt.n	8000f76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f003 021f 	and.w	r2, r3, #31
 8000f64:	4907      	ldr	r1, [pc, #28]	; (8000f84 <__NVIC_EnableIRQ+0x38>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	095b      	lsrs	r3, r3, #5
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	e000e100 	.word	0xe000e100

08000f88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4603      	mov	r3, r0
 8000f90:	6039      	str	r1, [r7, #0]
 8000f92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	db0a      	blt.n	8000fb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	b2da      	uxtb	r2, r3
 8000fa0:	490c      	ldr	r1, [pc, #48]	; (8000fd4 <__NVIC_SetPriority+0x4c>)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	0112      	lsls	r2, r2, #4
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	440b      	add	r3, r1
 8000fac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fb0:	e00a      	b.n	8000fc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	b2da      	uxtb	r2, r3
 8000fb6:	4908      	ldr	r1, [pc, #32]	; (8000fd8 <__NVIC_SetPriority+0x50>)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	3b04      	subs	r3, #4
 8000fc0:	0112      	lsls	r2, r2, #4
 8000fc2:	b2d2      	uxtb	r2, r2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	761a      	strb	r2, [r3, #24]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000e100 	.word	0xe000e100
 8000fd8:	e000ed00 	.word	0xe000ed00

08000fdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	f003 0307 	and.w	r3, r3, #7
 8000fee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ff0:	69fb      	ldr	r3, [r7, #28]
 8000ff2:	f1c3 0307 	rsb	r3, r3, #7
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	bf28      	it	cs
 8000ffa:	2304      	movcs	r3, #4
 8000ffc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffe:	69fb      	ldr	r3, [r7, #28]
 8001000:	3304      	adds	r3, #4
 8001002:	2b06      	cmp	r3, #6
 8001004:	d902      	bls.n	800100c <NVIC_EncodePriority+0x30>
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	3b03      	subs	r3, #3
 800100a:	e000      	b.n	800100e <NVIC_EncodePriority+0x32>
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	f04f 32ff 	mov.w	r2, #4294967295
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43da      	mvns	r2, r3
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	401a      	ands	r2, r3
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001024:	f04f 31ff 	mov.w	r1, #4294967295
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	fa01 f303 	lsl.w	r3, r1, r3
 800102e:	43d9      	mvns	r1, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	4313      	orrs	r3, r2
         );
}
 8001036:	4618      	mov	r0, r3
 8001038:	3724      	adds	r7, #36	; 0x24
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
	...

08001044 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3b01      	subs	r3, #1
 8001050:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001054:	d301      	bcc.n	800105a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001056:	2301      	movs	r3, #1
 8001058:	e00f      	b.n	800107a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <SysTick_Config+0x40>)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001062:	210f      	movs	r1, #15
 8001064:	f04f 30ff 	mov.w	r0, #4294967295
 8001068:	f7ff ff8e 	bl	8000f88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <SysTick_Config+0x40>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <SysTick_Config+0x40>)
 8001074:	2207      	movs	r2, #7
 8001076:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	3708      	adds	r7, #8
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	e000e010 	.word	0xe000e010

08001088 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff29 	bl	8000ee8 <__NVIC_SetPriorityGrouping>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800109e:	b580      	push	{r7, lr}
 80010a0:	b086      	sub	sp, #24
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	60b9      	str	r1, [r7, #8]
 80010a8:	607a      	str	r2, [r7, #4]
 80010aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010b0:	f7ff ff3e 	bl	8000f30 <__NVIC_GetPriorityGrouping>
 80010b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	6978      	ldr	r0, [r7, #20]
 80010bc:	f7ff ff8e 	bl	8000fdc <NVIC_EncodePriority>
 80010c0:	4602      	mov	r2, r0
 80010c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff ff5d 	bl	8000f88 <__NVIC_SetPriority>
}
 80010ce:	bf00      	nop
 80010d0:	3718      	adds	r7, #24
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
 80010dc:	4603      	mov	r3, r0
 80010de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff31 	bl	8000f4c <__NVIC_EnableIRQ>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffa2 	bl	8001044 <SysTick_Config>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001118:	f7ff feda 	bl	8000ed0 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e099      	b.n	800125c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2202      	movs	r2, #2
 800112c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	681a      	ldr	r2, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f022 0201 	bic.w	r2, r2, #1
 8001146:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001148:	e00f      	b.n	800116a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800114a:	f7ff fec1 	bl	8000ed0 <HAL_GetTick>
 800114e:	4602      	mov	r2, r0
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	1ad3      	subs	r3, r2, r3
 8001154:	2b05      	cmp	r3, #5
 8001156:	d908      	bls.n	800116a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2220      	movs	r2, #32
 800115c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2203      	movs	r2, #3
 8001162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e078      	b.n	800125c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1e8      	bne.n	800114a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	4b38      	ldr	r3, [pc, #224]	; (8001264 <HAL_DMA_Init+0x158>)
 8001184:	4013      	ands	r3, r2
 8001186:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001196:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	691b      	ldr	r3, [r3, #16]
 800119c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6a1b      	ldr	r3, [r3, #32]
 80011b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011b6:	697a      	ldr	r2, [r7, #20]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c0:	2b04      	cmp	r3, #4
 80011c2:	d107      	bne.n	80011d4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	4313      	orrs	r3, r2
 80011ce:	697a      	ldr	r2, [r7, #20]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	697a      	ldr	r2, [r7, #20]
 80011da:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	695b      	ldr	r3, [r3, #20]
 80011e2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	f023 0307 	bic.w	r3, r3, #7
 80011ea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	d117      	bne.n	800122e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	4313      	orrs	r3, r2
 8001206:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00e      	beq.n	800122e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f000 f9e9 	bl	80015e8 <DMA_CheckFifoParam>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d008      	beq.n	800122e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2240      	movs	r2, #64	; 0x40
 8001220:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800122a:	2301      	movs	r3, #1
 800122c:	e016      	b.n	800125c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f000 f9a0 	bl	800157c <DMA_CalcBaseAndBitshift>
 800123c:	4603      	mov	r3, r0
 800123e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001244:	223f      	movs	r2, #63	; 0x3f
 8001246:	409a      	lsls	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2200      	movs	r2, #0
 8001250:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2201      	movs	r2, #1
 8001256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	f010803f 	.word	0xf010803f

08001268 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001270:	2300      	movs	r3, #0
 8001272:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001274:	4b92      	ldr	r3, [pc, #584]	; (80014c0 <HAL_DMA_IRQHandler+0x258>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a92      	ldr	r2, [pc, #584]	; (80014c4 <HAL_DMA_IRQHandler+0x25c>)
 800127a:	fba2 2303 	umull	r2, r3, r2, r3
 800127e:	0a9b      	lsrs	r3, r3, #10
 8001280:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001286:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001292:	2208      	movs	r2, #8
 8001294:	409a      	lsls	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	4013      	ands	r3, r2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d01a      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0304 	and.w	r3, r3, #4
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d013      	beq.n	80012d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f022 0204 	bic.w	r2, r2, #4
 80012ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c0:	2208      	movs	r2, #8
 80012c2:	409a      	lsls	r2, r3
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012cc:	f043 0201 	orr.w	r2, r3, #1
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d8:	2201      	movs	r2, #1
 80012da:	409a      	lsls	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4013      	ands	r3, r2
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d012      	beq.n	800130a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d00b      	beq.n	800130a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012f6:	2201      	movs	r2, #1
 80012f8:	409a      	lsls	r2, r3
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001302:	f043 0202 	orr.w	r2, r3, #2
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800130e:	2204      	movs	r2, #4
 8001310:	409a      	lsls	r2, r3
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4013      	ands	r3, r2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d012      	beq.n	8001340 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0302 	and.w	r3, r3, #2
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00b      	beq.n	8001340 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132c:	2204      	movs	r2, #4
 800132e:	409a      	lsls	r2, r3
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001338:	f043 0204 	orr.w	r2, r3, #4
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001344:	2210      	movs	r2, #16
 8001346:	409a      	lsls	r2, r3
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4013      	ands	r3, r2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d043      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	2b00      	cmp	r3, #0
 800135c:	d03c      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001362:	2210      	movs	r2, #16
 8001364:	409a      	lsls	r2, r3
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d018      	beq.n	80013aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d108      	bne.n	8001398 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	2b00      	cmp	r3, #0
 800138c:	d024      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	4798      	blx	r3
 8001396:	e01f      	b.n	80013d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800139c:	2b00      	cmp	r3, #0
 800139e:	d01b      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a4:	6878      	ldr	r0, [r7, #4]
 80013a6:	4798      	blx	r3
 80013a8:	e016      	b.n	80013d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d107      	bne.n	80013c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0208 	bic.w	r2, r2, #8
 80013c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d003      	beq.n	80013d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	6878      	ldr	r0, [r7, #4]
 80013d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013dc:	2220      	movs	r2, #32
 80013de:	409a      	lsls	r2, r3
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	f000 808e 	beq.w	8001506 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0310 	and.w	r3, r3, #16
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 8086 	beq.w	8001506 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fe:	2220      	movs	r2, #32
 8001400:	409a      	lsls	r2, r3
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b05      	cmp	r3, #5
 8001410:	d136      	bne.n	8001480 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f022 0216 	bic.w	r2, r2, #22
 8001420:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	695a      	ldr	r2, [r3, #20]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001430:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	2b00      	cmp	r3, #0
 8001438:	d103      	bne.n	8001442 <HAL_DMA_IRQHandler+0x1da>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800143e:	2b00      	cmp	r3, #0
 8001440:	d007      	beq.n	8001452 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f022 0208 	bic.w	r2, r2, #8
 8001450:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001456:	223f      	movs	r2, #63	; 0x3f
 8001458:	409a      	lsls	r2, r3
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2201      	movs	r2, #1
 8001462:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001472:	2b00      	cmp	r3, #0
 8001474:	d07d      	beq.n	8001572 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	4798      	blx	r3
        }
        return;
 800147e:	e078      	b.n	8001572 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d01c      	beq.n	80014c8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d108      	bne.n	80014ae <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d030      	beq.n	8001506 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	4798      	blx	r3
 80014ac:	e02b      	b.n	8001506 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d027      	beq.n	8001506 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ba:	6878      	ldr	r0, [r7, #4]
 80014bc:	4798      	blx	r3
 80014be:	e022      	b.n	8001506 <HAL_DMA_IRQHandler+0x29e>
 80014c0:	20000014 	.word	0x20000014
 80014c4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d10f      	bne.n	80014f6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f022 0210 	bic.w	r2, r2, #16
 80014e4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800150a:	2b00      	cmp	r3, #0
 800150c:	d032      	beq.n	8001574 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d022      	beq.n	8001560 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2205      	movs	r2, #5
 800151e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f022 0201 	bic.w	r2, r2, #1
 8001530:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	3301      	adds	r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	697a      	ldr	r2, [r7, #20]
 800153a:	429a      	cmp	r2, r3
 800153c:	d307      	bcc.n	800154e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1f2      	bne.n	8001532 <HAL_DMA_IRQHandler+0x2ca>
 800154c:	e000      	b.n	8001550 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800154e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	4798      	blx	r3
 8001570:	e000      	b.n	8001574 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001572:	bf00      	nop
    }
  }
}
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop

0800157c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	3b10      	subs	r3, #16
 800158c:	4a14      	ldr	r2, [pc, #80]	; (80015e0 <DMA_CalcBaseAndBitshift+0x64>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	091b      	lsrs	r3, r3, #4
 8001594:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001596:	4a13      	ldr	r2, [pc, #76]	; (80015e4 <DMA_CalcBaseAndBitshift+0x68>)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d909      	bls.n	80015be <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015b2:	f023 0303 	bic.w	r3, r3, #3
 80015b6:	1d1a      	adds	r2, r3, #4
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	659a      	str	r2, [r3, #88]	; 0x58
 80015bc:	e007      	b.n	80015ce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80015c6:	f023 0303 	bic.w	r3, r3, #3
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3714      	adds	r7, #20
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	aaaaaaab 	.word	0xaaaaaaab
 80015e4:	08003454 	.word	0x08003454

080015e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d11f      	bne.n	8001642 <DMA_CheckFifoParam+0x5a>
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	2b03      	cmp	r3, #3
 8001606:	d856      	bhi.n	80016b6 <DMA_CheckFifoParam+0xce>
 8001608:	a201      	add	r2, pc, #4	; (adr r2, 8001610 <DMA_CheckFifoParam+0x28>)
 800160a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160e:	bf00      	nop
 8001610:	08001621 	.word	0x08001621
 8001614:	08001633 	.word	0x08001633
 8001618:	08001621 	.word	0x08001621
 800161c:	080016b7 	.word	0x080016b7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d046      	beq.n	80016ba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001630:	e043      	b.n	80016ba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001636:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800163a:	d140      	bne.n	80016be <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001640:	e03d      	b.n	80016be <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800164a:	d121      	bne.n	8001690 <DMA_CheckFifoParam+0xa8>
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	2b03      	cmp	r3, #3
 8001650:	d837      	bhi.n	80016c2 <DMA_CheckFifoParam+0xda>
 8001652:	a201      	add	r2, pc, #4	; (adr r2, 8001658 <DMA_CheckFifoParam+0x70>)
 8001654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001658:	08001669 	.word	0x08001669
 800165c:	0800166f 	.word	0x0800166f
 8001660:	08001669 	.word	0x08001669
 8001664:	08001681 	.word	0x08001681
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	73fb      	strb	r3, [r7, #15]
      break;
 800166c:	e030      	b.n	80016d0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d025      	beq.n	80016c6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800167e:	e022      	b.n	80016c6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001688:	d11f      	bne.n	80016ca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800168e:	e01c      	b.n	80016ca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d903      	bls.n	800169e <DMA_CheckFifoParam+0xb6>
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	2b03      	cmp	r3, #3
 800169a:	d003      	beq.n	80016a4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800169c:	e018      	b.n	80016d0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	73fb      	strb	r3, [r7, #15]
      break;
 80016a2:	e015      	b.n	80016d0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d00e      	beq.n	80016ce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	73fb      	strb	r3, [r7, #15]
      break;
 80016b4:	e00b      	b.n	80016ce <DMA_CheckFifoParam+0xe6>
      break;
 80016b6:	bf00      	nop
 80016b8:	e00a      	b.n	80016d0 <DMA_CheckFifoParam+0xe8>
      break;
 80016ba:	bf00      	nop
 80016bc:	e008      	b.n	80016d0 <DMA_CheckFifoParam+0xe8>
      break;
 80016be:	bf00      	nop
 80016c0:	e006      	b.n	80016d0 <DMA_CheckFifoParam+0xe8>
      break;
 80016c2:	bf00      	nop
 80016c4:	e004      	b.n	80016d0 <DMA_CheckFifoParam+0xe8>
      break;
 80016c6:	bf00      	nop
 80016c8:	e002      	b.n	80016d0 <DMA_CheckFifoParam+0xe8>
      break;   
 80016ca:	bf00      	nop
 80016cc:	e000      	b.n	80016d0 <DMA_CheckFifoParam+0xe8>
      break;
 80016ce:	bf00      	nop
    }
  } 
  
  return status; 
 80016d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3714      	adds	r7, #20
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b089      	sub	sp, #36	; 0x24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	e159      	b.n	80019b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016fc:	2201      	movs	r2, #1
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	429a      	cmp	r2, r3
 8001716:	f040 8148 	bne.w	80019aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	2b01      	cmp	r3, #1
 8001724:	d005      	beq.n	8001732 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800172e:	2b02      	cmp	r3, #2
 8001730:	d130      	bne.n	8001794 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	2203      	movs	r2, #3
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	68da      	ldr	r2, [r3, #12]
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001768:	2201      	movs	r2, #1
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	091b      	lsrs	r3, r3, #4
 800177e:	f003 0201 	and.w	r2, r3, #1
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	2b03      	cmp	r3, #3
 800179e:	d017      	beq.n	80017d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	68db      	ldr	r3, [r3, #12]
 80017a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	2203      	movs	r2, #3
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	43db      	mvns	r3, r3
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4013      	ands	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	69ba      	ldr	r2, [r7, #24]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d123      	bne.n	8001824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	08da      	lsrs	r2, r3, #3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3208      	adds	r2, #8
 80017e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	220f      	movs	r2, #15
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	08da      	lsrs	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3208      	adds	r2, #8
 800181e:	69b9      	ldr	r1, [r7, #24]
 8001820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0203 	and.w	r2, r3, #3
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 80a2 	beq.w	80019aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b57      	ldr	r3, [pc, #348]	; (80019c8 <HAL_GPIO_Init+0x2e8>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	4a56      	ldr	r2, [pc, #344]	; (80019c8 <HAL_GPIO_Init+0x2e8>)
 8001870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001874:	6453      	str	r3, [r2, #68]	; 0x44
 8001876:	4b54      	ldr	r3, [pc, #336]	; (80019c8 <HAL_GPIO_Init+0x2e8>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001882:	4a52      	ldr	r2, [pc, #328]	; (80019cc <HAL_GPIO_Init+0x2ec>)
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	3302      	adds	r3, #2
 800188a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	220f      	movs	r2, #15
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a49      	ldr	r2, [pc, #292]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d019      	beq.n	80018e2 <HAL_GPIO_Init+0x202>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a48      	ldr	r2, [pc, #288]	; (80019d4 <HAL_GPIO_Init+0x2f4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d013      	beq.n	80018de <HAL_GPIO_Init+0x1fe>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a47      	ldr	r2, [pc, #284]	; (80019d8 <HAL_GPIO_Init+0x2f8>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d00d      	beq.n	80018da <HAL_GPIO_Init+0x1fa>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a46      	ldr	r2, [pc, #280]	; (80019dc <HAL_GPIO_Init+0x2fc>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d007      	beq.n	80018d6 <HAL_GPIO_Init+0x1f6>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a45      	ldr	r2, [pc, #276]	; (80019e0 <HAL_GPIO_Init+0x300>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d101      	bne.n	80018d2 <HAL_GPIO_Init+0x1f2>
 80018ce:	2304      	movs	r3, #4
 80018d0:	e008      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018d2:	2307      	movs	r3, #7
 80018d4:	e006      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018d6:	2303      	movs	r3, #3
 80018d8:	e004      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018da:	2302      	movs	r3, #2
 80018dc:	e002      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018e2:	2300      	movs	r3, #0
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	f002 0203 	and.w	r2, r2, #3
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	4093      	lsls	r3, r2
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018f4:	4935      	ldr	r1, [pc, #212]	; (80019cc <HAL_GPIO_Init+0x2ec>)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	089b      	lsrs	r3, r3, #2
 80018fa:	3302      	adds	r3, #2
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001902:	4b38      	ldr	r3, [pc, #224]	; (80019e4 <HAL_GPIO_Init+0x304>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001926:	4a2f      	ldr	r2, [pc, #188]	; (80019e4 <HAL_GPIO_Init+0x304>)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800192c:	4b2d      	ldr	r3, [pc, #180]	; (80019e4 <HAL_GPIO_Init+0x304>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001950:	4a24      	ldr	r2, [pc, #144]	; (80019e4 <HAL_GPIO_Init+0x304>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001956:	4b23      	ldr	r3, [pc, #140]	; (80019e4 <HAL_GPIO_Init+0x304>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800197a:	4a1a      	ldr	r2, [pc, #104]	; (80019e4 <HAL_GPIO_Init+0x304>)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001980:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <HAL_GPIO_Init+0x304>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019a4:	4a0f      	ldr	r2, [pc, #60]	; (80019e4 <HAL_GPIO_Init+0x304>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3301      	adds	r3, #1
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	2b0f      	cmp	r3, #15
 80019b4:	f67f aea2 	bls.w	80016fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
 80019bc:	3724      	adds	r7, #36	; 0x24
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40013800 	.word	0x40013800
 80019d0:	40020000 	.word	0x40020000
 80019d4:	40020400 	.word	0x40020400
 80019d8:	40020800 	.word	0x40020800
 80019dc:	40020c00 	.word	0x40020c00
 80019e0:	40021000 	.word	0x40021000
 80019e4:	40013c00 	.word	0x40013c00

080019e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	4013      	ands	r3, r2
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a00:	2301      	movs	r3, #1
 8001a02:	73fb      	strb	r3, [r7, #15]
 8001a04:	e001      	b.n	8001a0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a06:	2300      	movs	r3, #0
 8001a08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3714      	adds	r7, #20
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	807b      	strh	r3, [r7, #2]
 8001a24:	4613      	mov	r3, r2
 8001a26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a28:	787b      	ldrb	r3, [r7, #1]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a2e:	887a      	ldrh	r2, [r7, #2]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a34:	e003      	b.n	8001a3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a36:	887b      	ldrh	r3, [r7, #2]
 8001a38:	041a      	lsls	r2, r3, #16
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	619a      	str	r2, [r3, #24]
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr

08001a4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a4a:	b480      	push	{r7}
 8001a4c:	b085      	sub	sp, #20
 8001a4e:	af00      	add	r7, sp, #0
 8001a50:	6078      	str	r0, [r7, #4]
 8001a52:	460b      	mov	r3, r1
 8001a54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	695b      	ldr	r3, [r3, #20]
 8001a5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a5c:	887a      	ldrh	r2, [r7, #2]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	4013      	ands	r3, r2
 8001a62:	041a      	lsls	r2, r3, #16
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	43d9      	mvns	r1, r3
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	400b      	ands	r3, r1
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	619a      	str	r2, [r3, #24]
}
 8001a72:	bf00      	nop
 8001a74:	3714      	adds	r7, #20
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d101      	bne.n	8001a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e264      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d075      	beq.n	8001b8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a9e:	4ba3      	ldr	r3, [pc, #652]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 030c 	and.w	r3, r3, #12
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d00c      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001aaa:	4ba0      	ldr	r3, [pc, #640]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d112      	bne.n	8001adc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ab6:	4b9d      	ldr	r3, [pc, #628]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001abe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ac2:	d10b      	bne.n	8001adc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac4:	4b99      	ldr	r3, [pc, #612]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d05b      	beq.n	8001b88 <HAL_RCC_OscConfig+0x108>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d157      	bne.n	8001b88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e23f      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae4:	d106      	bne.n	8001af4 <HAL_RCC_OscConfig+0x74>
 8001ae6:	4b91      	ldr	r3, [pc, #580]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a90      	ldr	r2, [pc, #576]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001aec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af0:	6013      	str	r3, [r2, #0]
 8001af2:	e01d      	b.n	8001b30 <HAL_RCC_OscConfig+0xb0>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x98>
 8001afe:	4b8b      	ldr	r3, [pc, #556]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a8a      	ldr	r2, [pc, #552]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b08:	6013      	str	r3, [r2, #0]
 8001b0a:	4b88      	ldr	r3, [pc, #544]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a87      	ldr	r2, [pc, #540]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b14:	6013      	str	r3, [r2, #0]
 8001b16:	e00b      	b.n	8001b30 <HAL_RCC_OscConfig+0xb0>
 8001b18:	4b84      	ldr	r3, [pc, #528]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a83      	ldr	r2, [pc, #524]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4b81      	ldr	r3, [pc, #516]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a80      	ldr	r2, [pc, #512]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d013      	beq.n	8001b60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7ff f9ca 	bl	8000ed0 <HAL_GetTick>
 8001b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b40:	f7ff f9c6 	bl	8000ed0 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b64      	cmp	r3, #100	; 0x64
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e204      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b52:	4b76      	ldr	r3, [pc, #472]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0xc0>
 8001b5e:	e014      	b.n	8001b8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b60:	f7ff f9b6 	bl	8000ed0 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b68:	f7ff f9b2 	bl	8000ed0 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b64      	cmp	r3, #100	; 0x64
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e1f0      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7a:	4b6c      	ldr	r3, [pc, #432]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0xe8>
 8001b86:	e000      	b.n	8001b8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d063      	beq.n	8001c5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b96:	4b65      	ldr	r3, [pc, #404]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	f003 030c 	and.w	r3, r3, #12
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d00b      	beq.n	8001bba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ba2:	4b62      	ldr	r3, [pc, #392]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001baa:	2b08      	cmp	r3, #8
 8001bac:	d11c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bae:	4b5f      	ldr	r3, [pc, #380]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d116      	bne.n	8001be8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bba:	4b5c      	ldr	r3, [pc, #368]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d005      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x152>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d001      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e1c4      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd2:	4b56      	ldr	r3, [pc, #344]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	4952      	ldr	r1, [pc, #328]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001be6:	e03a      	b.n	8001c5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d020      	beq.n	8001c32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf0:	4b4f      	ldr	r3, [pc, #316]	; (8001d30 <HAL_RCC_OscConfig+0x2b0>)
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf6:	f7ff f96b 	bl	8000ed0 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001bfe:	f7ff f967 	bl	8000ed0 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e1a5      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c10:	4b46      	ldr	r3, [pc, #280]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0f0      	beq.n	8001bfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1c:	4b43      	ldr	r3, [pc, #268]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	4940      	ldr	r1, [pc, #256]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]
 8001c30:	e015      	b.n	8001c5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c32:	4b3f      	ldr	r3, [pc, #252]	; (8001d30 <HAL_RCC_OscConfig+0x2b0>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7ff f94a 	bl	8000ed0 <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c40:	f7ff f946 	bl	8000ed0 <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e184      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c52:	4b36      	ldr	r3, [pc, #216]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d030      	beq.n	8001ccc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	695b      	ldr	r3, [r3, #20]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d016      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c72:	4b30      	ldr	r3, [pc, #192]	; (8001d34 <HAL_RCC_OscConfig+0x2b4>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c78:	f7ff f92a 	bl	8000ed0 <HAL_GetTick>
 8001c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c80:	f7ff f926 	bl	8000ed0 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e164      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c92:	4b26      	ldr	r3, [pc, #152]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f0      	beq.n	8001c80 <HAL_RCC_OscConfig+0x200>
 8001c9e:	e015      	b.n	8001ccc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ca0:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <HAL_RCC_OscConfig+0x2b4>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ca6:	f7ff f913 	bl	8000ed0 <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cac:	e008      	b.n	8001cc0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cae:	f7ff f90f 	bl	8000ed0 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e14d      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc0:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d1f0      	bne.n	8001cae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	f000 80a0 	beq.w	8001e1a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d10f      	bne.n	8001d0a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	4a0e      	ldr	r2, [pc, #56]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <HAL_RCC_OscConfig+0x2ac>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	60bb      	str	r3, [r7, #8]
 8001d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d06:	2301      	movs	r3, #1
 8001d08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d0a:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <HAL_RCC_OscConfig+0x2b8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d121      	bne.n	8001d5a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d16:	4b08      	ldr	r3, [pc, #32]	; (8001d38 <HAL_RCC_OscConfig+0x2b8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a07      	ldr	r2, [pc, #28]	; (8001d38 <HAL_RCC_OscConfig+0x2b8>)
 8001d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d22:	f7ff f8d5 	bl	8000ed0 <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d28:	e011      	b.n	8001d4e <HAL_RCC_OscConfig+0x2ce>
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	42470000 	.word	0x42470000
 8001d34:	42470e80 	.word	0x42470e80
 8001d38:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d3c:	f7ff f8c8 	bl	8000ed0 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e106      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4e:	4b85      	ldr	r3, [pc, #532]	; (8001f64 <HAL_RCC_OscConfig+0x4e4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d106      	bne.n	8001d70 <HAL_RCC_OscConfig+0x2f0>
 8001d62:	4b81      	ldr	r3, [pc, #516]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d66:	4a80      	ldr	r2, [pc, #512]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d6e:	e01c      	b.n	8001daa <HAL_RCC_OscConfig+0x32a>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	2b05      	cmp	r3, #5
 8001d76:	d10c      	bne.n	8001d92 <HAL_RCC_OscConfig+0x312>
 8001d78:	4b7b      	ldr	r3, [pc, #492]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d7c:	4a7a      	ldr	r2, [pc, #488]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d7e:	f043 0304 	orr.w	r3, r3, #4
 8001d82:	6713      	str	r3, [r2, #112]	; 0x70
 8001d84:	4b78      	ldr	r3, [pc, #480]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d88:	4a77      	ldr	r2, [pc, #476]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d8a:	f043 0301 	orr.w	r3, r3, #1
 8001d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001d90:	e00b      	b.n	8001daa <HAL_RCC_OscConfig+0x32a>
 8001d92:	4b75      	ldr	r3, [pc, #468]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d96:	4a74      	ldr	r2, [pc, #464]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d9e:	4b72      	ldr	r3, [pc, #456]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da2:	4a71      	ldr	r2, [pc, #452]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001da4:	f023 0304 	bic.w	r3, r3, #4
 8001da8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d015      	beq.n	8001dde <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db2:	f7ff f88d 	bl	8000ed0 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001db8:	e00a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dba:	f7ff f889 	bl	8000ed0 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e0c5      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dd0:	4b65      	ldr	r3, [pc, #404]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0ee      	beq.n	8001dba <HAL_RCC_OscConfig+0x33a>
 8001ddc:	e014      	b.n	8001e08 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dde:	f7ff f877 	bl	8000ed0 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001de4:	e00a      	b.n	8001dfc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001de6:	f7ff f873 	bl	8000ed0 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e0af      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dfc:	4b5a      	ldr	r3, [pc, #360]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1ee      	bne.n	8001de6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e08:	7dfb      	ldrb	r3, [r7, #23]
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d105      	bne.n	8001e1a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e0e:	4b56      	ldr	r3, [pc, #344]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	4a55      	ldr	r2, [pc, #340]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001e14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e18:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 809b 	beq.w	8001f5a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e24:	4b50      	ldr	r3, [pc, #320]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 030c 	and.w	r3, r3, #12
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d05c      	beq.n	8001eea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d141      	bne.n	8001ebc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e38:	4b4c      	ldr	r3, [pc, #304]	; (8001f6c <HAL_RCC_OscConfig+0x4ec>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e3e:	f7ff f847 	bl	8000ed0 <HAL_GetTick>
 8001e42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e44:	e008      	b.n	8001e58 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e46:	f7ff f843 	bl	8000ed0 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d901      	bls.n	8001e58 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001e54:	2303      	movs	r3, #3
 8001e56:	e081      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e58:	4b43      	ldr	r3, [pc, #268]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f0      	bne.n	8001e46 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69da      	ldr	r2, [r3, #28]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	019b      	lsls	r3, r3, #6
 8001e74:	431a      	orrs	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e7a:	085b      	lsrs	r3, r3, #1
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	041b      	lsls	r3, r3, #16
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e86:	061b      	lsls	r3, r3, #24
 8001e88:	4937      	ldr	r1, [pc, #220]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e8e:	4b37      	ldr	r3, [pc, #220]	; (8001f6c <HAL_RCC_OscConfig+0x4ec>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e94:	f7ff f81c 	bl	8000ed0 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7ff f818 	bl	8000ed0 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e056      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eae:	4b2e      	ldr	r3, [pc, #184]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x41c>
 8001eba:	e04e      	b.n	8001f5a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ebc:	4b2b      	ldr	r3, [pc, #172]	; (8001f6c <HAL_RCC_OscConfig+0x4ec>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec2:	f7ff f805 	bl	8000ed0 <HAL_GetTick>
 8001ec6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec8:	e008      	b.n	8001edc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eca:	f7ff f801 	bl	8000ed0 <HAL_GetTick>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e03f      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001edc:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1f0      	bne.n	8001eca <HAL_RCC_OscConfig+0x44a>
 8001ee8:	e037      	b.n	8001f5a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e032      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ef6:	4b1c      	ldr	r3, [pc, #112]	; (8001f68 <HAL_RCC_OscConfig+0x4e8>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d028      	beq.n	8001f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d121      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d11a      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f20:	68fa      	ldr	r2, [r7, #12]
 8001f22:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f26:	4013      	ands	r3, r2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f2c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d111      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3c:	085b      	lsrs	r3, r3, #1
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d107      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f50:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d001      	beq.n	8001f5a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40007000 	.word	0x40007000
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	42470060 	.word	0x42470060

08001f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e0cc      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f84:	4b68      	ldr	r3, [pc, #416]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	683a      	ldr	r2, [r7, #0]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d90c      	bls.n	8001fac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f92:	4b65      	ldr	r3, [pc, #404]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	b2d2      	uxtb	r2, r2
 8001f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b63      	ldr	r3, [pc, #396]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d001      	beq.n	8001fac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e0b8      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d020      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc4:	4b59      	ldr	r3, [pc, #356]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	4a58      	ldr	r2, [pc, #352]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fdc:	4b53      	ldr	r3, [pc, #332]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4a52      	ldr	r2, [pc, #328]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fe6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fe8:	4b50      	ldr	r3, [pc, #320]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	494d      	ldr	r1, [pc, #308]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b00      	cmp	r3, #0
 8002004:	d044      	beq.n	8002090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	2b01      	cmp	r3, #1
 800200c:	d107      	bne.n	800201e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200e:	4b47      	ldr	r3, [pc, #284]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d119      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	e07f      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b02      	cmp	r3, #2
 8002024:	d003      	beq.n	800202e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800202a:	2b03      	cmp	r3, #3
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202e:	4b3f      	ldr	r3, [pc, #252]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e06f      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203e:	4b3b      	ldr	r3, [pc, #236]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e067      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800204e:	4b37      	ldr	r3, [pc, #220]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f023 0203 	bic.w	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4934      	ldr	r1, [pc, #208]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002060:	f7fe ff36 	bl	8000ed0 <HAL_GetTick>
 8002064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	e00a      	b.n	800207e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002068:	f7fe ff32 	bl	8000ed0 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	; 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e04f      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	4b2b      	ldr	r3, [pc, #172]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 020c 	and.w	r2, r3, #12
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	429a      	cmp	r2, r3
 800208e:	d1eb      	bne.n	8002068 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002090:	4b25      	ldr	r3, [pc, #148]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d20c      	bcs.n	80020b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b22      	ldr	r3, [pc, #136]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	b2d2      	uxtb	r2, r2
 80020a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a6:	4b20      	ldr	r3, [pc, #128]	; (8002128 <HAL_RCC_ClockConfig+0x1b8>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d001      	beq.n	80020b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e032      	b.n	800211e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	4916      	ldr	r1, [pc, #88]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020d2:	4313      	orrs	r3, r2
 80020d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d009      	beq.n	80020f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020e2:	4b12      	ldr	r3, [pc, #72]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	490e      	ldr	r1, [pc, #56]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020f2:	4313      	orrs	r3, r2
 80020f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020f6:	f000 f821 	bl	800213c <HAL_RCC_GetSysClockFreq>
 80020fa:	4602      	mov	r2, r0
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCC_ClockConfig+0x1bc>)
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	091b      	lsrs	r3, r3, #4
 8002102:	f003 030f 	and.w	r3, r3, #15
 8002106:	490a      	ldr	r1, [pc, #40]	; (8002130 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	5ccb      	ldrb	r3, [r1, r3]
 800210a:	fa22 f303 	lsr.w	r3, r2, r3
 800210e:	4a09      	ldr	r2, [pc, #36]	; (8002134 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002112:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_RCC_ClockConfig+0x1c8>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fe96 	bl	8000e48 <HAL_InitTick>

  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	40023c00 	.word	0x40023c00
 800212c:	40023800 	.word	0x40023800
 8002130:	0800343c 	.word	0x0800343c
 8002134:	20000014 	.word	0x20000014
 8002138:	20000018 	.word	0x20000018

0800213c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800213c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002140:	b084      	sub	sp, #16
 8002142:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002144:	2300      	movs	r3, #0
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	2300      	movs	r3, #0
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	2300      	movs	r3, #0
 800214e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002154:	4b67      	ldr	r3, [pc, #412]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 030c 	and.w	r3, r3, #12
 800215c:	2b08      	cmp	r3, #8
 800215e:	d00d      	beq.n	800217c <HAL_RCC_GetSysClockFreq+0x40>
 8002160:	2b08      	cmp	r3, #8
 8002162:	f200 80bd 	bhi.w	80022e0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002166:	2b00      	cmp	r3, #0
 8002168:	d002      	beq.n	8002170 <HAL_RCC_GetSysClockFreq+0x34>
 800216a:	2b04      	cmp	r3, #4
 800216c:	d003      	beq.n	8002176 <HAL_RCC_GetSysClockFreq+0x3a>
 800216e:	e0b7      	b.n	80022e0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002170:	4b61      	ldr	r3, [pc, #388]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002172:	60bb      	str	r3, [r7, #8]
       break;
 8002174:	e0b7      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002176:	4b61      	ldr	r3, [pc, #388]	; (80022fc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002178:	60bb      	str	r3, [r7, #8]
      break;
 800217a:	e0b4      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800217c:	4b5d      	ldr	r3, [pc, #372]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002184:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002186:	4b5b      	ldr	r3, [pc, #364]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800218e:	2b00      	cmp	r3, #0
 8002190:	d04d      	beq.n	800222e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002192:	4b58      	ldr	r3, [pc, #352]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	099b      	lsrs	r3, r3, #6
 8002198:	461a      	mov	r2, r3
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80021a2:	f04f 0100 	mov.w	r1, #0
 80021a6:	ea02 0800 	and.w	r8, r2, r0
 80021aa:	ea03 0901 	and.w	r9, r3, r1
 80021ae:	4640      	mov	r0, r8
 80021b0:	4649      	mov	r1, r9
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	014b      	lsls	r3, r1, #5
 80021bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80021c0:	0142      	lsls	r2, r0, #5
 80021c2:	4610      	mov	r0, r2
 80021c4:	4619      	mov	r1, r3
 80021c6:	ebb0 0008 	subs.w	r0, r0, r8
 80021ca:	eb61 0109 	sbc.w	r1, r1, r9
 80021ce:	f04f 0200 	mov.w	r2, #0
 80021d2:	f04f 0300 	mov.w	r3, #0
 80021d6:	018b      	lsls	r3, r1, #6
 80021d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80021dc:	0182      	lsls	r2, r0, #6
 80021de:	1a12      	subs	r2, r2, r0
 80021e0:	eb63 0301 	sbc.w	r3, r3, r1
 80021e4:	f04f 0000 	mov.w	r0, #0
 80021e8:	f04f 0100 	mov.w	r1, #0
 80021ec:	00d9      	lsls	r1, r3, #3
 80021ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80021f2:	00d0      	lsls	r0, r2, #3
 80021f4:	4602      	mov	r2, r0
 80021f6:	460b      	mov	r3, r1
 80021f8:	eb12 0208 	adds.w	r2, r2, r8
 80021fc:	eb43 0309 	adc.w	r3, r3, r9
 8002200:	f04f 0000 	mov.w	r0, #0
 8002204:	f04f 0100 	mov.w	r1, #0
 8002208:	0259      	lsls	r1, r3, #9
 800220a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800220e:	0250      	lsls	r0, r2, #9
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	461a      	mov	r2, r3
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	f7fd ffda 	bl	80001d8 <__aeabi_uldivmod>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4613      	mov	r3, r2
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	e04a      	b.n	80022c4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800222e:	4b31      	ldr	r3, [pc, #196]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	099b      	lsrs	r3, r3, #6
 8002234:	461a      	mov	r2, r3
 8002236:	f04f 0300 	mov.w	r3, #0
 800223a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800223e:	f04f 0100 	mov.w	r1, #0
 8002242:	ea02 0400 	and.w	r4, r2, r0
 8002246:	ea03 0501 	and.w	r5, r3, r1
 800224a:	4620      	mov	r0, r4
 800224c:	4629      	mov	r1, r5
 800224e:	f04f 0200 	mov.w	r2, #0
 8002252:	f04f 0300 	mov.w	r3, #0
 8002256:	014b      	lsls	r3, r1, #5
 8002258:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800225c:	0142      	lsls	r2, r0, #5
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	1b00      	subs	r0, r0, r4
 8002264:	eb61 0105 	sbc.w	r1, r1, r5
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	018b      	lsls	r3, r1, #6
 8002272:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002276:	0182      	lsls	r2, r0, #6
 8002278:	1a12      	subs	r2, r2, r0
 800227a:	eb63 0301 	sbc.w	r3, r3, r1
 800227e:	f04f 0000 	mov.w	r0, #0
 8002282:	f04f 0100 	mov.w	r1, #0
 8002286:	00d9      	lsls	r1, r3, #3
 8002288:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800228c:	00d0      	lsls	r0, r2, #3
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	1912      	adds	r2, r2, r4
 8002294:	eb45 0303 	adc.w	r3, r5, r3
 8002298:	f04f 0000 	mov.w	r0, #0
 800229c:	f04f 0100 	mov.w	r1, #0
 80022a0:	0299      	lsls	r1, r3, #10
 80022a2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80022a6:	0290      	lsls	r0, r2, #10
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4610      	mov	r0, r2
 80022ae:	4619      	mov	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	461a      	mov	r2, r3
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	f7fd ff8e 	bl	80001d8 <__aeabi_uldivmod>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	4613      	mov	r3, r2
 80022c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	0c1b      	lsrs	r3, r3, #16
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	3301      	adds	r3, #1
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022dc:	60bb      	str	r3, [r7, #8]
      break;
 80022de:	e002      	b.n	80022e6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80022e2:	60bb      	str	r3, [r7, #8]
      break;
 80022e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022e6:	68bb      	ldr	r3, [r7, #8]
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800
 80022f8:	00f42400 	.word	0x00f42400
 80022fc:	007a1200 	.word	0x007a1200

08002300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <HAL_RCC_GetHCLKFreq+0x14>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000014 	.word	0x20000014

08002318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800231c:	f7ff fff0 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8002320:	4602      	mov	r2, r0
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	0a9b      	lsrs	r3, r3, #10
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	4903      	ldr	r1, [pc, #12]	; (800233c <HAL_RCC_GetPCLK1Freq+0x24>)
 800232e:	5ccb      	ldrb	r3, [r1, r3]
 8002330:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40023800 	.word	0x40023800
 800233c:	0800344c 	.word	0x0800344c

08002340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002344:	f7ff ffdc 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8002348:	4602      	mov	r2, r0
 800234a:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	0b5b      	lsrs	r3, r3, #13
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	4903      	ldr	r1, [pc, #12]	; (8002364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002356:	5ccb      	ldrb	r3, [r1, r3]
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
}
 800235c:	4618      	mov	r0, r3
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40023800 	.word	0x40023800
 8002364:	0800344c 	.word	0x0800344c

08002368 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e041      	b.n	80023fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d106      	bne.n	8002394 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7fe fbf2 	bl	8000b78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2202      	movs	r2, #2
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3304      	adds	r3, #4
 80023a4:	4619      	mov	r1, r3
 80023a6:	4610      	mov	r0, r2
 80023a8:	f000 fac0 	bl	800292c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b082      	sub	sp, #8
 800240a:	af00      	add	r7, sp, #0
 800240c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e041      	b.n	800249c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	d106      	bne.n	8002432 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f000 f839 	bl	80024a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2202      	movs	r2, #2
 8002436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	3304      	adds	r3, #4
 8002442:	4619      	mov	r1, r3
 8002444:	4610      	mov	r0, r2
 8002446:	f000 fa71 	bl	800292c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2201      	movs	r2, #1
 8002466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2201      	movs	r2, #1
 8002486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b084      	sub	sp, #16
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d109      	bne.n	80024dc <HAL_TIM_PWM_Start+0x24>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	bf14      	ite	ne
 80024d4:	2301      	movne	r3, #1
 80024d6:	2300      	moveq	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	e022      	b.n	8002522 <HAL_TIM_PWM_Start+0x6a>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d109      	bne.n	80024f6 <HAL_TIM_PWM_Start+0x3e>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	bf14      	ite	ne
 80024ee:	2301      	movne	r3, #1
 80024f0:	2300      	moveq	r3, #0
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	e015      	b.n	8002522 <HAL_TIM_PWM_Start+0x6a>
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	2b08      	cmp	r3, #8
 80024fa:	d109      	bne.n	8002510 <HAL_TIM_PWM_Start+0x58>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b01      	cmp	r3, #1
 8002506:	bf14      	ite	ne
 8002508:	2301      	movne	r3, #1
 800250a:	2300      	moveq	r3, #0
 800250c:	b2db      	uxtb	r3, r3
 800250e:	e008      	b.n	8002522 <HAL_TIM_PWM_Start+0x6a>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002516:	b2db      	uxtb	r3, r3
 8002518:	2b01      	cmp	r3, #1
 800251a:	bf14      	ite	ne
 800251c:	2301      	movne	r3, #1
 800251e:	2300      	moveq	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e068      	b.n	80025fc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d104      	bne.n	800253a <HAL_TIM_PWM_Start+0x82>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2202      	movs	r2, #2
 8002534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002538:	e013      	b.n	8002562 <HAL_TIM_PWM_Start+0xaa>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	2b04      	cmp	r3, #4
 800253e:	d104      	bne.n	800254a <HAL_TIM_PWM_Start+0x92>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002548:	e00b      	b.n	8002562 <HAL_TIM_PWM_Start+0xaa>
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	2b08      	cmp	r3, #8
 800254e:	d104      	bne.n	800255a <HAL_TIM_PWM_Start+0xa2>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	2202      	movs	r2, #2
 8002554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002558:	e003      	b.n	8002562 <HAL_TIM_PWM_Start+0xaa>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2202      	movs	r2, #2
 800255e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2201      	movs	r2, #1
 8002568:	6839      	ldr	r1, [r7, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f000 fc84 	bl	8002e78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a23      	ldr	r2, [pc, #140]	; (8002604 <HAL_TIM_PWM_Start+0x14c>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d107      	bne.n	800258a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002588:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a1d      	ldr	r2, [pc, #116]	; (8002604 <HAL_TIM_PWM_Start+0x14c>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d018      	beq.n	80025c6 <HAL_TIM_PWM_Start+0x10e>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259c:	d013      	beq.n	80025c6 <HAL_TIM_PWM_Start+0x10e>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a19      	ldr	r2, [pc, #100]	; (8002608 <HAL_TIM_PWM_Start+0x150>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d00e      	beq.n	80025c6 <HAL_TIM_PWM_Start+0x10e>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a17      	ldr	r2, [pc, #92]	; (800260c <HAL_TIM_PWM_Start+0x154>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d009      	beq.n	80025c6 <HAL_TIM_PWM_Start+0x10e>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a16      	ldr	r2, [pc, #88]	; (8002610 <HAL_TIM_PWM_Start+0x158>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d004      	beq.n	80025c6 <HAL_TIM_PWM_Start+0x10e>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a14      	ldr	r2, [pc, #80]	; (8002614 <HAL_TIM_PWM_Start+0x15c>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d111      	bne.n	80025ea <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2b06      	cmp	r3, #6
 80025d6:	d010      	beq.n	80025fa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025e8:	e007      	b.n	80025fa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f042 0201 	orr.w	r2, r2, #1
 80025f8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025fa:	2300      	movs	r3, #0
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40010000 	.word	0x40010000
 8002608:	40000400 	.word	0x40000400
 800260c:	40000800 	.word	0x40000800
 8002610:	40000c00 	.word	0x40000c00
 8002614:	40014000 	.word	0x40014000

08002618 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	60f8      	str	r0, [r7, #12]
 8002620:	60b9      	str	r1, [r7, #8]
 8002622:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002624:	2300      	movs	r3, #0
 8002626:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800262e:	2b01      	cmp	r3, #1
 8002630:	d101      	bne.n	8002636 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002632:	2302      	movs	r3, #2
 8002634:	e0ae      	b.n	8002794 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b0c      	cmp	r3, #12
 8002642:	f200 809f 	bhi.w	8002784 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002646:	a201      	add	r2, pc, #4	; (adr r2, 800264c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264c:	08002681 	.word	0x08002681
 8002650:	08002785 	.word	0x08002785
 8002654:	08002785 	.word	0x08002785
 8002658:	08002785 	.word	0x08002785
 800265c:	080026c1 	.word	0x080026c1
 8002660:	08002785 	.word	0x08002785
 8002664:	08002785 	.word	0x08002785
 8002668:	08002785 	.word	0x08002785
 800266c:	08002703 	.word	0x08002703
 8002670:	08002785 	.word	0x08002785
 8002674:	08002785 	.word	0x08002785
 8002678:	08002785 	.word	0x08002785
 800267c:	08002743 	.word	0x08002743
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	68b9      	ldr	r1, [r7, #8]
 8002686:	4618      	mov	r0, r3
 8002688:	f000 f9d0 	bl	8002a2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0208 	orr.w	r2, r2, #8
 800269a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	699a      	ldr	r2, [r3, #24]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0204 	bic.w	r2, r2, #4
 80026aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6999      	ldr	r1, [r3, #24]
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	691a      	ldr	r2, [r3, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	619a      	str	r2, [r3, #24]
      break;
 80026be:	e064      	b.n	800278a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f000 fa16 	bl	8002af8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	699a      	ldr	r2, [r3, #24]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699a      	ldr	r2, [r3, #24]
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6999      	ldr	r1, [r3, #24]
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	021a      	lsls	r2, r3, #8
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	430a      	orrs	r2, r1
 80026fe:	619a      	str	r2, [r3, #24]
      break;
 8002700:	e043      	b.n	800278a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68b9      	ldr	r1, [r7, #8]
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fa61 	bl	8002bd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	69da      	ldr	r2, [r3, #28]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f042 0208 	orr.w	r2, r2, #8
 800271c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	69da      	ldr	r2, [r3, #28]
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 0204 	bic.w	r2, r2, #4
 800272c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	69d9      	ldr	r1, [r3, #28]
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	691a      	ldr	r2, [r3, #16]
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	430a      	orrs	r2, r1
 800273e:	61da      	str	r2, [r3, #28]
      break;
 8002740:	e023      	b.n	800278a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68b9      	ldr	r1, [r7, #8]
 8002748:	4618      	mov	r0, r3
 800274a:	f000 faab 	bl	8002ca4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	69da      	ldr	r2, [r3, #28]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800275c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	69da      	ldr	r2, [r3, #28]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800276c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	69d9      	ldr	r1, [r3, #28]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	021a      	lsls	r2, r3, #8
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	61da      	str	r2, [r3, #28]
      break;
 8002782:	e002      	b.n	800278a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	75fb      	strb	r3, [r7, #23]
      break;
 8002788:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002792:	7dfb      	ldrb	r3, [r7, #23]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3718      	adds	r7, #24
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}

0800279c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027a6:	2300      	movs	r3, #0
 80027a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_TIM_ConfigClockSource+0x1c>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e0b4      	b.n	8002922 <HAL_TIM_ConfigClockSource+0x186>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2202      	movs	r2, #2
 80027c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68ba      	ldr	r2, [r7, #8]
 80027e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f0:	d03e      	beq.n	8002870 <HAL_TIM_ConfigClockSource+0xd4>
 80027f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f6:	f200 8087 	bhi.w	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 80027fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fe:	f000 8086 	beq.w	800290e <HAL_TIM_ConfigClockSource+0x172>
 8002802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002806:	d87f      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 8002808:	2b70      	cmp	r3, #112	; 0x70
 800280a:	d01a      	beq.n	8002842 <HAL_TIM_ConfigClockSource+0xa6>
 800280c:	2b70      	cmp	r3, #112	; 0x70
 800280e:	d87b      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 8002810:	2b60      	cmp	r3, #96	; 0x60
 8002812:	d050      	beq.n	80028b6 <HAL_TIM_ConfigClockSource+0x11a>
 8002814:	2b60      	cmp	r3, #96	; 0x60
 8002816:	d877      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 8002818:	2b50      	cmp	r3, #80	; 0x50
 800281a:	d03c      	beq.n	8002896 <HAL_TIM_ConfigClockSource+0xfa>
 800281c:	2b50      	cmp	r3, #80	; 0x50
 800281e:	d873      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 8002820:	2b40      	cmp	r3, #64	; 0x40
 8002822:	d058      	beq.n	80028d6 <HAL_TIM_ConfigClockSource+0x13a>
 8002824:	2b40      	cmp	r3, #64	; 0x40
 8002826:	d86f      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 8002828:	2b30      	cmp	r3, #48	; 0x30
 800282a:	d064      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x15a>
 800282c:	2b30      	cmp	r3, #48	; 0x30
 800282e:	d86b      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 8002830:	2b20      	cmp	r3, #32
 8002832:	d060      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x15a>
 8002834:	2b20      	cmp	r3, #32
 8002836:	d867      	bhi.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
 8002838:	2b00      	cmp	r3, #0
 800283a:	d05c      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x15a>
 800283c:	2b10      	cmp	r3, #16
 800283e:	d05a      	beq.n	80028f6 <HAL_TIM_ConfigClockSource+0x15a>
 8002840:	e062      	b.n	8002908 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	6899      	ldr	r1, [r3, #8]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f000 faf1 	bl	8002e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002864:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68ba      	ldr	r2, [r7, #8]
 800286c:	609a      	str	r2, [r3, #8]
      break;
 800286e:	e04f      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	6899      	ldr	r1, [r3, #8]
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f000 fada 	bl	8002e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689a      	ldr	r2, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002892:	609a      	str	r2, [r3, #8]
      break;
 8002894:	e03c      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6818      	ldr	r0, [r3, #0]
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	6859      	ldr	r1, [r3, #4]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	461a      	mov	r2, r3
 80028a4:	f000 fa4e 	bl	8002d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2150      	movs	r1, #80	; 0x50
 80028ae:	4618      	mov	r0, r3
 80028b0:	f000 faa7 	bl	8002e02 <TIM_ITRx_SetConfig>
      break;
 80028b4:	e02c      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6818      	ldr	r0, [r3, #0]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	6859      	ldr	r1, [r3, #4]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	461a      	mov	r2, r3
 80028c4:	f000 fa6d 	bl	8002da2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2160      	movs	r1, #96	; 0x60
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 fa97 	bl	8002e02 <TIM_ITRx_SetConfig>
      break;
 80028d4:	e01c      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6818      	ldr	r0, [r3, #0]
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	6859      	ldr	r1, [r3, #4]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	461a      	mov	r2, r3
 80028e4:	f000 fa2e 	bl	8002d44 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2140      	movs	r1, #64	; 0x40
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fa87 	bl	8002e02 <TIM_ITRx_SetConfig>
      break;
 80028f4:	e00c      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4619      	mov	r1, r3
 8002900:	4610      	mov	r0, r2
 8002902:	f000 fa7e 	bl	8002e02 <TIM_ITRx_SetConfig>
      break;
 8002906:	e003      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
      break;
 800290c:	e000      	b.n	8002910 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800290e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002920:	7bfb      	ldrb	r3, [r7, #15]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
	...

0800292c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4a34      	ldr	r2, [pc, #208]	; (8002a10 <TIM_Base_SetConfig+0xe4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d00f      	beq.n	8002964 <TIM_Base_SetConfig+0x38>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800294a:	d00b      	beq.n	8002964 <TIM_Base_SetConfig+0x38>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	4a31      	ldr	r2, [pc, #196]	; (8002a14 <TIM_Base_SetConfig+0xe8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d007      	beq.n	8002964 <TIM_Base_SetConfig+0x38>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a30      	ldr	r2, [pc, #192]	; (8002a18 <TIM_Base_SetConfig+0xec>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d003      	beq.n	8002964 <TIM_Base_SetConfig+0x38>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a2f      	ldr	r2, [pc, #188]	; (8002a1c <TIM_Base_SetConfig+0xf0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d108      	bne.n	8002976 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	4313      	orrs	r3, r2
 8002974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a25      	ldr	r2, [pc, #148]	; (8002a10 <TIM_Base_SetConfig+0xe4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d01b      	beq.n	80029b6 <TIM_Base_SetConfig+0x8a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002984:	d017      	beq.n	80029b6 <TIM_Base_SetConfig+0x8a>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a22      	ldr	r2, [pc, #136]	; (8002a14 <TIM_Base_SetConfig+0xe8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d013      	beq.n	80029b6 <TIM_Base_SetConfig+0x8a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a21      	ldr	r2, [pc, #132]	; (8002a18 <TIM_Base_SetConfig+0xec>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00f      	beq.n	80029b6 <TIM_Base_SetConfig+0x8a>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a20      	ldr	r2, [pc, #128]	; (8002a1c <TIM_Base_SetConfig+0xf0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00b      	beq.n	80029b6 <TIM_Base_SetConfig+0x8a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a1f      	ldr	r2, [pc, #124]	; (8002a20 <TIM_Base_SetConfig+0xf4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d007      	beq.n	80029b6 <TIM_Base_SetConfig+0x8a>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a1e      	ldr	r2, [pc, #120]	; (8002a24 <TIM_Base_SetConfig+0xf8>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d003      	beq.n	80029b6 <TIM_Base_SetConfig+0x8a>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a1d      	ldr	r2, [pc, #116]	; (8002a28 <TIM_Base_SetConfig+0xfc>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d108      	bne.n	80029c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	689a      	ldr	r2, [r3, #8]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a08      	ldr	r2, [pc, #32]	; (8002a10 <TIM_Base_SetConfig+0xe4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d103      	bne.n	80029fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	615a      	str	r2, [r3, #20]
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40010000 	.word	0x40010000
 8002a14:	40000400 	.word	0x40000400
 8002a18:	40000800 	.word	0x40000800
 8002a1c:	40000c00 	.word	0x40000c00
 8002a20:	40014000 	.word	0x40014000
 8002a24:	40014400 	.word	0x40014400
 8002a28:	40014800 	.word	0x40014800

08002a2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b087      	sub	sp, #28
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	f023 0201 	bic.w	r2, r3, #1
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f023 0303 	bic.w	r3, r3, #3
 8002a62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f023 0302 	bic.w	r3, r3, #2
 8002a74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a1c      	ldr	r2, [pc, #112]	; (8002af4 <TIM_OC1_SetConfig+0xc8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d10c      	bne.n	8002aa2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	f023 0308 	bic.w	r3, r3, #8
 8002a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	697a      	ldr	r2, [r7, #20]
 8002a96:	4313      	orrs	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f023 0304 	bic.w	r3, r3, #4
 8002aa0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a13      	ldr	r2, [pc, #76]	; (8002af4 <TIM_OC1_SetConfig+0xc8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d111      	bne.n	8002ace <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	693a      	ldr	r2, [r7, #16]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68fa      	ldr	r2, [r7, #12]
 8002ad8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685a      	ldr	r2, [r3, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	621a      	str	r2, [r3, #32]
}
 8002ae8:	bf00      	nop
 8002aea:	371c      	adds	r7, #28
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	40010000 	.word	0x40010000

08002af8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b087      	sub	sp, #28
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a1b      	ldr	r3, [r3, #32]
 8002b06:	f023 0210 	bic.w	r2, r3, #16
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	021b      	lsls	r3, r3, #8
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f023 0320 	bic.w	r3, r3, #32
 8002b42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	011b      	lsls	r3, r3, #4
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a1e      	ldr	r2, [pc, #120]	; (8002bcc <TIM_OC2_SetConfig+0xd4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d10d      	bne.n	8002b74 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	011b      	lsls	r3, r3, #4
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a15      	ldr	r2, [pc, #84]	; (8002bcc <TIM_OC2_SetConfig+0xd4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d113      	bne.n	8002ba4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	621a      	str	r2, [r3, #32]
}
 8002bbe:	bf00      	nop
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40010000 	.word	0x40010000

08002bd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a1b      	ldr	r3, [r3, #32]
 8002bde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69db      	ldr	r3, [r3, #28]
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	f023 0303 	bic.w	r3, r3, #3
 8002c06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	021b      	lsls	r3, r3, #8
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a1d      	ldr	r2, [pc, #116]	; (8002ca0 <TIM_OC3_SetConfig+0xd0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d10d      	bne.n	8002c4a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002c34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	68db      	ldr	r3, [r3, #12]
 8002c3a:	021b      	lsls	r3, r3, #8
 8002c3c:	697a      	ldr	r2, [r7, #20]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a14      	ldr	r2, [pc, #80]	; (8002ca0 <TIM_OC3_SetConfig+0xd0>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d113      	bne.n	8002c7a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c52:	693b      	ldr	r3, [r7, #16]
 8002c54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	011b      	lsls	r3, r3, #4
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	621a      	str	r2, [r3, #32]
}
 8002c94:	bf00      	nop
 8002c96:	371c      	adds	r7, #28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	40010000 	.word	0x40010000

08002ca4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b087      	sub	sp, #28
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
 8002cbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	021b      	lsls	r3, r3, #8
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002cee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	031b      	lsls	r3, r3, #12
 8002cf6:	693a      	ldr	r2, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a10      	ldr	r2, [pc, #64]	; (8002d40 <TIM_OC4_SetConfig+0x9c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d109      	bne.n	8002d18 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	019b      	lsls	r3, r3, #6
 8002d12:	697a      	ldr	r2, [r7, #20]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68fa      	ldr	r2, [r7, #12]
 8002d22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	621a      	str	r2, [r3, #32]
}
 8002d32:	bf00      	nop
 8002d34:	371c      	adds	r7, #28
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40010000 	.word	0x40010000

08002d44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b087      	sub	sp, #28
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a1b      	ldr	r3, [r3, #32]
 8002d54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	f023 0201 	bic.w	r2, r3, #1
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	4313      	orrs	r3, r2
 8002d78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f023 030a 	bic.w	r3, r3, #10
 8002d80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d82:	697a      	ldr	r2, [r7, #20]
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	621a      	str	r2, [r3, #32]
}
 8002d96:	bf00      	nop
 8002d98:	371c      	adds	r7, #28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b087      	sub	sp, #28
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	f023 0210 	bic.w	r2, r3, #16
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6a1b      	ldr	r3, [r3, #32]
 8002dc4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002dcc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	031b      	lsls	r3, r3, #12
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002dde:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	693a      	ldr	r2, [r7, #16]
 8002df4:	621a      	str	r2, [r3, #32]
}
 8002df6:	bf00      	nop
 8002df8:	371c      	adds	r7, #28
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr

08002e02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e02:	b480      	push	{r7}
 8002e04:	b085      	sub	sp, #20
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	6078      	str	r0, [r7, #4]
 8002e0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e1a:	683a      	ldr	r2, [r7, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	f043 0307 	orr.w	r3, r3, #7
 8002e24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	68fa      	ldr	r2, [r7, #12]
 8002e2a:	609a      	str	r2, [r3, #8]
}
 8002e2c:	bf00      	nop
 8002e2e:	3714      	adds	r7, #20
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
 8002e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002e52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	021a      	lsls	r2, r3, #8
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	609a      	str	r2, [r3, #8]
}
 8002e6c:	bf00      	nop
 8002e6e:	371c      	adds	r7, #28
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b087      	sub	sp, #28
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f003 031f 	and.w	r3, r3, #31
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6a1a      	ldr	r2, [r3, #32]
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	43db      	mvns	r3, r3
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a1a      	ldr	r2, [r3, #32]
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	f003 031f 	and.w	r3, r3, #31
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	621a      	str	r2, [r3, #32]
}
 8002eb6:	bf00      	nop
 8002eb8:	371c      	adds	r7, #28
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b085      	sub	sp, #20
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d101      	bne.n	8002edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ed8:	2302      	movs	r3, #2
 8002eda:	e050      	b.n	8002f7e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a1c      	ldr	r2, [pc, #112]	; (8002f8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d018      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f28:	d013      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a18      	ldr	r2, [pc, #96]	; (8002f90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d00e      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a16      	ldr	r2, [pc, #88]	; (8002f94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d009      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a15      	ldr	r2, [pc, #84]	; (8002f98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d004      	beq.n	8002f52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a13      	ldr	r2, [pc, #76]	; (8002f9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d10c      	bne.n	8002f6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40010000 	.word	0x40010000
 8002f90:	40000400 	.word	0x40000400
 8002f94:	40000800 	.word	0x40000800
 8002f98:	40000c00 	.word	0x40000c00
 8002f9c:	40014000 	.word	0x40014000

08002fa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e03f      	b.n	8003032 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d106      	bne.n	8002fcc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7fd fe64 	bl	8000c94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2224      	movs	r2, #36	; 0x24
 8002fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68da      	ldr	r2, [r3, #12]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fe2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f829 	bl	800303c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	691a      	ldr	r2, [r3, #16]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ff8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	695a      	ldr	r2, [r3, #20]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003008:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003018:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2220      	movs	r2, #32
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003030:	2300      	movs	r3, #0
}
 8003032:	4618      	mov	r0, r3
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800303c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003040:	b09f      	sub	sp, #124	; 0x7c
 8003042:	af00      	add	r7, sp, #0
 8003044:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003046:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	691b      	ldr	r3, [r3, #16]
 800304c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003052:	68d9      	ldr	r1, [r3, #12]
 8003054:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	ea40 0301 	orr.w	r3, r0, r1
 800305c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800305e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003060:	689a      	ldr	r2, [r3, #8]
 8003062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	431a      	orrs	r2, r3
 8003068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800306a:	695b      	ldr	r3, [r3, #20]
 800306c:	431a      	orrs	r2, r3
 800306e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003070:	69db      	ldr	r3, [r3, #28]
 8003072:	4313      	orrs	r3, r2
 8003074:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003080:	f021 010c 	bic.w	r1, r1, #12
 8003084:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800308a:	430b      	orrs	r3, r1
 800308c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800308e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	695b      	ldr	r3, [r3, #20]
 8003094:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800309a:	6999      	ldr	r1, [r3, #24]
 800309c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	ea40 0301 	orr.w	r3, r0, r1
 80030a4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80030a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	4bc5      	ldr	r3, [pc, #788]	; (80033c0 <UART_SetConfig+0x384>)
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d004      	beq.n	80030ba <UART_SetConfig+0x7e>
 80030b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4bc3      	ldr	r3, [pc, #780]	; (80033c4 <UART_SetConfig+0x388>)
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d103      	bne.n	80030c2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80030ba:	f7ff f941 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 80030be:	6778      	str	r0, [r7, #116]	; 0x74
 80030c0:	e002      	b.n	80030c8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80030c2:	f7ff f929 	bl	8002318 <HAL_RCC_GetPCLK1Freq>
 80030c6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030d0:	f040 80b6 	bne.w	8003240 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80030d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030d6:	461c      	mov	r4, r3
 80030d8:	f04f 0500 	mov.w	r5, #0
 80030dc:	4622      	mov	r2, r4
 80030de:	462b      	mov	r3, r5
 80030e0:	1891      	adds	r1, r2, r2
 80030e2:	6439      	str	r1, [r7, #64]	; 0x40
 80030e4:	415b      	adcs	r3, r3
 80030e6:	647b      	str	r3, [r7, #68]	; 0x44
 80030e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80030ec:	1912      	adds	r2, r2, r4
 80030ee:	eb45 0303 	adc.w	r3, r5, r3
 80030f2:	f04f 0000 	mov.w	r0, #0
 80030f6:	f04f 0100 	mov.w	r1, #0
 80030fa:	00d9      	lsls	r1, r3, #3
 80030fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003100:	00d0      	lsls	r0, r2, #3
 8003102:	4602      	mov	r2, r0
 8003104:	460b      	mov	r3, r1
 8003106:	1911      	adds	r1, r2, r4
 8003108:	6639      	str	r1, [r7, #96]	; 0x60
 800310a:	416b      	adcs	r3, r5
 800310c:	667b      	str	r3, [r7, #100]	; 0x64
 800310e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	461a      	mov	r2, r3
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	1891      	adds	r1, r2, r2
 800311a:	63b9      	str	r1, [r7, #56]	; 0x38
 800311c:	415b      	adcs	r3, r3
 800311e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003120:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003124:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003128:	f7fd f856 	bl	80001d8 <__aeabi_uldivmod>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4ba5      	ldr	r3, [pc, #660]	; (80033c8 <UART_SetConfig+0x38c>)
 8003132:	fba3 2302 	umull	r2, r3, r3, r2
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	011e      	lsls	r6, r3, #4
 800313a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800313c:	461c      	mov	r4, r3
 800313e:	f04f 0500 	mov.w	r5, #0
 8003142:	4622      	mov	r2, r4
 8003144:	462b      	mov	r3, r5
 8003146:	1891      	adds	r1, r2, r2
 8003148:	6339      	str	r1, [r7, #48]	; 0x30
 800314a:	415b      	adcs	r3, r3
 800314c:	637b      	str	r3, [r7, #52]	; 0x34
 800314e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003152:	1912      	adds	r2, r2, r4
 8003154:	eb45 0303 	adc.w	r3, r5, r3
 8003158:	f04f 0000 	mov.w	r0, #0
 800315c:	f04f 0100 	mov.w	r1, #0
 8003160:	00d9      	lsls	r1, r3, #3
 8003162:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003166:	00d0      	lsls	r0, r2, #3
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	1911      	adds	r1, r2, r4
 800316e:	65b9      	str	r1, [r7, #88]	; 0x58
 8003170:	416b      	adcs	r3, r5
 8003172:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	461a      	mov	r2, r3
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	1891      	adds	r1, r2, r2
 8003180:	62b9      	str	r1, [r7, #40]	; 0x28
 8003182:	415b      	adcs	r3, r3
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003186:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800318a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800318e:	f7fd f823 	bl	80001d8 <__aeabi_uldivmod>
 8003192:	4602      	mov	r2, r0
 8003194:	460b      	mov	r3, r1
 8003196:	4b8c      	ldr	r3, [pc, #560]	; (80033c8 <UART_SetConfig+0x38c>)
 8003198:	fba3 1302 	umull	r1, r3, r3, r2
 800319c:	095b      	lsrs	r3, r3, #5
 800319e:	2164      	movs	r1, #100	; 0x64
 80031a0:	fb01 f303 	mul.w	r3, r1, r3
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	3332      	adds	r3, #50	; 0x32
 80031aa:	4a87      	ldr	r2, [pc, #540]	; (80033c8 <UART_SetConfig+0x38c>)
 80031ac:	fba2 2303 	umull	r2, r3, r2, r3
 80031b0:	095b      	lsrs	r3, r3, #5
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80031b8:	441e      	add	r6, r3
 80031ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80031bc:	4618      	mov	r0, r3
 80031be:	f04f 0100 	mov.w	r1, #0
 80031c2:	4602      	mov	r2, r0
 80031c4:	460b      	mov	r3, r1
 80031c6:	1894      	adds	r4, r2, r2
 80031c8:	623c      	str	r4, [r7, #32]
 80031ca:	415b      	adcs	r3, r3
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
 80031ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80031d2:	1812      	adds	r2, r2, r0
 80031d4:	eb41 0303 	adc.w	r3, r1, r3
 80031d8:	f04f 0400 	mov.w	r4, #0
 80031dc:	f04f 0500 	mov.w	r5, #0
 80031e0:	00dd      	lsls	r5, r3, #3
 80031e2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80031e6:	00d4      	lsls	r4, r2, #3
 80031e8:	4622      	mov	r2, r4
 80031ea:	462b      	mov	r3, r5
 80031ec:	1814      	adds	r4, r2, r0
 80031ee:	653c      	str	r4, [r7, #80]	; 0x50
 80031f0:	414b      	adcs	r3, r1
 80031f2:	657b      	str	r3, [r7, #84]	; 0x54
 80031f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	461a      	mov	r2, r3
 80031fa:	f04f 0300 	mov.w	r3, #0
 80031fe:	1891      	adds	r1, r2, r2
 8003200:	61b9      	str	r1, [r7, #24]
 8003202:	415b      	adcs	r3, r3
 8003204:	61fb      	str	r3, [r7, #28]
 8003206:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800320a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800320e:	f7fc ffe3 	bl	80001d8 <__aeabi_uldivmod>
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	4b6c      	ldr	r3, [pc, #432]	; (80033c8 <UART_SetConfig+0x38c>)
 8003218:	fba3 1302 	umull	r1, r3, r3, r2
 800321c:	095b      	lsrs	r3, r3, #5
 800321e:	2164      	movs	r1, #100	; 0x64
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	3332      	adds	r3, #50	; 0x32
 800322a:	4a67      	ldr	r2, [pc, #412]	; (80033c8 <UART_SetConfig+0x38c>)
 800322c:	fba2 2303 	umull	r2, r3, r2, r3
 8003230:	095b      	lsrs	r3, r3, #5
 8003232:	f003 0207 	and.w	r2, r3, #7
 8003236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4432      	add	r2, r6
 800323c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800323e:	e0b9      	b.n	80033b4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003240:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003242:	461c      	mov	r4, r3
 8003244:	f04f 0500 	mov.w	r5, #0
 8003248:	4622      	mov	r2, r4
 800324a:	462b      	mov	r3, r5
 800324c:	1891      	adds	r1, r2, r2
 800324e:	6139      	str	r1, [r7, #16]
 8003250:	415b      	adcs	r3, r3
 8003252:	617b      	str	r3, [r7, #20]
 8003254:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003258:	1912      	adds	r2, r2, r4
 800325a:	eb45 0303 	adc.w	r3, r5, r3
 800325e:	f04f 0000 	mov.w	r0, #0
 8003262:	f04f 0100 	mov.w	r1, #0
 8003266:	00d9      	lsls	r1, r3, #3
 8003268:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800326c:	00d0      	lsls	r0, r2, #3
 800326e:	4602      	mov	r2, r0
 8003270:	460b      	mov	r3, r1
 8003272:	eb12 0804 	adds.w	r8, r2, r4
 8003276:	eb43 0905 	adc.w	r9, r3, r5
 800327a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	4618      	mov	r0, r3
 8003280:	f04f 0100 	mov.w	r1, #0
 8003284:	f04f 0200 	mov.w	r2, #0
 8003288:	f04f 0300 	mov.w	r3, #0
 800328c:	008b      	lsls	r3, r1, #2
 800328e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003292:	0082      	lsls	r2, r0, #2
 8003294:	4640      	mov	r0, r8
 8003296:	4649      	mov	r1, r9
 8003298:	f7fc ff9e 	bl	80001d8 <__aeabi_uldivmod>
 800329c:	4602      	mov	r2, r0
 800329e:	460b      	mov	r3, r1
 80032a0:	4b49      	ldr	r3, [pc, #292]	; (80033c8 <UART_SetConfig+0x38c>)
 80032a2:	fba3 2302 	umull	r2, r3, r3, r2
 80032a6:	095b      	lsrs	r3, r3, #5
 80032a8:	011e      	lsls	r6, r3, #4
 80032aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ac:	4618      	mov	r0, r3
 80032ae:	f04f 0100 	mov.w	r1, #0
 80032b2:	4602      	mov	r2, r0
 80032b4:	460b      	mov	r3, r1
 80032b6:	1894      	adds	r4, r2, r2
 80032b8:	60bc      	str	r4, [r7, #8]
 80032ba:	415b      	adcs	r3, r3
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032c2:	1812      	adds	r2, r2, r0
 80032c4:	eb41 0303 	adc.w	r3, r1, r3
 80032c8:	f04f 0400 	mov.w	r4, #0
 80032cc:	f04f 0500 	mov.w	r5, #0
 80032d0:	00dd      	lsls	r5, r3, #3
 80032d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80032d6:	00d4      	lsls	r4, r2, #3
 80032d8:	4622      	mov	r2, r4
 80032da:	462b      	mov	r3, r5
 80032dc:	1814      	adds	r4, r2, r0
 80032de:	64bc      	str	r4, [r7, #72]	; 0x48
 80032e0:	414b      	adcs	r3, r1
 80032e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80032e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f04f 0100 	mov.w	r1, #0
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	008b      	lsls	r3, r1, #2
 80032f8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80032fc:	0082      	lsls	r2, r0, #2
 80032fe:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003302:	f7fc ff69 	bl	80001d8 <__aeabi_uldivmod>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	4b2f      	ldr	r3, [pc, #188]	; (80033c8 <UART_SetConfig+0x38c>)
 800330c:	fba3 1302 	umull	r1, r3, r3, r2
 8003310:	095b      	lsrs	r3, r3, #5
 8003312:	2164      	movs	r1, #100	; 0x64
 8003314:	fb01 f303 	mul.w	r3, r1, r3
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	3332      	adds	r3, #50	; 0x32
 800331e:	4a2a      	ldr	r2, [pc, #168]	; (80033c8 <UART_SetConfig+0x38c>)
 8003320:	fba2 2303 	umull	r2, r3, r2, r3
 8003324:	095b      	lsrs	r3, r3, #5
 8003326:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800332a:	441e      	add	r6, r3
 800332c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800332e:	4618      	mov	r0, r3
 8003330:	f04f 0100 	mov.w	r1, #0
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	1894      	adds	r4, r2, r2
 800333a:	603c      	str	r4, [r7, #0]
 800333c:	415b      	adcs	r3, r3
 800333e:	607b      	str	r3, [r7, #4]
 8003340:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003344:	1812      	adds	r2, r2, r0
 8003346:	eb41 0303 	adc.w	r3, r1, r3
 800334a:	f04f 0400 	mov.w	r4, #0
 800334e:	f04f 0500 	mov.w	r5, #0
 8003352:	00dd      	lsls	r5, r3, #3
 8003354:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003358:	00d4      	lsls	r4, r2, #3
 800335a:	4622      	mov	r2, r4
 800335c:	462b      	mov	r3, r5
 800335e:	eb12 0a00 	adds.w	sl, r2, r0
 8003362:	eb43 0b01 	adc.w	fp, r3, r1
 8003366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	4618      	mov	r0, r3
 800336c:	f04f 0100 	mov.w	r1, #0
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	008b      	lsls	r3, r1, #2
 800337a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800337e:	0082      	lsls	r2, r0, #2
 8003380:	4650      	mov	r0, sl
 8003382:	4659      	mov	r1, fp
 8003384:	f7fc ff28 	bl	80001d8 <__aeabi_uldivmod>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	4b0e      	ldr	r3, [pc, #56]	; (80033c8 <UART_SetConfig+0x38c>)
 800338e:	fba3 1302 	umull	r1, r3, r3, r2
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	2164      	movs	r1, #100	; 0x64
 8003396:	fb01 f303 	mul.w	r3, r1, r3
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	3332      	adds	r3, #50	; 0x32
 80033a0:	4a09      	ldr	r2, [pc, #36]	; (80033c8 <UART_SetConfig+0x38c>)
 80033a2:	fba2 2303 	umull	r2, r3, r2, r3
 80033a6:	095b      	lsrs	r3, r3, #5
 80033a8:	f003 020f 	and.w	r2, r3, #15
 80033ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4432      	add	r2, r6
 80033b2:	609a      	str	r2, [r3, #8]
}
 80033b4:	bf00      	nop
 80033b6:	377c      	adds	r7, #124	; 0x7c
 80033b8:	46bd      	mov	sp, r7
 80033ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033be:	bf00      	nop
 80033c0:	40011000 	.word	0x40011000
 80033c4:	40011400 	.word	0x40011400
 80033c8:	51eb851f 	.word	0x51eb851f

080033cc <__libc_init_array>:
 80033cc:	b570      	push	{r4, r5, r6, lr}
 80033ce:	4d0d      	ldr	r5, [pc, #52]	; (8003404 <__libc_init_array+0x38>)
 80033d0:	4c0d      	ldr	r4, [pc, #52]	; (8003408 <__libc_init_array+0x3c>)
 80033d2:	1b64      	subs	r4, r4, r5
 80033d4:	10a4      	asrs	r4, r4, #2
 80033d6:	2600      	movs	r6, #0
 80033d8:	42a6      	cmp	r6, r4
 80033da:	d109      	bne.n	80033f0 <__libc_init_array+0x24>
 80033dc:	4d0b      	ldr	r5, [pc, #44]	; (800340c <__libc_init_array+0x40>)
 80033de:	4c0c      	ldr	r4, [pc, #48]	; (8003410 <__libc_init_array+0x44>)
 80033e0:	f000 f820 	bl	8003424 <_init>
 80033e4:	1b64      	subs	r4, r4, r5
 80033e6:	10a4      	asrs	r4, r4, #2
 80033e8:	2600      	movs	r6, #0
 80033ea:	42a6      	cmp	r6, r4
 80033ec:	d105      	bne.n	80033fa <__libc_init_array+0x2e>
 80033ee:	bd70      	pop	{r4, r5, r6, pc}
 80033f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033f4:	4798      	blx	r3
 80033f6:	3601      	adds	r6, #1
 80033f8:	e7ee      	b.n	80033d8 <__libc_init_array+0xc>
 80033fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80033fe:	4798      	blx	r3
 8003400:	3601      	adds	r6, #1
 8003402:	e7f2      	b.n	80033ea <__libc_init_array+0x1e>
 8003404:	08003464 	.word	0x08003464
 8003408:	08003464 	.word	0x08003464
 800340c:	08003464 	.word	0x08003464
 8003410:	08003468 	.word	0x08003468

08003414 <memset>:
 8003414:	4402      	add	r2, r0
 8003416:	4603      	mov	r3, r0
 8003418:	4293      	cmp	r3, r2
 800341a:	d100      	bne.n	800341e <memset+0xa>
 800341c:	4770      	bx	lr
 800341e:	f803 1b01 	strb.w	r1, [r3], #1
 8003422:	e7f9      	b.n	8003418 <memset+0x4>

08003424 <_init>:
 8003424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003426:	bf00      	nop
 8003428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342a:	bc08      	pop	{r3}
 800342c:	469e      	mov	lr, r3
 800342e:	4770      	bx	lr

08003430 <_fini>:
 8003430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003432:	bf00      	nop
 8003434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003436:	bc08      	pop	{r3}
 8003438:	469e      	mov	lr, r3
 800343a:	4770      	bx	lr
